// Generated by CoffeeScript 2.7.0
var minimal_decimal_representation;

import {
  g,
  range,
  print,
  scalex,
  scaley,
  assert
} from './globals.js';

import {
  parseExpr
} from './parser.js';

import {
  Player
} from './player.js';

import {
  Edmonds
} from './blossom.js';

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

minimal_decimal_representation = function(numbers) {
  var all_unique_with_decimals, decimals, get_decimal_representation, k, l, len, len1, max_decimals, n, num, ref, results;
  get_decimal_representation = function(num, decimals) {
    return num.toFixed(decimals);
  };
  all_unique_with_decimals = function(numbers, decimals) {
    var num, representations;
    representations = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = numbers.length; k < len; k++) {
        num = numbers[k];
        results.push(get_decimal_representation(num, decimals));
      }
      return results;
    })();
    return (new Set(representations)).length === numbers.length;
  };
  print(numbers);
  max_decimals = 10; // Maximum number of decimals to check for uniqueness
  n = numbers.length;
  ref = range(max_decimals + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    decimals = ref[k];
    if (all_unique_with_decimals(numbers, decimals)) {
      break;
    }
  }
  results = [];
  for (l = 0, len1 = numbers.length; l < len1; l++) {
    num = numbers[l];
    results.push(get_decimal_representation(num, decimals));
  }
  return results;
};

assert([], minimal_decimal_representation([1.234567, 1.234568, 1.234569, 2.34567, 2.34568]));

export var Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.round = 0;
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(g.N);
    this.mat = [];
  }

  write() {}

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, b, cost, diff, edges, k, l, len, len1, pa, pb, r, ref, ref1;
    edges = [];
    r = this.round;
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      pa = this.persons[a];
      if (!pa.active || pa.id === iBye) {
        continue;
      }
      ref1 = range(a + 1, g.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        b = ref1[l];
        pb = this.persons[b];
        if (!pb.active || pb.id === iBye) {
          continue;
        }
        // if g.DIFF == 'ELO0'  then diff = abs pa.elo0 - pb.elo0
        //if g.DIFF == 'ELO' then diff = abs pa.elo(r) - pb.elo(r)
        if (g.DIFF === 'ELO') {
          diff = abs(pa.elo0 - pb.elo0);
        }
        if (g.DIFF === 'POS') {
          diff = abs(pa.pos[r] - pb.pos[r]);
        }
        cost = 9999 - diff ** g.EXPONENT;
        if (g.ok(pa, pb)) {
          edges.push([pa.id, pb.id, cost]);
        }
      }
    }
    return edges;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  flip(p0, p1) { // p0 byter färg, p0 anpassar sig
    var col0, col1;
    col0 = _.last(p0.col);
    col1 = col0;
    col0 = other(col0);
    p0.col += col0;
    return p1.col += col1;
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([
          i,
          j //[@players[i].id,@players[j].id]
        ]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  solutionCost(pair) {
    var a, b, da, db, diff, pa, pb, r;
    [a, b] = pair;
    pa = this.persons[a];
    pb = this.persons[b];
    if (g.DIFF === 'ELO') {
      r = this.round;
      da = pa.elo0; //(r)
      db = pb.elo0; //(r)
    }
    if (g.DIFF === 'POS') {
      da = pa.pos[r];
      db = pb.pos[r];
    }
    diff = Math.abs(da - db);
    return diff ** g.EXPONENT;
  }

  // print diff
  // print 'solutionCost', a,b,diff
  // diff
  solutionCosts(pairs) {
    var pair;
    
    // print 'solutionCosts',pairs
    // print (@solutionCost(pair) for pair in pairs)
    return g.sumNumbers((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = pairs.length; k < len; k++) {
        pair = pairs[k];
        results.push(this.solutionCost(pair));
      }
      return results;
    }).call(this));
  }

  preMatch() { // return id för spelaren som ska ha bye eller -1 om bye saknas
    var k, len, p, pBye, ref, temp;
    ref = this.persons;
    
    // or g.BYE == _.last p.opp
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (!p.active) {
        p.res += '0';
      }
    }
    // if p.active or g.BYE != _.last p.opp then continue
    // if p.active then continue
    // p.opp.push g.PAUSE
    // p.col += ' '
    temp = _.filter(this.persons, function(p) {
      return p.active;
    });
    if (temp.length % 2 === 1) { // Spelaren med lägst elo och som inte har haft frirond, får frironden
      temp = _.filter(this.persons, function(p) {
        return p.active && p.bye() === false;
      });
      pBye = _.last(temp);
      pBye.opp.push(g.BYE);
      pBye.col += ' ';
      pBye.res += '2';
      return pBye.id;
    }
    return g.BYE;
  }

  postMatch() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, m, o, p, pa, pb, q, ref, ref1, ref2, ref3, ref4, results;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.active) {
        continue;
      }
      p.opp.push(g.PAUSE);
      p.col += ' ';
    }
    ref1 = this.pairs;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      [a, b] = ref1[l];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        i = ref2[m];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = g.other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        i = ref3[o];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = q = 0, len4 = ref4.length; q < len4; i = ++q) {
      [a, b] = ref4[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  scoringProbability(diff) {
    return 1 / (1 + 10 ** (diff / 400));
  }

  // updateElo : (pa,pb) =>
  // 	diff = pb.elo0 - pa.elo0
  // 	if @round == 0
  // 		amount = 0
  // 	else
  // 		amount = pa.res[@round-1] / 2 - @scoringProbability(diff)
  // 	print 'updateElo', @round, pa.res, pb.elo0, pa.elo0, diff, amount
  // 	aold = pa.elo
  // 	bold = pb.elo
  // 	pa.elo +=  amount # g.K * amount
  // 	pb.elo += -amount #-g.K * amount
  // 	print pa.name, aold, '->',pa.elo, pb.name, bold, '->',pb.elo, diff, g.K * amount
  improveChanges() {
    var changes, p;
    changes = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.change(this.round));
      }
      return results;
    }).call(this);
    return print('changes', changes);
  }

  lotta() {
    var a, b, c, edges, i, id, index, k, l, len, len1, p, ref, solution, start, timestamp;
    if (this.round > 0 && g.calcMissing() > 0) {
      print('lottning ej genomförd!');
      return;
    }
    this.improveChanges();
    this.personsSorted = _.clone(this.persons);
    this.personsSorted.sort((pa, pb) => {
      var da, db;
      da = pa.elo0;
      db = pb.elo0;
      return db - da;
    });
    ref = range(this.personsSorted.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.personsSorted[i].pos[this.round] = i;
    }
    print('sorted', this.personsSorted);
    print(`Lottning av rond ${this.round} =====================================================`);
    document.title = `Round ${this.round + 1}`;
    print('pos', (function() {
      var l, len1, ref1, results;
      ref1 = this.personsSorted;
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        results.push(p.id);
      }
      return results;
    }).call(this));
    start = new Date();
    edges = this.makeEdges(this.preMatch()); // -1 om bye saknas
    // edges.sort (a,b) -> b[2] - a[2] # behöver egentligen ej sorteras. blossoms klarar sig ändå.
    print('edges:', (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = edges.length; l < len1; l++) {
        [a, b, c] = edges[l];
        results.push(`${a}-${b} ${(9999 - c).toFixed(1)}`);
      }
      return results;
    })());
    solution = this.findSolution(edges);
    print('solution', solution);
    print('cpu', new Date() - start);
    for (id = l = 0, len1 = solution.length; l < len1; id = ++l) {
      index = solution[id];
      p = this.persons[index];
      if (id === -1 && ((g.BYE === _.last(p.opp)) || p.active)) {
        print('Solution failed!');
        return;
      }
    }
    this.pairs = this.unscramble(solution);
    if (this.round === 0) {
      print('pairs', this.pairs);
    }
    if (this.round > 0) {
      // print 'pairs', ([a, b, @persons[a].elo(@round-1), @persons[b].elo(@round-1), Math.abs(@persons[a].elo(@round-1) - @persons[b].elo(@round-1)).toFixed(1)] for [a,b] in @pairs)
      print('pairs', (function() {
        var len2, m, ref1, results;
        ref1 = this.pairs;
        results = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          [a, b] = ref1[m];
          results.push([a, b, this.persons[a].elo0, this.persons[b].elo0, Math.abs(this.persons[a].elo0 - this.persons[b].elo0).toFixed(1)]);
        }
        return results;
      }).call(this));
    }
    //print 'pairs', ([a, b, @persons[a].pos[@round], @persons[b].pos[@round], Math.abs(@persons[a].pos[@round] - @persons[b].pos[@round])] for [a,b] in @pairs)
    print('solutionCosts', this.solutionCosts(this.pairs));
    this.postMatch();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    timestamp = new Date().toLocaleString('se-SE').replaceAll(' ', '_');
    this.downloadFile(this.makeURL(timestamp), `${timestamp}-${this.round} URL.txt`);
    this.downloadFile(this.makeStandardFile(), `${timestamp}-${this.round}.txt`);
    if (g.N < 80) {
      print(this.makeMatrix()); // skriver till debug-fönstret, time outar inte.
    }
    this.round += 1;
    // print 'lotta round', @round
    return g.state = g.TABLES;
  }

  fetchURL(url = location.search) {
    var XMAX, XMIN, a, b, getParam, i, id, k, l, len, len1, len2, len3, m, o, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, urlParams;
    if (url === '') {
      window.location.href = "https://github.com/ChristerNilsson/ELO-Pairings/blob/main/README.md";
    }
    print('fetchURL', url);
    getParam = function(name, def) {
      return urlParams.get(name) || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.title = urlParams.get('TOUR').replaceAll('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.round = parseInt(getParam('ROUND', 0));
    this.first = getParam('FIRST', 'bw'); // Determines if first player has white or black in the first round
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    // g.K0 = parseInt getParam 'K0', 10 # 40, 20 or 10 normally
    // g.k  = parseFloat getParam 'k',1
    players = urlParams.get('PLAYERS');
    players = players.replaceAll(')(', ')!(');
    players = players.replaceAll('_', ' ');
    players = '(' + players + ')';
    players = parseExpr(players);
    print('fetchURL.players', players);
    g.N = players.length;
    if ((4 <= (ref = g.N) && ref < 1000)) {

    } else {
      print("Error: Number of players must be between 4 and 999!");
      return;
    }
    this.persons = [];
    ref1 = range(g.N);
    for (k = 0, len = ref1.length; k < len; k++) {
      i = ref1[k];
      player = new Player(i);
      player.read(players[i]);
      // print 'fetchURL.player',player
      this.persons.push(player);
    }
    this.paused = getParam('PAUSED', '()'); // list of zero based ids
    this.paused = parseExpr(this.paused);
    ref2 = this.paused;
    for (l = 0, len1 = ref2.length; l < len1; l++) {
      id = ref2[l];
      this.persons[id].active = false;
    }
    print('fetchURL.persons', this.persons);
    this.persons.sort(function(a, b) {
      if (a.elo0 !== b.elo0) {
        return b.elo0 - a.elo0;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    // @persons = @persons.reverse()
    XMAX = this.persons[0].elo0;
    XMIN = _.last(this.persons).elo0;
    ref3 = range(g.N);
    for (m = 0, len2 = ref3.length; m < len2; m++) {
      i = ref3[m];
      this.persons[i].id = i;
      this.persons[i].elo = parseInt(this.persons[i].elo0);
    }
    print((function() {
      var len3, o, ref4, results;
      ref4 = this.persons;
      results = [];
      for (o = 0, len3 = ref4.length; o < len3; o++) {
        p = ref4[o];
        results.push(p.elo0);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    this.playersByName = _.sortBy(this.persons, function(player) {
      return player.name;
    });
    print('playersByName', (function() {
      var len3, o, ref4, results;
      ref4 = this.playersByName;
      results = [];
      for (o = 0, len3 = ref4.length; o < len3; o++) {
        p = ref4[o];
        results.push(p.name);
      }
      return results;
    }).call(this));
    // extract @pairs from the last round
    this.pairs = [];
    ref4 = this.persons;
    for (o = 0, len3 = ref4.length; o < len3; o++) {
      p = ref4[o];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = this.persons[a];
        pb = this.persons[b];
        this.pairs.push('w' === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    print('@pairs', this.pairs);
    g.pages = [new Tables(), new Names(), new Standings(), new Active()];
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    return g.pages[g.STANDINGS].setLista();
  }

  makeURL(timestamp) {
    var k, len, p, players, ref, res, s;
    res = [];
    res.push("https://christernilsson.github.io/ELO-Pairings");
    //res.push "http://127.0.0.1:5500"
    res.push("?TOUR=" + this.title.replaceAll(' ', '_'));
    res.push("&TIMESTAMP=" + timestamp);
    res.push("&ROUND=" + this.round);
    res.push("&PLAYERS=");
    players = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      s = p.write();
      players.push('(' + s + ')');
    }
    players = players.join("\n");
    res = res.concat(players);
    return res.join('\n');
  }

  makeStandardFile() {
    var header_after, header_in, res, timestamp;
    res = [];
    timestamp = new Date().toLocaleString('se-SE');
    // print timestamp
    header_after = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header_in = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round < 999) {
      g.pages[g.STANDINGS].make(res, header_after);
    }
    if (this.round >= 0) {
      g.pages[g.NAMES].make(res, header_in, this.playersByName);
    }
    if (this.round < 999) {
      g.pages[g.TABLES].make(res, header_in);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (a < 0 || b < 0) {
          continue;
        }
        pa = this.persons[a];
        pb = this.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo0 - pb.elo0));
        }
      }
    }
    return (g.sum(result) / result.length).toFixed(2);
  }

  makeCanvas() {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(g.N);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) DIFF:${g.DIFF} EXPONENT:${g.EXPONENT} COLORS:${g.COLORS} K0:${g.K0} k:${g.k}`);
    output.push("");
    header = ((function() {
      var k, len, ref, results;
      ref = range(g.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo0);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds) {
    var a, b, canvas, i, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas();
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        // print 'drawMatrix',a,b
        if (a < 0 || b < 0) {
          continue;
        }
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = g.ALFABET[i];
          canvas[b][a] = g.ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas);
  }

  makeMatrix() {
    var k, l, len, len1, matrix, p, r, ref, ref1, res;
    matrix = [];
    ref = range(this.round);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      res = [];
      ref1 = this.persons;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        res.push([p.id, p.opp[r]]);
      }
      matrix.push(res);
    }
    return this.drawMatrix(this.title, matrix);
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLlxcIiwic291cmNlcyI6WyJjb2ZmZWVcXHRvdXJuYW1lbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBOztBQUFBLE9BQUE7RUFBUyxDQUFUO0VBQVksS0FBWjtFQUFtQixLQUFuQjtFQUEwQixNQUExQjtFQUFrQyxNQUFsQztFQUEwQyxNQUExQztDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFNBQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxNQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsT0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsU0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7Q0FBQSxNQUFBOztBQUVBLDhCQUFBLEdBQWlDLFFBQUEsQ0FBQyxPQUFELENBQUE7QUFDakMsTUFBQSx3QkFBQSxFQUFBLFFBQUEsRUFBQSwwQkFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQywwQkFBQSxHQUE2QixRQUFBLENBQUMsR0FBRCxFQUFNLFFBQU4sQ0FBQTtXQUFtQixHQUFHLENBQUMsT0FBSixDQUFZLFFBQVo7RUFBbkI7RUFDN0Isd0JBQUEsR0FBMkIsUUFBQSxDQUFDLE9BQUQsRUFBVSxRQUFWLENBQUE7QUFDNUIsUUFBQSxHQUFBLEVBQUE7SUFBRSxlQUFBOztBQUFtQjtNQUFBLEtBQUEseUNBQUE7O3FCQUFBLDBCQUFBLENBQTJCLEdBQTNCLEVBQWdDLFFBQWhDO01BQUEsQ0FBQTs7O1dBQ25CLENBQUMsSUFBSSxHQUFKLENBQVEsZUFBUixDQUFELENBQTBCLENBQUMsTUFBM0IsS0FBcUMsT0FBTyxDQUFD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LENBQUQ7VUFDeEIsTUFBTSxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBVCxHQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBRCxFQUZ6Qjs7TUFIRDtJQUREO1dBT0EsSUFBQyxDQUFBLFVBQUQsQ0FBWSxLQUFaLEVBQWtCLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxDQUFsQixFQUFtQyxNQUFuQztFQVRZOztFQVdiLFVBQWEsQ0FBQSxDQUFBO0FBQ2QsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQTtJQUFFLE1BQUEsR0FBUztBQUNUO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxHQUFBLEdBQU07QUFDTjtNQUFBLEtBQUEsd0NBQUE7O1FBQ0MsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFILEVBQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQVgsQ0FBVDtNQUREO01BRUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxHQUFaO0lBSkQ7V0FLQSxJQUFDLENBQUEsVUFBRCxDQUFZLElBQUMsQ0FBQSxLQUFiLEVBQW9CLE1BQXBCO0VBUFk7O0FBclpQIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZywgcmFuZ2UsIHByaW50LCBzY2FsZXgsIHNjYWxleSwgYXNzZXJ0IH0gZnJvbSAnLi9nbG9iYWxzLmpzJyBcclxuaW1wb3J0IHsgcGFyc2VFeHByIH0gZnJvbSAnLi9wYXJzZXIuanMnXHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vcGxheWVyLmpzJ1xyXG5pbXBvcnQgeyBFZG1vbmRzIH0gZnJvbSAnLi9ibG9zc29tLmpzJyBcclxuaW1wb3J0IHsgVGFibGVzIH0gZnJvbSAnLi9wYWdlX3RhYmxlcy5qcycgXHJcbmltcG9ydCB7IE5hbWVzIH0gZnJvbSAnLi9wYWdlX25hbWVzLmpzJyBcclxuaW1wb3J0IHsgU3RhbmRpbmdzIH0gZnJvbSAnLi9wYWdlX3N0YW5kaW5ncy5qcycgXHJcbmltcG9ydCB7IEFjdGl2ZSB9IGZyb20gJy4vcGFnZV9hY3RpdmUuanMnIFxyXG5cclxubWluaW1hbF9kZWNpbWFsX3JlcHJlc2VudGF0aW9uID0gKG51bWJlcnMpIC0+XHJcblx0Z2V0X2RlY2ltYWxfcmVwcmVzZW50YXRpb24gPSAobnVtLCBkZWNpbWFscykgLT4gbnVtLnRvRml4ZWQgZGVjaW1hbHNcclxuXHRhbGxfdW5pcXVlX3dpdGhfZGVjaW1hbHMgPSAobnVtYmVycywgZGVjaW1hbHMpIC0+XHJcblx0XHRyZXByZXNlbnRhdGlvbnMgPSAoZ2V0X2RlY2ltYWxfcmVwcmVzZW50YXRpb24obnVtLCBkZWNpbWFscykgZm9yIG51bSBpbiBudW1iZXJzKVxyXG5cdFx0KG5ldyBTZXQocmVwcmVzZW50YXRpb25zKSkubGVuZ3RoID09IG51bWJlcnMubGVuZ3RoXHJcblxyXG5cdHByaW50IG51bWJlcnNcclxuXHRtYXhfZGVjaW1hbHMgPSAxMCAgIyBNYXhpbXVtIG51bWJlciBvZiBkZWNpbWFscyB0byBjaGVjayBmb3IgdW5pcXVlbmVzc1xyXG5cdG4gPSBudW1iZXJzLmxlbmd0aFxyXG5cdGZvciBkZWNpbWFscyBpbiByYW5nZSBtYXhfZGVjaW1hbHMgKyAxXHJcblx0XHRpZiBhbGxfdW5pcXVlX3dpdGhfZGVjaW1hbHMobnVtYmVycywgZGVjaW1hbHMpIHRoZW4gYnJlYWtcclxuXHJcblx0KGdldF9kZWNpbWFsX3JlcHJlc2VudGF0aW9uKG51bSwgZGVjaW1hbHMpIGZvciBudW0gaW4gbnVtYmVycylcclxuXHJcbmFzc2VydCBbXSwgbWluaW1hbF9kZWNpbWFsX3JlcHJlc2VudGF0aW9uIFsxLjIzNDU2NywgMS4yMzQ1NjgsIDEuMjM0NTY5LCAyLjM0NTY3LCAyLjM0NTY4XVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvdXJuYW1lbnQgXHJcblx0Y29uc3RydWN0b3IgOiAoKSAtPlxyXG5cdFx0QHRpdGxlID0gJydcclxuXHRcdEByb3VuZCA9IDBcclxuXHRcdEB0cHAgPSAzMFxyXG5cdFx0QHBwcCA9IDYwXHJcblxyXG5cdFx0IyBkZXNzYSB0cmUgbGlzdG9yIHBla2FyIHDDpSBzYW1tYSBvYmpla3RcclxuXHRcdEBwbGF5ZXJzID0gW11cclxuXHRcdEBwZXJzb25zID0gW10gIyBzdGFiaWwsIHNvcnRlcmFkIHDDpSBpZCBvY2ggZWxvXHJcblx0XHRAcGFpcnMgPSBbXSAjIHZhcmllcmFyIG1lZCB2YXJqZSByb25kXHJcblxyXG5cdFx0QHJvYmluID0gcmFuZ2UgZy5OXHJcblx0XHRAbWF0ID0gW11cclxuXHJcblx0d3JpdGUgOiAoKSAtPlxyXG5cclxuXHRtYWtlRWRnZXMgOiAoaUJ5ZSkgLT4gIyBpQnllIMOkciBldHQgaWQgZWxsZXIgLTFcclxuXHRcdGVkZ2VzID0gW11cclxuXHRcdHIgPSBAcm91bmRcclxuXHRcdGZvciBhIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRwYSA9IEBwZXJzb25zW2FdXHJcblx0XHRcdGlmIG5vdCBwYS5hY3RpdmUgb3IgcGEuaWQgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdGZvciBiIGluIHJhbmdlIGErMSwgZy5OXHJcblx0XHRcdFx0cGIgPSBAcGVyc29uc1tiXVxyXG5cdFx0XHRcdGlmIG5vdCBwYi5hY3RpdmUgb3IgcGIuaWQgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0IyBpZiBnLkRJRkYgPT0gJ0VMTzAnICB0aGVuIGRpZmYgPSBhYnMgcGEuZWxvMCAtIHBiLmVsbzBcclxuXHRcdFx0XHQjaWYgZy5ESUZGID09ICdFTE8nIHRoZW4gZGlmZiA9IGFicyBwYS5lbG8ocikgLSBwYi5lbG8ocilcclxuXHRcdFx0XHRpZiBnLkRJRkYgPT0gJ0VMTycgdGhlbiBkaWZmID0gYWJzIHBhLmVsbzAgLSBwYi5lbG8wXHJcblx0XHRcdFx0aWYgZy5ESUZGID09ICdQT1MnIHRoZW4gZGlmZiA9IGFicyBwYS5wb3Nbcl0gLSBwYi5wb3Nbcl1cclxuXHRcdFx0XHRjb3N0ID0gOTk5OSAtIGRpZmYgKiogZy5FWFBPTkVOVFxyXG5cdFx0XHRcdGlmIGcub2sgcGEscGIgdGhlbiBlZGdlcy5wdXNoIFtwYS5pZCwgcGIuaWQsIGNvc3RdXHJcblx0XHRlZGdlc1xyXG5cdFxyXG5cdGZpbmRTb2x1dGlvbiA6IChlZGdlcykgLT4gXHJcblx0XHRlZG1vbmRzID0gbmV3IEVkbW9uZHMgZWRnZXNcclxuXHRcdGVkbW9uZHMubWF4V2VpZ2h0TWF0Y2hpbmcgZWRnZXNcclxuXHJcblx0ZmxpcCA6IChwMCxwMSkgLT4gIyBwMCBieXRlciBmw6RyZywgcDAgYW5wYXNzYXIgc2lnXHJcblx0XHRjb2wwID0gXy5sYXN0IHAwLmNvbFxyXG5cdFx0Y29sMSA9IGNvbDBcclxuXHRcdGNvbDAgPSBvdGhlciBjb2wwXHJcblx0XHRwMC5jb2wgKz0gY29sMFxyXG5cdFx0cDEuY29sICs9IGNvbDFcclxuXHJcblx0YXNzaWduQ29sb3JzIDogKHAwLHAxKSAtPlxyXG5cdFx0YjAgPSBwMC5iYWxhbnMoKVxyXG5cdFx0YjEgPSBwMS5iYWxhbnMoKVxyXG5cdFx0aWYgYjAgPCBiMSB0aGVuIHggPSAwXHJcblx0XHRlbHNlIGlmIGIwID4gYjEgdGhlbiB4ID0gMVxyXG5cdFx0ZWxzZSBpZiBwMC5pZCA8IHAxLmlkIHRoZW4geCA9IDAgZWxzZSB4ID0gMVxyXG5cdFx0cDAuY29sICs9ICd3YidbeF1cclxuXHRcdHAxLmNvbCArPSAnYncnW3hdXHJcblxyXG5cdHVuc2NyYW1ibGUgOiAoc29sdXRpb24pIC0+ICMgWzUsMyw0LDEsMiwwXSA9PiBbWzAsNV0sWzEsM10sWzIsNF1dXHJcblx0XHRzb2x1dGlvbiA9IF8uY2xvbmUgc29sdXRpb25cclxuXHRcdHJlc3VsdCA9IFtdXHJcblx0XHRmb3IgaSBpbiByYW5nZSBzb2x1dGlvbi5sZW5ndGhcclxuXHRcdFx0aWYgc29sdXRpb25baV0gIT0gLTFcclxuXHRcdFx0XHRqID0gc29sdXRpb25baV1cclxuXHRcdFx0XHRyZXN1bHQucHVzaCBbaSxqXSAjW0BwbGF5ZXJzW2ldLmlkLEBwbGF5ZXJzW2pdLmlkXVxyXG5cdFx0XHRcdHNvbHV0aW9uW2pdID0gLTFcclxuXHRcdFx0XHRzb2x1dGlvbltpXSA9IC0xXHJcblx0XHRyZXN1bHRcclxuXHJcblx0c29sdXRpb25Db3N0IDogKHBhaXIpIC0+XHJcblx0XHRbYSxiXSA9IHBhaXJcclxuXHRcdHBhID0gQHBlcnNvbnNbYV1cclxuXHRcdHBiID0gQHBlcnNvbnNbYl1cclxuXHRcdGlmIGcuRElGRiA9PSAnRUxPJ1xyXG5cdFx0XHRyID0gQHJvdW5kXHJcblx0XHRcdGRhID0gcGEuZWxvMCAjKHIpXHJcblx0XHRcdGRiID0gcGIuZWxvMCAjKHIpXHJcblx0XHRpZiBnLkRJRkYgPT0gJ1BPUydcclxuXHRcdFx0ZGEgPSBwYS5wb3Nbcl1cclxuXHRcdFx0ZGIgPSBwYi5wb3Nbcl1cclxuXHRcdGRpZmYgPSBNYXRoLmFicyBkYSAtIGRiXHJcblx0XHRkaWZmICoqIGcuRVhQT05FTlRcclxuXHRcdCMgcHJpbnQgZGlmZlxyXG5cdFx0IyBwcmludCAnc29sdXRpb25Db3N0JywgYSxiLGRpZmZcclxuXHRcdCMgZGlmZlxyXG5cclxuXHRcclxuXHRzb2x1dGlvbkNvc3RzIDogKHBhaXJzKSAtPiBcclxuXHRcdCMgcHJpbnQgJ3NvbHV0aW9uQ29zdHMnLHBhaXJzXHJcblx0XHQjIHByaW50IChAc29sdXRpb25Db3N0KHBhaXIpIGZvciBwYWlyIGluIHBhaXJzKVxyXG5cdFx0Zy5zdW1OdW1iZXJzIChAc29sdXRpb25Db3N0KHBhaXIpIGZvciBwYWlyIGluIHBhaXJzKVxyXG5cclxuXHRwcmVNYXRjaCA6IC0+ICMgcmV0dXJuIGlkIGbDtnIgc3BlbGFyZW4gc29tIHNrYSBoYSBieWUgZWxsZXIgLTEgb20gYnllIHNha25hc1xyXG5cclxuXHRcdCMgb3IgZy5CWUUgPT0gXy5sYXN0IHAub3BwXHJcblxyXG5cdFx0Zm9yIHAgaW4gQHBlcnNvbnNcclxuXHRcdFx0aWYgbm90IHAuYWN0aXZlICB0aGVuIHAucmVzICs9ICcwJ1xyXG5cdFx0XHQjIGlmIHAuYWN0aXZlIG9yIGcuQllFICE9IF8ubGFzdCBwLm9wcCB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdCMgaWYgcC5hY3RpdmUgdGhlbiBjb250aW51ZVxyXG5cdFx0XHQjIHAub3BwLnB1c2ggZy5QQVVTRVxyXG5cdFx0XHQjIHAuY29sICs9ICcgJ1xyXG5cclxuXHRcdHRlbXAgPSBfLmZpbHRlciBAcGVyc29ucywgKHApIC0+IHAuYWN0aXZlIFxyXG5cdFx0aWYgdGVtcC5sZW5ndGggJSAyID09IDEgIyBTcGVsYXJlbiBtZWQgbMOkZ3N0IGVsbyBvY2ggc29tIGludGUgaGFyIGhhZnQgZnJpcm9uZCwgZsOlciBmcmlyb25kZW5cclxuXHRcdFx0dGVtcCA9IF8uZmlsdGVyIEBwZXJzb25zLCAocCkgLT4gcC5hY3RpdmUgYW5kIHAuYnllKCkgPT0gZmFsc2VcclxuXHRcdFx0cEJ5ZSA9IF8ubGFzdCB0ZW1wXHJcblx0XHRcdHBCeWUub3BwLnB1c2ggZy5CWUVcclxuXHRcdFx0cEJ5ZS5jb2wgKz0gJyAnXHJcblx0XHRcdHBCeWUucmVzICs9ICcyJ1xyXG5cdFx0XHRyZXR1cm4gcEJ5ZS5pZFxyXG5cdFx0Zy5CWUVcclxuXHJcblx0cG9zdE1hdGNoIDogLT5cclxuXHRcdGZvciBwIGluIEBwZXJzb25zXHJcblx0XHRcdGlmIHAuYWN0aXZlIHRoZW4gY29udGludWVcclxuXHRcdFx0cC5vcHAucHVzaCBnLlBBVVNFXHJcblx0XHRcdHAuY29sICs9ICcgJ1xyXG5cclxuXHRcdGZvciBbYSxiXSBpbiBAcGFpcnNcclxuXHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdHBhLm9wcC5wdXNoIHBiLmlkXHJcblx0XHRcdHBiLm9wcC5wdXNoIHBhLmlkXHJcblxyXG5cdFx0aWYgQHJvdW5kID09IDBcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFthLGJdID0gQHBhaXJzW2ldXHJcblx0XHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRcdHBiID0gQHBlcnNvbnNbYl1cclxuXHRcdFx0XHRjb2wxID0gXCJid1wiW2klMl1cclxuXHRcdFx0XHRjb2wwID0gZy5vdGhlciBjb2wxXHJcblx0XHRcdFx0cGEuY29sICs9IGNvbDBcclxuXHRcdFx0XHRwYi5jb2wgKz0gY29sMVxyXG5cdFx0XHRcdGlmIGklMj09MSB0aGVuIEBwYWlyc1tpXS5yZXZlcnNlKClcclxuXHRcdGVsc2VcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFthLGJdID0gQHBhaXJzW2ldXHJcblx0XHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRcdHBiID0gQHBlcnNvbnNbYl1cclxuXHRcdFx0XHRAYXNzaWduQ29sb3JzIHBhLHBiXHJcblx0XHRcdFx0aWYgcGEuY29sW0Byb3VuZF09PSdiJyB0aGVuIEBwYWlyc1tpXS5yZXZlcnNlKClcclxuXHJcblx0XHRmb3IgW2EsYl0saSBpbiBAcGFpcnNcclxuXHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdHBhLmNoYWlyID0gMippXHJcblx0XHRcdHBiLmNoYWlyID0gMippICsgMVxyXG5cclxuXHRkb3dubG9hZEZpbGUgOiAodHh0LGZpbGVuYW1lKSAtPlxyXG5cdFx0YmxvYiA9IG5ldyBCbG9iIFt0eHRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9XHJcblx0XHR1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMIGJsb2JcclxuXHRcdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdhJ1xyXG5cdFx0YS5ocmVmID0gdXJsXHJcblx0XHRhLmRvd25sb2FkID0gZmlsZW5hbWVcclxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgYVxyXG5cdFx0YS5jbGljaygpXHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkIGFcclxuXHRcdFVSTC5yZXZva2VPYmplY3RVUkwgdXJsXHJcblxyXG5cdHNjb3JpbmdQcm9iYWJpbGl0eSA6IChkaWZmKSAtPiAxIC8gKDEgKyAxMCAqKiAoZGlmZiAvIDQwMCkpXHJcblxyXG5cdCMgdXBkYXRlRWxvIDogKHBhLHBiKSA9PlxyXG5cdCMgXHRkaWZmID0gcGIuZWxvMCAtIHBhLmVsbzBcclxuXHQjIFx0aWYgQHJvdW5kID09IDBcclxuXHQjIFx0XHRhbW91bnQgPSAwXHJcblx0IyBcdGVsc2VcclxuXHQjIFx0XHRhbW91bnQgPSBwYS5yZXNbQHJvdW5kLTFdIC8gMiAtIEBzY29yaW5nUHJvYmFiaWxpdHkoZGlmZilcclxuXHQjIFx0cHJpbnQgJ3VwZGF0ZUVsbycsIEByb3VuZCwgcGEucmVzLCBwYi5lbG8wLCBwYS5lbG8wLCBkaWZmLCBhbW91bnRcclxuXHQjIFx0YW9sZCA9IHBhLmVsb1xyXG5cdCMgXHRib2xkID0gcGIuZWxvXHJcblx0IyBcdHBhLmVsbyArPSAgYW1vdW50ICMgZy5LICogYW1vdW50XHJcblx0IyBcdHBiLmVsbyArPSAtYW1vdW50ICMtZy5LICogYW1vdW50XHJcblx0IyBcdHByaW50IHBhLm5hbWUsIGFvbGQsICctPicscGEuZWxvLCBwYi5uYW1lLCBib2xkLCAnLT4nLHBiLmVsbywgZGlmZiwgZy5LICogYW1vdW50XHJcblxyXG5cclxuXHJcblxyXG5cdGltcHJvdmVDaGFuZ2VzIDogKCkgLT5cclxuXHRcdGNoYW5nZXMgPSAocC5jaGFuZ2UoQHJvdW5kKSBmb3IgcCBpbiBAcGVyc29ucylcclxuXHRcdHByaW50ICdjaGFuZ2VzJyxjaGFuZ2VzXHJcblxyXG5cdGxvdHRhIDogKCkgLT5cclxuXHJcblx0XHRpZiBAcm91bmQgPiAwIGFuZCBnLmNhbGNNaXNzaW5nKCkgPiAwXHJcblx0XHRcdHByaW50ICdsb3R0bmluZyBlaiBnZW5vbWbDtnJkISdcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0QGltcHJvdmVDaGFuZ2VzKClcclxuXHJcblx0XHRAcGVyc29uc1NvcnRlZCA9IF8uY2xvbmUgQHBlcnNvbnNcclxuXHRcdEBwZXJzb25zU29ydGVkLnNvcnQgKHBhLHBiKSA9PiBcclxuXHRcdFx0ZGEgPSBwYS5lbG8wXHJcblx0XHRcdGRiID0gcGIuZWxvMFxyXG5cdFx0XHRkYiAtIGRhXHJcblxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQHBlcnNvbnNTb3J0ZWQubGVuZ3RoXHJcblx0XHRcdEBwZXJzb25zU29ydGVkW2ldLnBvc1tAcm91bmRdID0gaVxyXG5cclxuXHRcdHByaW50ICdzb3J0ZWQnLEBwZXJzb25zU29ydGVkXHJcblxyXG5cdFx0cHJpbnQgXCJMb3R0bmluZyBhdiByb25kICN7QHJvdW5kfSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVwiXHJcblx0XHRkb2N1bWVudC50aXRsZSA9IFwiUm91bmQgI3tAcm91bmQrMX1cIlxyXG5cclxuXHRcdHByaW50ICdwb3MnLChwLmlkIGZvciBwIGluIEBwZXJzb25zU29ydGVkKVxyXG5cclxuXHRcdHN0YXJ0ID0gbmV3IERhdGUoKVxyXG5cdFx0ZWRnZXMgPSBAbWFrZUVkZ2VzIEBwcmVNYXRjaCgpICMgLTEgb20gYnllIHNha25hc1xyXG5cdFx0IyBlZGdlcy5zb3J0IChhLGIpIC0+IGJbMl0gLSBhWzJdICMgYmVow7Z2ZXIgZWdlbnRsaWdlbiBlaiBzb3J0ZXJhcy4gYmxvc3NvbXMga2xhcmFyIHNpZyDDpG5kw6UuXHJcblx0XHRwcmludCAnZWRnZXM6JywgKFwiI3thfS0je2J9ICN7KDk5OTktYykudG9GaXhlZCgxKX1cIiBmb3IgW2EsYixjXSBpbiBlZGdlcylcclxuXHJcblx0XHRzb2x1dGlvbiA9IEBmaW5kU29sdXRpb24gZWRnZXNcclxuXHRcdHByaW50ICdzb2x1dGlvbicsIHNvbHV0aW9uXHJcblx0XHRwcmludCAnY3B1JywgKG5ldyBEYXRlKCkgLSBzdGFydClcclxuXHJcblx0XHRmb3IgaW5kZXgsaWQgaW4gc29sdXRpb25cclxuXHRcdFx0cCA9IEBwZXJzb25zW2luZGV4XVxyXG5cdFx0XHRpZiBpZCA9PSAtMSBhbmQgKChnLkJZRSA9PSBfLmxhc3QocC5vcHApKSBvciBwLmFjdGl2ZSlcclxuXHRcdFx0XHRwcmludCAnU29sdXRpb24gZmFpbGVkISdcclxuXHRcdFx0XHRyZXR1cm4gXHJcblxyXG5cdFx0QHBhaXJzID0gQHVuc2NyYW1ibGUgc29sdXRpb25cclxuXHRcdGlmIEByb3VuZCA9PSAwXHJcblx0XHRcdHByaW50ICdwYWlycycsIEBwYWlyc1xyXG5cdFx0aWYgQHJvdW5kID4gMFxyXG5cdFx0XHQjIHByaW50ICdwYWlycycsIChbYSwgYiwgQHBlcnNvbnNbYV0uZWxvKEByb3VuZC0xKSwgQHBlcnNvbnNbYl0uZWxvKEByb3VuZC0xKSwgTWF0aC5hYnMoQHBlcnNvbnNbYV0uZWxvKEByb3VuZC0xKSAtIEBwZXJzb25zW2JdLmVsbyhAcm91bmQtMSkpLnRvRml4ZWQoMSldIGZvciBbYSxiXSBpbiBAcGFpcnMpXHJcblx0XHRcdHByaW50ICdwYWlycycsIChbYSwgYiwgQHBlcnNvbnNbYV0uZWxvMCwgQHBlcnNvbnNbYl0uZWxvMCwgTWF0aC5hYnMoQHBlcnNvbnNbYV0uZWxvMCAtIEBwZXJzb25zW2JdLmVsbzApLnRvRml4ZWQoMSldIGZvciBbYSxiXSBpbiBAcGFpcnMpXHJcblx0XHQjcHJpbnQgJ3BhaXJzJywgKFthLCBiLCBAcGVyc29uc1thXS5wb3NbQHJvdW5kXSwgQHBlcnNvbnNbYl0ucG9zW0Byb3VuZF0sIE1hdGguYWJzKEBwZXJzb25zW2FdLnBvc1tAcm91bmRdIC0gQHBlcnNvbnNbYl0ucG9zW0Byb3VuZF0pXSBmb3IgW2EsYl0gaW4gQHBhaXJzKVxyXG5cdFx0cHJpbnQgJ3NvbHV0aW9uQ29zdHMnLCBAc29sdXRpb25Db3N0cyBAcGFpcnNcclxuXHJcblx0XHRAcG9zdE1hdGNoKClcclxuXHJcblx0XHRnLnBhZ2VzW2cuTkFNRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5UQUJMRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5TVEFORElOR1NdLnNldExpc3RhKClcclxuXHJcblx0XHR0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdzZS1TRScpLnJlcGxhY2VBbGwgJyAnLCdfJ1xyXG5cclxuXHRcdEBkb3dubG9hZEZpbGUgQG1ha2VVUkwodGltZXN0YW1wKSwgXCIje3RpbWVzdGFtcH0tI3tAcm91bmR9IFVSTC50eHRcIlxyXG5cdFx0QGRvd25sb2FkRmlsZSBAbWFrZVN0YW5kYXJkRmlsZSgpLCBcIiN7dGltZXN0YW1wfS0je0Byb3VuZH0udHh0XCJcclxuXHJcblx0XHRpZiBnLk4gPCA4MCB0aGVuIHByaW50IEBtYWtlTWF0cml4KCkgIyBza3JpdmVyIHRpbGwgZGVidWctZsO2bnN0cmV0LCB0aW1lIG91dGFyIGludGUuXHJcblxyXG5cdFx0QHJvdW5kICs9IDFcclxuXHJcblx0XHQjIHByaW50ICdsb3R0YSByb3VuZCcsIEByb3VuZFxyXG5cdFx0Zy5zdGF0ZSA9IGcuVEFCTEVTXHJcblxyXG5cdGZldGNoVVJMIDogKHVybCA9IGxvY2F0aW9uLnNlYXJjaCkgLT5cclxuXHRcdGlmIHVybCA9PSAnJyB0aGVuIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gXCJodHRwczovL2dpdGh1Yi5jb20vQ2hyaXN0ZXJOaWxzc29uL0VMTy1QYWlyaW5ncy9ibG9iL21haW4vUkVBRE1FLm1kXCJcclxuXHRcdHByaW50ICdmZXRjaFVSTCcsdXJsXHJcblx0XHRnZXRQYXJhbSA9IChuYW1lLGRlZikgLT4gdXJsUGFyYW1zLmdldChuYW1lKSB8fCBkZWZcclxuXHJcblx0XHR1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zIHVybFxyXG5cdFx0QHBsYXllcnMgPSBbXVxyXG5cdFx0QHRpdGxlID0gdXJsUGFyYW1zLmdldCgnVE9VUicpLnJlcGxhY2VBbGwgJ18nLCcgJ1xyXG5cdFx0QGRhdHVtID0gdXJsUGFyYW1zLmdldCgnREFURScpIG9yIFwiXCJcclxuXHRcdEByb3VuZCA9IHBhcnNlSW50IGdldFBhcmFtICdST1VORCcsMFxyXG5cdFx0QGZpcnN0ID0gZ2V0UGFyYW0gJ0ZJUlNUJywnYncnICMgRGV0ZXJtaW5lcyBpZiBmaXJzdCBwbGF5ZXIgaGFzIHdoaXRlIG9yIGJsYWNrIGluIHRoZSBmaXJzdCByb3VuZFxyXG5cdFx0QHRwcCA9IHBhcnNlSW50IGdldFBhcmFtICdUUFAnLDMwICMgVGFibGVzIFBlciBQYWdlXHJcblx0XHRAcHBwID0gcGFyc2VJbnQgZ2V0UGFyYW0gJ1BQUCcsNjAgIyBQbGF5ZXJzIFBlciBQYWdlXHJcblx0XHQjIGcuSzAgPSBwYXJzZUludCBnZXRQYXJhbSAnSzAnLCAxMCAjIDQwLCAyMCBvciAxMCBub3JtYWxseVxyXG5cdFx0IyBnLmsgID0gcGFyc2VGbG9hdCBnZXRQYXJhbSAnaycsMVxyXG5cclxuXHRcdHBsYXllcnMgPSB1cmxQYXJhbXMuZ2V0ICdQTEFZRVJTJ1xyXG5cdFx0cGxheWVycyA9IHBsYXllcnMucmVwbGFjZUFsbCAnKSgnLCAnKSEoJ1xyXG5cdFx0cGxheWVycyA9IHBsYXllcnMucmVwbGFjZUFsbCAnXycsJyAnXHJcblx0XHRwbGF5ZXJzID0gJygnICsgcGxheWVycyArICcpJ1xyXG5cdFx0cGxheWVycyA9IHBhcnNlRXhwciBwbGF5ZXJzXHJcblx0XHRwcmludCAnZmV0Y2hVUkwucGxheWVycycscGxheWVyc1xyXG5cclxuXHRcdGcuTiA9IHBsYXllcnMubGVuZ3RoXHJcblxyXG5cdFx0aWYgNCA8PSBnLk4gPCAxMDAwXHJcblx0XHRlbHNlXHJcblx0XHRcdHByaW50IFwiRXJyb3I6IE51bWJlciBvZiBwbGF5ZXJzIG11c3QgYmUgYmV0d2VlbiA0IGFuZCA5OTkhXCJcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0QHBlcnNvbnMgPSBbXVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgZy5OXHJcblx0XHRcdHBsYXllciA9IG5ldyBQbGF5ZXIgaVxyXG5cdFx0XHRwbGF5ZXIucmVhZCBwbGF5ZXJzW2ldXHJcblx0XHRcdCMgcHJpbnQgJ2ZldGNoVVJMLnBsYXllcicscGxheWVyXHJcblx0XHRcdEBwZXJzb25zLnB1c2ggcGxheWVyXHJcblxyXG5cdFx0QHBhdXNlZCA9IGdldFBhcmFtICdQQVVTRUQnLCcoKScgIyBsaXN0IG9mIHplcm8gYmFzZWQgaWRzXHJcblx0XHRAcGF1c2VkID0gcGFyc2VFeHByIEBwYXVzZWRcclxuXHRcdGZvciBpZCBpbiBAcGF1c2VkXHJcblx0XHRcdEBwZXJzb25zW2lkXS5hY3RpdmUgPSBmYWxzZVxyXG5cclxuXHRcdHByaW50ICdmZXRjaFVSTC5wZXJzb25zJywgQHBlcnNvbnNcclxuXHRcdFxyXG5cdFx0QHBlcnNvbnMuc29ydCAoYSxiKSAtPiBcclxuXHRcdFx0aWYgYS5lbG8wICE9IGIuZWxvMCB0aGVuIHJldHVybiBiLmVsbzAgLSBhLmVsbzBcclxuXHRcdFx0aWYgYS5uYW1lID4gYi5uYW1lIHRoZW4gMSBlbHNlIC0xXHJcblx0XHQjIEBwZXJzb25zID0gQHBlcnNvbnMucmV2ZXJzZSgpXHJcblxyXG5cdFx0WE1BWCA9IEBwZXJzb25zWzBdLmVsbzBcclxuXHRcdFhNSU4gPSBfLmxhc3QoQHBlcnNvbnMpLmVsbzBcclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRAcGVyc29uc1tpXS5pZCA9IGlcclxuXHRcdFx0QHBlcnNvbnNbaV0uZWxvID0gcGFyc2VJbnQgQHBlcnNvbnNbaV0uZWxvMFxyXG5cclxuXHRcdHByaW50IChwLmVsbzAgZm9yIHAgaW4gQHBlcnNvbnMpXHJcblx0XHRwcmludCAnc29ydGVkIHBsYXllcnMnLCBAcGVyc29ucyAjIGJ5IGlkIEFORCBkZXNjZW5kaW5nIGVsb1xyXG5cclxuXHRcdEBwbGF5ZXJzQnlOYW1lID0gXy5zb3J0QnkgQHBlcnNvbnMsIChwbGF5ZXIpIC0+IHBsYXllci5uYW1lXHJcblx0XHRwcmludCAncGxheWVyc0J5TmFtZScsIChwLm5hbWUgZm9yIHAgaW4gQHBsYXllcnNCeU5hbWUpXHJcblxyXG5cdFx0IyBleHRyYWN0IEBwYWlycyBmcm9tIHRoZSBsYXN0IHJvdW5kXHJcblx0XHRAcGFpcnMgPSBbXVxyXG5cdFx0Zm9yIHAgaW4gQHBlcnNvbnNcclxuXHRcdFx0YSA9IHAuaWRcclxuXHRcdFx0YiA9IF8ubGFzdCBwLm9wcFxyXG5cdFx0XHRpZiBhIDwgYiBcclxuXHRcdFx0XHRwYSA9IEBwZXJzb25zW2FdXHJcblx0XHRcdFx0cGIgPSBAcGVyc29uc1tiXVxyXG5cdFx0XHRcdEBwYWlycy5wdXNoIGlmICd3JyA9PSBfLmxhc3QgcC5jb2xcclxuXHRcdFx0XHRcdHBhLmNoYWlyID0gMiAqIEBwYWlycy5sZW5ndGhcclxuXHRcdFx0XHRcdHBiLmNoYWlyID0gMiAqIEBwYWlycy5sZW5ndGggKyAxXHJcblx0XHRcdFx0XHRbYSxiXVxyXG5cdFx0XHRcdGVsc2UgXHJcblx0XHRcdFx0XHRwYS5jaGFpciA9IDIgKiBAcGFpcnMubGVuZ3RoICsgMVxyXG5cdFx0XHRcdFx0cGIuY2hhaXIgPSAyICogQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFx0W2IsYV1cclxuXHJcblx0XHRwcmludCAnQHBhaXJzJyxAcGFpcnNcclxuXHJcblx0XHRnLnBhZ2VzID0gW25ldyBUYWJsZXMsIG5ldyBOYW1lcywgbmV3IFN0YW5kaW5ncywgbmV3IEFjdGl2ZV1cclxuXHJcblx0XHRnLnBhZ2VzW2cuTkFNRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5UQUJMRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5TVEFORElOR1NdLnNldExpc3RhKClcclxuXHJcblx0bWFrZVVSTCA6ICh0aW1lc3RhbXApIC0+XHJcblx0XHRyZXMgPSBbXVxyXG5cdFx0cmVzLnB1c2ggXCJodHRwczovL2NocmlzdGVybmlsc3Nvbi5naXRodWIuaW8vRUxPLVBhaXJpbmdzXCJcclxuXHRcdCNyZXMucHVzaCBcImh0dHA6Ly8xMjcuMC4wLjE6NTUwMFwiXHJcblx0XHRyZXMucHVzaCBcIj9UT1VSPVwiICsgQHRpdGxlLnJlcGxhY2VBbGwgJyAnLCdfJ1xyXG5cdFx0cmVzLnB1c2ggXCImVElNRVNUQU1QPVwiICsgdGltZXN0YW1wXHJcblx0XHRyZXMucHVzaCBcIiZST1VORD1cIiArIEByb3VuZFxyXG5cdFx0cmVzLnB1c2ggXCImUExBWUVSUz1cIiBcclxuXHRcdFxyXG5cdFx0cGxheWVycyA9IFtdXHJcblx0XHRmb3IgcCBpbiBAcGVyc29uc1xyXG5cdFx0XHRzID0gcC53cml0ZSgpXHJcblx0XHRcdHBsYXllcnMucHVzaCAnKCcgKyBzICsgJyknXHJcblx0XHRwbGF5ZXJzID0gcGxheWVycy5qb2luKFwiXFxuXCIpXHJcblx0XHRyZXMgPSByZXMuY29uY2F0IHBsYXllcnNcclxuXHRcdHJlcy5qb2luICdcXG4nXHJcblxyXG5cdG1ha2VTdGFuZGFyZEZpbGUgOiAoKSAtPlxyXG5cdFx0cmVzID0gW11cclxuXHRcdHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcgJ3NlLVNFJ1xyXG5cdFx0IyBwcmludCB0aW1lc3RhbXBcclxuXHRcdGhlYWRlcl9hZnRlciA9IFwiIGZvciBcIiArIEB0aXRsZSArIFwiIGFmdGVyIFJvdW5kICN7QHJvdW5kfSAgICAje3RpbWVzdGFtcH1cIlxyXG5cdFx0aGVhZGVyX2luICAgID0gXCIgZm9yIFwiICsgQHRpdGxlICsgXCIgaW4gUm91bmQgI3tAcm91bmQrMX0gICAgI3t0aW1lc3RhbXB9XCJcclxuXHJcblx0XHRpZiBAcm91bmQgPCA5OTkgdGhlbiBnLnBhZ2VzW2cuU1RBTkRJTkdTXS5tYWtlIHJlcywgaGVhZGVyX2FmdGVyXHJcblx0XHRpZiBAcm91bmQgPj0gMCAgdGhlbiBnLnBhZ2VzW2cuTkFNRVNdLm1ha2UgICAgIHJlcywgaGVhZGVyX2luLEBwbGF5ZXJzQnlOYW1lXHJcblx0XHRpZiBAcm91bmQgPCA5OTkgdGhlbiBnLnBhZ2VzW2cuVEFCTEVTXS5tYWtlICAgIHJlcywgaGVhZGVyX2luXHJcblxyXG5cdFx0cmVzLmpvaW4gXCJcXG5cIlx0XHJcblxyXG5cdGRpc3RhbnMgOiAocm91bmRzKSAtPlxyXG5cdFx0cmVzdWx0ID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlKHJvdW5kcy5sZW5ndGgpIFxyXG5cdFx0XHRmb3IgW2EsYl0gaW4gcm91bmRzW2ldXHJcblx0XHRcdFx0aWYgYSA8IDAgb3IgYiA8IDAgdGhlbiBjb250aW51ZVxyXG5cdFx0XHRcdHBhID0gQHBlcnNvbnNbYV1cclxuXHRcdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdFx0aWYgcGEuYWN0aXZlIGFuZCBwYi5hY3RpdmUgXHJcblx0XHRcdFx0XHRyZXN1bHQucHVzaCBhYnMocGEuZWxvMCAtIHBiLmVsbzApIFxyXG5cdFx0KGcuc3VtKHJlc3VsdCkvcmVzdWx0Lmxlbmd0aCkudG9GaXhlZCAyXHJcblxyXG5cdG1ha2VDYW52YXMgOiAtPlxyXG5cdFx0cmVzdWx0ID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRsaW5lID0gbmV3IEFycmF5IGcuTlxyXG5cdFx0XHRfLmZpbGwgbGluZSwgJ8K3J1xyXG5cdFx0XHRsaW5lW2ldID0gJyonXHJcblx0XHRcdHJlc3VsdC5wdXNoIGxpbmVcclxuXHRcdHJlc3VsdFxyXG5cclxuXHRkdW1wQ2FudmFzIDogKHRpdGxlLGF2ZXJhZ2UsY2FudmFzKSAtPlxyXG5cdFx0b3V0cHV0ID0gW1wiXCIsIHRpdGxlXVxyXG5cdFx0b3V0cHV0LnB1c2ggXCJTcGFyc2VuZXNzOiAje2F2ZXJhZ2V9ICAoQXZlcmFnZSBFbG8gRGlmZmVyZW5jZSkgRElGRjoje2cuRElGRn0gRVhQT05FTlQ6I3tnLkVYUE9ORU5UfSBDT0xPUlM6I3tnLkNPTE9SU30gSzA6I3tnLkswfSBrOiN7Zy5rfVwiXHJcblx0XHRvdXRwdXQucHVzaCBcIlwiXHJcblx0XHRoZWFkZXIgPSAoc3RyKChpICsgMSkgJSAxMCkgZm9yIGkgaW4gcmFuZ2UoZy5OKSkuam9pbignICcpXHJcblx0XHRvdXRwdXQucHVzaCAnICAgICAnICsgaGVhZGVyICsgJyAgIEVsbyAgICBBRUQnXHJcblx0XHRvcmRuaW5nID0gKHAuZWxvMCBmb3IgcCBpbiBAcGVyc29ucylcclxuXHRcdGZvciBpIGluIHJhbmdlIGNhbnZhcy5sZW5ndGhcclxuXHRcdFx0cm93ID0gY2FudmFzW2ldXHJcblx0XHRcdG5yID0gc3RyKGkgKyAxKS5wYWRTdGFydCgzKVxyXG5cdFx0XHRvdXRwdXQucHVzaCBcIiN7bnJ9ICAjeyhzdHIoaXRlbSkgZm9yIGl0ZW0gaW4gcm93KS5qb2luKFwiIFwiKX0gICN7b3JkbmluZ1tpXX0gI3tAcGVyc29uc1tpXS5hdmdFbG9EaWZmKCkudG9GaXhlZCgxKS5wYWRTdGFydCg2KX1cIlxyXG5cdFx0b3V0cHV0LnB1c2ggJyAgICAgJyArIGhlYWRlclxyXG5cdFx0b3V0cHV0LmpvaW4gJ1xcbidcclxuXHJcblx0ZHJhd01hdHJpeCA6ICh0aXRsZSxyb3VuZHMpIC0+XHJcblx0XHRjYW52YXMgPSBAbWFrZUNhbnZhcygpXHJcblx0XHRmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRcdGZvciBbYSxiXSBpbiByb3VuZHNbaV1cclxuXHRcdFx0XHQjIHByaW50ICdkcmF3TWF0cml4JyxhLGJcclxuXHRcdFx0XHRpZiBhIDwgMCBvciBiIDwgMCB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0aWYgQHBlcnNvbnNbYV0uYWN0aXZlIGFuZCBAcGVyc29uc1tiXS5hY3RpdmVcclxuXHRcdFx0XHRcdGNhbnZhc1thXVtiXSA9IGcuQUxGQUJFVFtpXVxyXG5cdFx0XHRcdFx0Y2FudmFzW2JdW2FdID0gZy5BTEZBQkVUW2ldXHJcblx0XHRAZHVtcENhbnZhcyB0aXRsZSxAZGlzdGFucyhyb3VuZHMpLGNhbnZhc1xyXG5cclxuXHRtYWtlTWF0cml4IDogLT5cclxuXHRcdG1hdHJpeCA9IFtdXHJcblx0XHRmb3IgciBpbiByYW5nZSBAcm91bmRcclxuXHRcdFx0cmVzID0gW11cclxuXHRcdFx0Zm9yIHAgaW4gQHBlcnNvbnNcclxuXHRcdFx0XHRyZXMucHVzaCBbcC5pZCxwLm9wcFtyXV1cdFx0XHRcdFxyXG5cdFx0XHRtYXRyaXgucHVzaCByZXNcclxuXHRcdEBkcmF3TWF0cml4IEB0aXRsZSwgbWF0cml4Il19
//# sourceURL=c:\github\ELO-Pairings\coffee\tournament.coffee