// Generated by CoffeeScript 2.7.0
var KEYWORDS,
  indexOf = [].indexOf;

import {
  g,
  range,
  print,
  scalex,
  scaley,
  assert,
  SEPARATOR
} from './globals.js';

import {
  parseExpr
} from './parser.js';

import {
  Player
} from './player.js';

import {
  Edmonds
} from './blossom.js';

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

KEYWORDS = {};

KEYWORDS.TITLE = 'text';

KEYWORDS.DATE = 'text';

KEYWORDS.ROUND = 'integer';

KEYWORDS.PAUSED = '!-separated integers';

KEYWORDS.TPP = 'integer (Tables Per Page, default: 30)';

KEYWORDS.PPP = 'integer (Players Per Page, default: 60)';

KEYWORDS.K = 'integer (default: 20)';

KEYWORDS.FACTOR = 'float, 0 or larger than 1.2 (default: 2)';

// KEYWORDS.TIMESTAMP = 'text'
export var Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.round = 0;
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(g.N);
    this.mat = [];
    this.virgin = true;
  }

  write() {}

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, arr, b, cost, diff, k, l, len, len1, pa, pb, r, ref, ref1;
    arr = [];
    r = this.round;
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      pa = this.persons[a];
      if (!pa.active || pa.id === iBye) {
        continue;
      }
      ref1 = range(a + 1, g.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        b = ref1[l];
        pb = this.persons[b];
        if (!pb.active || pb.id === iBye) {
          continue;
        }
        diff = abs(pa.elo - pb.elo);
        cost = 9999 - diff ** g.EXPONENT;
        if (g.ok(pa, pb)) {
          arr.push([pa.id, pb.id, cost]);
        }
      }
    }
    arr.sort(function(a, b) {
      return b[2] - a[2];
    });
    return arr;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  // assignColors : (p0,p1) ->
  // 	mand = p0.mandatory() + p1.mandatory()
  // 	temp = ''
  // 	if mand == '  ' then temp = "wb"
  // 	if mand == ' b' then temp = "wb"
  // 	if mand == ' w' then temp = "bw"
  // 	if mand == 'b ' then temp = "bw"
  // 	if mand == 'w ' then temp = "wb"
  // 	if mand == 'wb' then temp = "wb"
  // 	if mand == 'bw' then temp = "bw"
  // 	p0.col += temp[0]
  // 	p1.col += temp[1]
  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([i, j]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  solutionCost(pair) {
    var a, b, da, db, diff, pa, pb;
    [a, b] = pair;
    pa = this.persons[a];
    pb = this.persons[b];
    da = pa.elo;
    db = pb.elo;
    diff = Math.abs(da - db);
    return diff ** g.EXPONENT;
  }

  solutionCosts(pairs) {
    var pair;
    return g.sumNumbers((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = pairs.length; k < len; k++) {
        pair = pairs[k];
        results.push(this.solutionCost(pair));
      }
      return results;
    }).call(this));
  }

  preMatch() { // return id för spelaren som ska ha bye eller -1 om bye saknas
    var k, len, p, pBye, ref, temp;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (!p.active) {
        p.res += '0';
      }
    }
    temp = _.filter(this.persons, function(p) {
      return p.active;
    });
    if (temp.length % 2 === 1) { // Spelaren med lägst elo och som inte har haft frirond, får frironden
      temp = _.filter(this.persons, function(p) {
        return p.active && p.bye() === false;
      });
      pBye = _.last(temp);
      pBye.opp.push(g.BYE);
      pBye.col += '_';
      pBye.res += '2';
      return pBye.id;
    }
    return g.BYE;
  }

  postMatch() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, m, o, p, pa, pb, q, ref, ref1, ref2, ref3, ref4, results;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.active) {
        continue;
      }
      p.opp.push(g.PAUSE);
      p.col += '_';
    }
    ref1 = this.pairs;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      [a, b] = ref1[l];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        i = ref2[m];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = g.other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (o = 0, len3 = ref3.length; o < len3; o++) {
        i = ref3[o];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = q = 0, len4 = ref4.length; q < len4; i = ++q) {
      [a, b] = ref4[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  lotta() {
    var a, arr, b, edges, end, i, k, l, len, len1, n, p, ref, ref1, solution, start, timestamp;
    if (this.round > 0 && g.calcMissing() > 0) {
      print('lottning ej genomförd!');
      return;
    }
    // @dump 'lotta'
    this.virgin = false;
    timestamp = new Date().toLocaleString('se-SE').replaceAll(' ', '_');
    this.downloadFile(this.makeTournament(timestamp), `${timestamp}-${this.round} Tournament.txt`);
    this.personsSorted = _.clone(this.persons);
    this.personsSorted.sort((pa, pb) => {
      var da, db;
      da = pa.elo;
      db = pb.elo;
      return db - da;
    });
    ref = range(this.personsSorted.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.personsSorted[i].pos[this.round] = i;
    }
    print('sorted', this.personsSorted);
    print(`Lottning av rond ${this.round} =====================================================`);
    document.title = `Round ${this.round + 1}`;
    print('pos', (function() {
      var l, len1, ref1, results;
      ref1 = this.personsSorted;
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        results.push(p.id);
      }
      return results;
    }).call(this));
    start = new Date();
    arr = this.makeEdges(this.preMatch()); // -1 om bye saknas
    print('makeEdges', new Date() - start);
    start = new Date();
    edges = [];
    print('arr.length', arr.length);
    n = 1000;
    ref1 = range(n, arr.length + n, n);
    // n = 500000
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      end = ref1[l];
      start = new Date();
      edges = arr.slice(0, end);
      start = new Date();
      print('edges', edges);
      solution = this.findSolution(edges);
      print('cpu', end, new Date() - start);
      print('solution.length', solution.length, indexOf.call(solution, -1) < 0);
      print(solution);
      if (solution.length === g.N && indexOf.call(solution, -1) < 0) { // tag hänsyn till BYE och PAUSED senare
        print('solution', solution);
        break;
      }
    }
    if (!(solution.length === g.N && indexOf.call(solution, -1) < 0)) {
      return;
    }
    this.pairs = this.unscramble(solution);
    print(this.persons.length, this.paused.length, this.pairs.length);
    if (this.pairs.length < Math.floor((this.persons.length - this.paused.length) / 2)) {
      alert('Pairing impossible. Too many rounds or paused players');
      print('Pairing impossible');
      return;
    }
    if (this.round === 0) {
      print('pairs', this.pairs);
    }
    if (this.round > 0) {
      print('pairs', (function() {
        var len2, m, ref2, results;
        ref2 = this.pairs;
        results = [];
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          [a, b] = ref2[m];
          results.push([a, b, this.persons[a].elo, this.persons[b].elo, Math.abs(this.persons[a].elo - this.persons[b].elo).toFixed(1)]);
        }
        return results;
      }).call(this));
    }
    print('solutionCosts', this.solutionCosts(this.pairs));
    this.postMatch();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    print(this.makeMatrix(80)); // skriver till debug-fönstret, time outar inte.
    
    // @downloadFile @makeBubbles(), "#{timestamp}-#{@round} Bubbles.txt"
    this.downloadFile(this.makeStandardFile(), `${timestamp}-${this.round}.txt`);
    this.round += 1;
    return g.state = g.TABLES;
  }

  dump(title) {
    print(`##### ${title} #####`);
    print('TITLE', this.title);
    print('DATE', this.datum);
    print('ROUND', this.round);
    print('TPP', this.tpp);
    print('PPP', this.ppp);
    print('K', g.K);
    print('PAUSED', this.paused);
    print('FACTOR', g.FACTOR);
    // print 'PLAYERS'
    // for p in @persons
    // 	print '  ', p.id, p.elo, p.name, p.opp, p.col, p.res
    return print('################');
  }

  fetchData(data) {
    var XMAX, XMIN, a, arr, b, hash, helpText, i, id, k, key, keyword, l, len, len1, len2, len3, len4, line, m, nr, o, p, pa, pb, player, players, q, ref, ref1, ref2, ref3, ref4, value;
    print('fetchData', data);
    data = data.split('\n');
    hash = {};
    // default values
    hash.PLAYERS = [];
    hash.TITLE = '';
    hash.DATE = '';
    hash.ROUND = 0;
    hash.TPP = 30;
    hash.PPP = 60;
    hash.K = 20;
    hash.FACTOR = 2;
    hash.PAUSED = "";
    for (nr = k = 0, len = data.length; k < len; nr = ++k) {
      line = data[nr];
      if (line.length === 0) {
        continue;
      }
      arr = line.split('=');
      if (arr.length === 2) {
        if (!(arr[0] in KEYWORDS)) {
          helpText = ((function() {
            var results;
            results = [];
            for (key in KEYWORDS) {
              value = KEYWORDS[key];
              results.push(`    ${key}: ${value}`);
            }
            return results;
          })()).join('\n');
          keyword = `\"${arr[0]}\"`;
          alert(`${keyword} in line ${nr + 1} is not one of\n${helpText}`);
          return;
        }
        hash[arr[0]] = arr[1];
      } else {
        if (indexOf.call(line, '!') < 0) {
          alert(`${line}\n in line ${nr + 1}\n must look like\n2999!CARLSEN Magnus`);
          return;
        }
        hash.PLAYERS.push(line.split('!'));
      }
    }
    this.players = [];
    this.title = hash.TITLE;
    this.datum = hash.DATE;
    this.round = parseInt(hash.ROUND);
    this.tpp = parseInt(hash.TPP); // Tables Per Page
    this.ppp = parseInt(hash.PPP); // Players Per Page
    g.K = parseInt(hash.K); // 40, 20 or 10 normally
    g.FACTOR = parseFloat(hash.FACTOR);
    this.paused = hash.PAUSED; // list of zero based ids
    players = hash.PLAYERS;
    g.N = players.length;
    if (!((4 <= (ref = g.N) && ref < 1000))) {
      alert("Number of players must be between 4 and 999!");
      return;
    }
    this.persons = [];
    ref1 = range(g.N);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      player = new Player(i);
      player.read(players[i]);
      this.persons.push(player);
    }
    if (this.paused === "") {
      this.paused = [];
    } else {
      this.paused = this.paused.split('!');
      ref2 = this.paused;
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        id = ref2[m];
        if (id !== "") {
          this.persons[id].active = false;
        }
      }
    }
    print('fetchData.persons', this.persons);
    this.persons.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    ref3 = range(g.N);
    for (o = 0, len3 = ref3.length; o < len3; o++) {
      i = ref3[o];
      this.persons[i].id = i;
      this.persons[i].elo = parseInt(this.persons[i].elo);
    }
    if (g.FACTOR > 0) {
      if (g.FACTOR < 1.2) {
        g.FACTOR = 1.2;
      }
      XMAX = this.persons[0].elo;
      XMIN = _.last(this.persons).elo;
      g.OFFSET = (XMAX - XMIN) / (g.FACTOR - 1) - XMIN;
      g.OFFSET = Math.round(g.OFFSET);
      print('XMIN,XMAX,g.OFFSET', g.OFFSET, XMIN, XMAX);
    }
    print((function() {
      var len4, q, ref4, results;
      ref4 = this.persons;
      results = [];
      for (q = 0, len4 = ref4.length; q < len4; q++) {
        p = ref4[q];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    this.playersByName = _.sortBy(this.persons, function(player) {
      return player.name;
    });
    print('playersByName', (function() {
      var len4, q, ref4, results;
      ref4 = this.playersByName;
      results = [];
      for (q = 0, len4 = ref4.length; q < len4; q++) {
        p = ref4[q];
        results.push(p.name);
      }
      return results;
    }).call(this));
    // extract @pairs from the last round
    this.pairs = [];
    ref4 = this.persons;
    for (q = 0, len4 = ref4.length; q < len4; q++) {
      p = ref4[q];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = this.persons[a];
        pb = this.persons[b];
        this.pairs.push('w' === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    print('@pairs', this.pairs);
    this.dump('fetch');
    this.virgin = true;
    g.pages = [new Tables(), new Names(), new Standings(), new Active()];
    g.pages[g.ACTIVE].setLista();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    return g.state = g.ACTIVE;
  }

  makePaused() {
    return this.paused.join(SEPARATOR); // (12!34)
  }

  makePlayers() {
    var p, players;
    players = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.write());
      }
      return results;
    }).call(this);
    return players.join("\n");
  }

  makeTournament(timestamp) {
    var res;
    res = [];
    res.push("FACTOR=" + g.FACTOR);
    res.push("ROUND=" + this.round);
    res.push("TITLE=" + this.title);
    res.push("DATE=" + this.datum);
    res.push("TIMESTAMP=" + timestamp);
    res.push("K=" + g.K);
    res.push("TPP=" + this.tpp);
    res.push("PPP=" + this.ppp);
    res.push("PAUSED=" + this.makePaused());
    res.push(this.makePlayers());
    return res.join('\n');
  }

  makeStandardFile() {
    var header_after, header_in, res, timestamp;
    res = [];
    timestamp = new Date().toLocaleString('se-SE');
    header_after = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header_in = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round < 999) {
      g.pages[g.STANDINGS].make(res, header_after);
    }
    if (this.round >= 0) {
      g.pages[g.NAMES].make(res, header_in, this.playersByName);
    }
    if (this.round < 999) {
      g.pages[g.TABLES].make(res, header_in);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    if (rounds.length === 0) {
      return "0";
    }
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (a < 0 || b < 0) {
          continue;
        }
        pa = this.persons[a];
        pb = this.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo - pb.elo));
        }
      }
    }
    return (g.sum(result) / result.length).toFixed(2);
  }

  makeCanvas(n) {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(n);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(n);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas, n) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) EXPONENT:${g.EXPONENT} COLORS:${g.COLORS} K:${g.K}`);
    output.push("");
    header = ((function() {
      var k, len, ref, results;
      ref = range(n);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds, n) {
    var a, b, canvas, i, inside, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas(n);
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        inside = (0 <= a && a < n) && (0 <= b && b < n);
        if (!inside) {
          continue;
        }
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = g.ALFABET[i];
          canvas[b][a] = g.ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas, n);
  }

  makeMatrix(n) {
    var matrix, p, r;
    if (n > g.N) {
      n = g.N;
    }
    matrix = (function() {
      var k, len, ref, results;
      ref = range(this.round);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        r = ref[k];
        results.push((function() {
          var l, len1, ref1, results1;
          ref1 = this.persons;
          results1 = [];
          for (l = 0, len1 = ref1.length; l < len1; l++) {
            p = ref1[l];
            results1.push([p.id, p.opp[r]]);
          }
          return results1;
        }).call(this));
      }
      return results;
    }).call(this);
    return this.drawMatrix(this.title, matrix, n);
  }

  makeBubbles() {
    var k, l, len, len1, pa, pb, r, ref, ref1, res;
    res = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      pa = ref[k];
      ref1 = range(this.round);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        if (pa.opp[r] >= 0) {
          pb = this.persons[pa.opp[r]];
          res.push(`${pa.elo}\t${pb.elo}`);
        }
      }
    }
    return res.join('\n');
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG91cm5hbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLlxcIiwic291cmNlcyI6WyJjb2ZmZWVcXHRvdXJuYW1lbnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLFFBQUE7RUFBQTs7QUFBQSxPQUFBO0VBQVMsQ0FBVDtFQUFZLEtBQVo7RUFBbUIsS0FBbkI7RUFBMEIsTUFBMUI7RUFBa0MsTUFBbEM7RUFBMEMsTUFBMUM7RUFBa0QsU0FBbEQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxTQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsTUFBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE9BQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxNQUFUO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsS0FBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLFNBQVQ7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxNQUFUO0NBQUEsTUFBQTs7QUFFQSxRQUFBLEdBQVcsQ0FBQTs7QUFDWCxRQUFRLENBQUMsS0FBVCxHQUFpQjs7QUFDakIsUUFBUSxDQUFDLElBQVQsR0FBZ0I7O0FBQ2hCLFFBQVEsQ0FBQyxLQUFULEdBQWlCOztBQUNqQixRQUFRLENBQUMsTUFBVCxHQUFrQjs7QUFDbEIsUUFBUSxDQUFDLEdBQVQsR0FBZTs7QUFDZixRQUFRLENBQUMsR0FBVCxHQUFlOztBQUNmLFFBQVEsQ0FBQyxDQUFULEdBQWE7O0FBQ2IsUUFBUSxDQUFDLE1BQVQsR0FBa0IsMkNBakJsQjs7O0FBb0JBLE9BQUEsSUFBYSxhQUFOLE1BQUEsV0FBQTtFQUNOLFdBQWMsQ0FBQSxDQUFBO0lBQ2IsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUNULElBQUMsQ0FBQSxLQUFELEdBQVM7SUFDVCxJQUFDLENBQUEsR0FBRCxHQUFPO0lBQ1AsSUFBQyxDQUFBLEdBQUQsR0FBTyxHQUhUOztJQU1FLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFDWCxJQUFDLENB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QUFELENBQU4sSUFBYSxDQUFoQjtVQUNDLEVBQUEsR0FBSyxJQUFDLENBQUEsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFQO1VBQ2IsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFBLENBQUEsQ0FBRyxFQUFFLENBQUMsR0FBTixDQUFBLEVBQUEsQ0FBQSxDQUFjLEVBQUUsQ0FBQyxHQUFqQixDQUFBLENBQVQsRUFGRDs7TUFERDtJQUREO1dBS0EsR0FBRyxDQUFDLElBQUosQ0FBUyxJQUFUO0VBUGE7O0FBN2JSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZywgcmFuZ2UsIHByaW50LCBzY2FsZXgsIHNjYWxleSwgYXNzZXJ0LCBTRVBBUkFUT1IgfSBmcm9tICcuL2dsb2JhbHMuanMnIFxyXG5pbXBvcnQgeyBwYXJzZUV4cHIgfSBmcm9tICcuL3BhcnNlci5qcydcclxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnLi9wbGF5ZXIuanMnXHJcbmltcG9ydCB7IEVkbW9uZHMgfSBmcm9tICcuL2Jsb3Nzb20uanMnIFxyXG5pbXBvcnQgeyBUYWJsZXMgfSBmcm9tICcuL3BhZ2VfdGFibGVzLmpzJyBcclxuaW1wb3J0IHsgTmFtZXMgfSBmcm9tICcuL3BhZ2VfbmFtZXMuanMnIFxyXG5pbXBvcnQgeyBTdGFuZGluZ3MgfSBmcm9tICcuL3BhZ2Vfc3RhbmRpbmdzLmpzJyBcclxuaW1wb3J0IHsgQWN0aXZlIH0gZnJvbSAnLi9wYWdlX2FjdGl2ZS5qcycgXHJcblxyXG5LRVlXT1JEUyA9IHt9XHJcbktFWVdPUkRTLlRJVExFID0gJ3RleHQnXHJcbktFWVdPUkRTLkRBVEUgPSAndGV4dCdcclxuS0VZV09SRFMuUk9VTkQgPSAnaW50ZWdlcidcclxuS0VZV09SRFMuUEFVU0VEID0gJyEtc2VwYXJhdGVkIGludGVnZXJzJ1xyXG5LRVlXT1JEUy5UUFAgPSAnaW50ZWdlciAoVGFibGVzIFBlciBQYWdlLCBkZWZhdWx0OiAzMCknXHJcbktFWVdPUkRTLlBQUCA9ICdpbnRlZ2VyIChQbGF5ZXJzIFBlciBQYWdlLCBkZWZhdWx0OiA2MCknXHJcbktFWVdPUkRTLksgPSAnaW50ZWdlciAoZGVmYXVsdDogMjApJ1xyXG5LRVlXT1JEUy5GQUNUT1IgPSAnZmxvYXQsIDAgb3IgbGFyZ2VyIHRoYW4gMS4yIChkZWZhdWx0OiAyKSdcclxuIyBLRVlXT1JEUy5USU1FU1RBTVAgPSAndGV4dCdcclxuXHJcbmV4cG9ydCBjbGFzcyBUb3VybmFtZW50IFxyXG5cdGNvbnN0cnVjdG9yIDogLT5cclxuXHRcdEB0aXRsZSA9ICcnXHJcblx0XHRAcm91bmQgPSAwXHJcblx0XHRAdHBwID0gMzBcclxuXHRcdEBwcHAgPSA2MFxyXG5cclxuXHRcdCMgZGVzc2EgdHJlIGxpc3RvciBwZWthciBww6Ugc2FtbWEgb2JqZWt0XHJcblx0XHRAcGxheWVycyA9IFtdXHJcblx0XHRAcGVyc29ucyA9IFtdICMgc3RhYmlsLCBzb3J0ZXJhZCBww6UgaWQgb2NoIGVsb1xyXG5cdFx0QHBhaXJzID0gW10gIyB2YXJpZXJhciBtZWQgdmFyamUgcm9uZFxyXG5cclxuXHRcdEByb2JpbiA9IHJhbmdlIGcuTlxyXG5cdFx0QG1hdCA9IFtdXHJcblx0XHRAdmlyZ2luID0gdHJ1ZVxyXG5cclxuXHR3cml0ZSA6IC0+XHJcblxyXG5cdG1ha2VFZGdlcyA6IChpQnllKSAtPiAjIGlCeWUgw6RyIGV0dCBpZCBlbGxlciAtMVxyXG5cdFx0YXJyID0gW11cclxuXHRcdHIgPSBAcm91bmRcclxuXHRcdGZvciBhIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRwYSA9IEBwZXJzb25zW2FdXHJcblx0XHRcdGlmIG5vdCBwYS5hY3RpdmUgb3IgcGEuaWQgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdGZvciBiIGluIHJhbmdlIGErMSwgZy5OXHJcblx0XHRcdFx0cGIgPSBAcGVyc29uc1tiXVxyXG5cdFx0XHRcdGlmIG5vdCBwYi5hY3RpdmUgb3IgcGIuaWQgPT0gaUJ5ZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0ZGlmZiA9IGFicyBwYS5lbG8gLSBwYi5lbG9cclxuXHRcdFx0XHRjb3N0ID0gOTk5OSAtIGRpZmYgKiogZy5FWFBPTkVOVFxyXG5cdFx0XHRcdGlmIGcub2sgcGEscGIgdGhlbiBhcnIucHVzaCBbcGEuaWQsIHBiLmlkLCBjb3N0XVxyXG5cdFx0YXJyLnNvcnQgKGEsYikgLT4gYlsyXSAtIGFbMl0gIyBjb3N0XHJcblx0XHRhcnJcclxuXHRcclxuXHRmaW5kU29sdXRpb24gOiAoZWRnZXMpIC0+IFxyXG5cdFx0ZWRtb25kcyA9IG5ldyBFZG1vbmRzIGVkZ2VzXHJcblx0XHRlZG1vbmRzLm1heFdlaWdodE1hdGNoaW5nIGVkZ2VzXHJcblxyXG5cdGFzc2lnbkNvbG9ycyA6IChwMCxwMSkgLT5cclxuXHRcdGIwID0gcDAuYmFsYW5zKClcclxuXHRcdGIxID0gcDEuYmFsYW5zKClcclxuXHRcdGlmIGIwIDwgYjEgdGhlbiB4ID0gMFxyXG5cdFx0ZWxzZSBpZiBiMCA+IGIxIHRoZW4geCA9IDFcclxuXHRcdGVsc2UgaWYgcDAuaWQgPCBwMS5pZCB0aGVuIHggPSAwIGVsc2UgeCA9IDFcclxuXHRcdHAwLmNvbCArPSAnd2InW3hdXHJcblx0XHRwMS5jb2wgKz0gJ2J3J1t4XVxyXG5cclxuXHQjIGFzc2lnbkNvbG9ycyA6IChwMCxwMSkgLT5cclxuXHQjIFx0bWFuZCA9IHAwLm1hbmRhdG9yeSgpICsgcDEubWFuZGF0b3J5KClcclxuXHQjIFx0dGVtcCA9ICcnXHJcblx0IyBcdGlmIG1hbmQgPT0gJyAgJyB0aGVuIHRlbXAgPSBcIndiXCJcclxuXHQjIFx0aWYgbWFuZCA9PSAnIGInIHRoZW4gdGVtcCA9IFwid2JcIlxyXG5cdCMgXHRpZiBtYW5kID09ICcgdycgdGhlbiB0ZW1wID0gXCJid1wiXHJcblx0IyBcdGlmIG1hbmQgPT0gJ2IgJyB0aGVuIHRlbXAgPSBcImJ3XCJcclxuXHQjIFx0aWYgbWFuZCA9PSAndyAnIHRoZW4gdGVtcCA9IFwid2JcIlxyXG5cdCMgXHRpZiBtYW5kID09ICd3YicgdGhlbiB0ZW1wID0gXCJ3YlwiXHJcblx0IyBcdGlmIG1hbmQgPT0gJ2J3JyB0aGVuIHRlbXAgPSBcImJ3XCJcclxuXHQjIFx0cDAuY29sICs9IHRlbXBbMF1cclxuXHQjIFx0cDEuY29sICs9IHRlbXBbMV1cclxuXHJcblx0dW5zY3JhbWJsZSA6IChzb2x1dGlvbikgLT4gIyBbNSwzLDQsMSwyLDBdID0+IFtbMCw1XSxbMSwzXSxbMiw0XV1cclxuXHRcdHNvbHV0aW9uID0gXy5jbG9uZSBzb2x1dGlvblxyXG5cdFx0cmVzdWx0ID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIHNvbHV0aW9uLmxlbmd0aFxyXG5cdFx0XHRpZiBzb2x1dGlvbltpXSAhPSAtMVxyXG5cdFx0XHRcdGogPSBzb2x1dGlvbltpXVxyXG5cdFx0XHRcdHJlc3VsdC5wdXNoIFtpLGpdXHJcblx0XHRcdFx0c29sdXRpb25bal0gPSAtMVxyXG5cdFx0XHRcdHNvbHV0aW9uW2ldID0gLTFcclxuXHRcdHJlc3VsdFxyXG5cclxuXHRzb2x1dGlvbkNvc3QgOiAocGFpcikgLT5cclxuXHRcdFthLGJdID0gcGFpclxyXG5cdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0cGIgPSBAcGVyc29uc1tiXVxyXG5cdFx0ZGEgPSBwYS5lbG9cclxuXHRcdGRiID0gcGIuZWxvXHJcblx0XHRkaWZmID0gTWF0aC5hYnMgZGEgLSBkYlxyXG5cdFx0ZGlmZiAqKiBnLkVYUE9ORU5UXHJcblx0XHJcblx0c29sdXRpb25Db3N0cyA6IChwYWlycykgLT4gZy5zdW1OdW1iZXJzIChAc29sdXRpb25Db3N0KHBhaXIpIGZvciBwYWlyIGluIHBhaXJzKVxyXG5cclxuXHRwcmVNYXRjaCA6IC0+ICMgcmV0dXJuIGlkIGbDtnIgc3BlbGFyZW4gc29tIHNrYSBoYSBieWUgZWxsZXIgLTEgb20gYnllIHNha25hc1xyXG5cclxuXHRcdGZvciBwIGluIEBwZXJzb25zXHJcblx0XHRcdGlmIG5vdCBwLmFjdGl2ZSB0aGVuIHAucmVzICs9ICcwJ1xyXG5cclxuXHRcdHRlbXAgPSBfLmZpbHRlciBAcGVyc29ucywgKHApIC0+IHAuYWN0aXZlIFxyXG5cdFx0aWYgdGVtcC5sZW5ndGggJSAyID09IDEgIyBTcGVsYXJlbiBtZWQgbMOkZ3N0IGVsbyBvY2ggc29tIGludGUgaGFyIGhhZnQgZnJpcm9uZCwgZsOlciBmcmlyb25kZW5cclxuXHRcdFx0dGVtcCA9IF8uZmlsdGVyIEBwZXJzb25zLCAocCkgLT4gcC5hY3RpdmUgYW5kIHAuYnllKCkgPT0gZmFsc2VcclxuXHRcdFx0cEJ5ZSA9IF8ubGFzdCB0ZW1wXHJcblx0XHRcdHBCeWUub3BwLnB1c2ggZy5CWUVcclxuXHRcdFx0cEJ5ZS5jb2wgKz0gJ18nXHJcblx0XHRcdHBCeWUucmVzICs9ICcyJ1xyXG5cdFx0XHRyZXR1cm4gcEJ5ZS5pZFxyXG5cdFx0Zy5CWUVcclxuXHJcblx0cG9zdE1hdGNoIDogLT5cclxuXHRcdGZvciBwIGluIEBwZXJzb25zXHJcblx0XHRcdGlmIHAuYWN0aXZlIHRoZW4gY29udGludWVcclxuXHRcdFx0cC5vcHAucHVzaCBnLlBBVVNFXHJcblx0XHRcdHAuY29sICs9ICdfJ1xyXG5cclxuXHRcdGZvciBbYSxiXSBpbiBAcGFpcnNcclxuXHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdHBhLm9wcC5wdXNoIHBiLmlkXHJcblx0XHRcdHBiLm9wcC5wdXNoIHBhLmlkXHJcblxyXG5cdFx0aWYgQHJvdW5kID09IDBcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFthLGJdID0gQHBhaXJzW2ldXHJcblx0XHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRcdHBiID0gQHBlcnNvbnNbYl1cclxuXHRcdFx0XHRjb2wxID0gXCJid1wiW2klMl1cclxuXHRcdFx0XHRjb2wwID0gZy5vdGhlciBjb2wxXHJcblx0XHRcdFx0cGEuY29sICs9IGNvbDBcclxuXHRcdFx0XHRwYi5jb2wgKz0gY29sMVxyXG5cdFx0XHRcdGlmIGklMj09MSB0aGVuIEBwYWlyc1tpXS5yZXZlcnNlKClcclxuXHRcdGVsc2VcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFthLGJdID0gQHBhaXJzW2ldXHJcblx0XHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRcdHBiID0gQHBlcnNvbnNbYl1cclxuXHRcdFx0XHRAYXNzaWduQ29sb3JzIHBhLHBiXHJcblx0XHRcdFx0aWYgcGEuY29sW0Byb3VuZF09PSdiJyB0aGVuIEBwYWlyc1tpXS5yZXZlcnNlKClcclxuXHJcblx0XHRmb3IgW2EsYl0saSBpbiBAcGFpcnNcclxuXHRcdFx0cGEgPSBAcGVyc29uc1thXVxyXG5cdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdHBhLmNoYWlyID0gMippXHJcblx0XHRcdHBiLmNoYWlyID0gMippICsgMVxyXG5cclxuXHRkb3dubG9hZEZpbGUgOiAodHh0LGZpbGVuYW1lKSAtPlxyXG5cdFx0YmxvYiA9IG5ldyBCbG9iIFt0eHRdLCB7IHR5cGU6ICd0ZXh0L3BsYWluJyB9XHJcblx0XHR1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMIGJsb2JcclxuXHRcdGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICdhJ1xyXG5cdFx0YS5ocmVmID0gdXJsXHJcblx0XHRhLmRvd25sb2FkID0gZmlsZW5hbWVcclxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgYVxyXG5cdFx0YS5jbGljaygpXHJcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkIGFcclxuXHRcdFVSTC5yZXZva2VPYmplY3RVUkwgdXJsXHJcblxyXG5cdGxvdHRhIDogLT5cclxuXHJcblx0XHRpZiBAcm91bmQgPiAwIGFuZCBnLmNhbGNNaXNzaW5nKCkgPiAwXHJcblx0XHRcdHByaW50ICdsb3R0bmluZyBlaiBnZW5vbWbDtnJkISdcclxuXHRcdFx0cmV0dXJuXHJcblxyXG5cdFx0IyBAZHVtcCAnbG90dGEnXHJcblxyXG5cdFx0QHZpcmdpbiA9IGZhbHNlXHJcblx0XHR0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdzZS1TRScpLnJlcGxhY2VBbGwgJyAnLCdfJ1xyXG5cdFx0QGRvd25sb2FkRmlsZSBAbWFrZVRvdXJuYW1lbnQodGltZXN0YW1wKSwgXCIje3RpbWVzdGFtcH0tI3tAcm91bmR9IFRvdXJuYW1lbnQudHh0XCJcclxuXHJcblx0XHRAcGVyc29uc1NvcnRlZCA9IF8uY2xvbmUgQHBlcnNvbnNcclxuXHRcdEBwZXJzb25zU29ydGVkLnNvcnQgKHBhLHBiKSA9PiBcclxuXHRcdFx0ZGEgPSBwYS5lbG9cclxuXHRcdFx0ZGIgPSBwYi5lbG9cclxuXHRcdFx0ZGIgLSBkYVxyXG5cclxuXHRcdGZvciBpIGluIHJhbmdlIEBwZXJzb25zU29ydGVkLmxlbmd0aFxyXG5cdFx0XHRAcGVyc29uc1NvcnRlZFtpXS5wb3NbQHJvdW5kXSA9IGlcclxuXHJcblx0XHRwcmludCAnc29ydGVkJyxAcGVyc29uc1NvcnRlZFxyXG5cclxuXHRcdHByaW50IFwiTG90dG5pbmcgYXYgcm9uZCAje0Byb3VuZH0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIlxyXG5cdFx0ZG9jdW1lbnQudGl0bGUgPSBcIlJvdW5kICN7QHJvdW5kKzF9XCJcclxuXHJcblx0XHRwcmludCAncG9zJywocC5pZCBmb3IgcCBpbiBAcGVyc29uc1NvcnRlZClcclxuXHJcblx0XHRzdGFydCA9IG5ldyBEYXRlKClcdFx0XHJcblx0XHRhcnIgPSBAbWFrZUVkZ2VzIEBwcmVNYXRjaCgpICMgLTEgb20gYnllIHNha25hc1xyXG5cdFx0cHJpbnQgJ21ha2VFZGdlcycsIChuZXcgRGF0ZSgpIC0gc3RhcnQpXHJcblxyXG5cdFx0c3RhcnQgPSBuZXcgRGF0ZSgpXHRcdFxyXG5cdFx0ZWRnZXMgPSBbXVxyXG5cdFx0cHJpbnQgJ2Fyci5sZW5ndGgnLGFyci5sZW5ndGhcclxuXHRcdG4gPSAxMDAwXHJcblx0XHQjIG4gPSA1MDAwMDBcclxuXHJcblx0XHRmb3IgZW5kIGluIHJhbmdlIG4sIGFyci5sZW5ndGgrbiwgblxyXG5cdFx0XHRzdGFydCA9IG5ldyBEYXRlKClcdFx0XHJcblx0XHRcdGVkZ2VzID0gYXJyLnNsaWNlIDAsZW5kXHJcblxyXG5cdFx0XHRzdGFydCA9IG5ldyBEYXRlKClcdFx0XHJcblxyXG5cdFx0XHRwcmludCAnZWRnZXMnLGVkZ2VzXHJcblxyXG5cdFx0XHRzb2x1dGlvbiA9IEBmaW5kU29sdXRpb24gZWRnZXNcclxuXHRcdFx0cHJpbnQgJ2NwdScsZW5kLCAobmV3IERhdGUoKSAtIHN0YXJ0KVxyXG5cclxuXHRcdFx0cHJpbnQgJ3NvbHV0aW9uLmxlbmd0aCcsc29sdXRpb24ubGVuZ3RoLCAtMSBub3QgaW4gc29sdXRpb25cclxuXHRcdFx0cHJpbnQgc29sdXRpb25cclxuXHRcdFx0aWYgc29sdXRpb24ubGVuZ3RoID09IGcuTiBhbmQgLTEgbm90IGluIHNvbHV0aW9uICAjIHRhZyBow6Ruc3luIHRpbGwgQllFIG9jaCBQQVVTRUQgc2VuYXJlXHJcblx0XHRcdFx0cHJpbnQgJ3NvbHV0aW9uJyxzb2x1dGlvblxyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRpZiBub3QgKHNvbHV0aW9uLmxlbmd0aCA9PSBnLk4gYW5kIC0xIG5vdCBpbiBzb2x1dGlvbikgdGhlbiByZXR1cm5cclxuXHJcblx0XHRAcGFpcnMgPSBAdW5zY3JhbWJsZSBzb2x1dGlvblxyXG5cclxuXHRcdHByaW50IEBwZXJzb25zLmxlbmd0aCxAcGF1c2VkLmxlbmd0aCxAcGFpcnMubGVuZ3RoXHJcblx0XHRpZiBAcGFpcnMubGVuZ3RoIDwgKEBwZXJzb25zLmxlbmd0aCAtIEBwYXVzZWQubGVuZ3RoKSAvLyAyIFxyXG5cdFx0XHRhbGVydCAnUGFpcmluZyBpbXBvc3NpYmxlLiBUb28gbWFueSByb3VuZHMgb3IgcGF1c2VkIHBsYXllcnMnXHJcblx0XHRcdHByaW50ICdQYWlyaW5nIGltcG9zc2libGUnXHJcblx0XHRcdHJldHVybiBcclxuXHJcblx0XHRpZiBAcm91bmQgPT0gMCB0aGVuIHByaW50ICdwYWlycycsIEBwYWlyc1xyXG5cdFx0aWYgQHJvdW5kID4gMCAgdGhlbiBwcmludCAncGFpcnMnLCAoW2EsIGIsIEBwZXJzb25zW2FdLmVsbywgQHBlcnNvbnNbYl0uZWxvLCBNYXRoLmFicyhAcGVyc29uc1thXS5lbG8gLSBAcGVyc29uc1tiXS5lbG8pLnRvRml4ZWQoMSldIGZvciBbYSxiXSBpbiBAcGFpcnMpXHJcblx0XHRwcmludCAnc29sdXRpb25Db3N0cycsIEBzb2x1dGlvbkNvc3RzIEBwYWlyc1xyXG5cclxuXHRcdEBwb3N0TWF0Y2goKVxyXG5cclxuXHRcdGcucGFnZXNbZy5OQU1FU10uc2V0TGlzdGEoKVxyXG5cdFx0Zy5wYWdlc1tnLlRBQkxFU10uc2V0TGlzdGEoKVxyXG5cdFx0Zy5wYWdlc1tnLlNUQU5ESU5HU10uc2V0TGlzdGEoKVxyXG5cclxuXHRcdHByaW50IEBtYWtlTWF0cml4IDgwICMgc2tyaXZlciB0aWxsIGRlYnVnLWbDtm5zdHJldCwgdGltZSBvdXRhciBpbnRlLlxyXG5cclxuXHRcdCMgQGRvd25sb2FkRmlsZSBAbWFrZUJ1YmJsZXMoKSwgXCIje3RpbWVzdGFtcH0tI3tAcm91bmR9IEJ1YmJsZXMudHh0XCJcclxuXHRcdEBkb3dubG9hZEZpbGUgQG1ha2VTdGFuZGFyZEZpbGUoKSwgXCIje3RpbWVzdGFtcH0tI3tAcm91bmR9LnR4dFwiXHJcblxyXG5cdFx0QHJvdW5kICs9IDFcclxuXHJcblx0XHRnLnN0YXRlID0gZy5UQUJMRVNcclxuXHJcblx0ZHVtcCA6ICh0aXRsZSkgLT5cclxuXHRcdHByaW50IFwiIyMjIyMgI3t0aXRsZX0gIyMjIyNcIlxyXG5cdFx0cHJpbnQgJ1RJVExFJyxAdGl0bGVcclxuXHRcdHByaW50ICdEQVRFJyxAZGF0dW1cclxuXHRcdHByaW50ICdST1VORCcsQHJvdW5kXHJcblx0XHRwcmludCAnVFBQJyxAdHBwXHJcblx0XHRwcmludCAnUFBQJyxAcHBwXHJcblx0XHRwcmludCAnSycsZy5LXHJcblx0XHRwcmludCAnUEFVU0VEJyxAcGF1c2VkXHJcblx0XHRwcmludCAnRkFDVE9SJyxnLkZBQ1RPUlxyXG5cdFx0IyBwcmludCAnUExBWUVSUydcclxuXHRcdCMgZm9yIHAgaW4gQHBlcnNvbnNcclxuXHRcdCMgXHRwcmludCAnICAnLCBwLmlkLCBwLmVsbywgcC5uYW1lLCBwLm9wcCwgcC5jb2wsIHAucmVzXHJcblxyXG5cdFx0cHJpbnQgJyMjIyMjIyMjIyMjIyMjIyMnXHJcblxyXG5cdGZldGNoRGF0YSA6IChkYXRhKSAtPlxyXG5cdFx0cHJpbnQgJ2ZldGNoRGF0YScsZGF0YVxyXG5cclxuXHRcdGRhdGEgPSBkYXRhLnNwbGl0ICdcXG4nXHJcblxyXG5cdFx0aGFzaCA9IHt9XHJcblxyXG5cdFx0IyBkZWZhdWx0IHZhbHVlc1xyXG5cdFx0aGFzaC5QTEFZRVJTID0gW11cclxuXHRcdGhhc2guVElUTEUgPSAnJ1xyXG5cdFx0aGFzaC5EQVRFID0gJydcclxuXHRcdGhhc2guUk9VTkQgPSAwXHJcblx0XHRoYXNoLlRQUCA9IDMwXHJcblx0XHRoYXNoLlBQUCA9IDYwXHJcblx0XHRoYXNoLksgPSAyMFxyXG5cdFx0aGFzaC5GQUNUT1IgPSAyXHJcblx0XHRoYXNoLlBBVVNFRCA9IFwiXCJcclxuXHJcblx0XHRmb3IgbGluZSxuciBpbiBkYXRhXHRcclxuXHRcdFx0aWYgbGluZS5sZW5ndGggPT0gMCB0aGVuIGNvbnRpbnVlXHRcdFxyXG5cdFx0XHRhcnIgPSBsaW5lLnNwbGl0ICc9J1x0XHRcdFxyXG5cdFx0XHRpZiBhcnIubGVuZ3RoID09IDIgXHJcblx0XHRcdFx0aWYgYXJyWzBdIG5vdCBvZiBLRVlXT1JEUyBcclxuXHRcdFx0XHRcdGhlbHBUZXh0ID0gKFwiICAgICN7a2V5fTogI3t2YWx1ZX1cIiBmb3Iga2V5LHZhbHVlIG9mIEtFWVdPUkRTKS5qb2luICdcXG4nXHJcblx0XHRcdFx0XHRrZXl3b3JkID0gXCJcXFwiI3thcnJbMF19XFxcIlwiXHJcblx0XHRcdFx0XHRhbGVydCBcIiN7a2V5d29yZH0gaW4gbGluZSAje25yKzF9IGlzIG5vdCBvbmUgb2ZcXG4je2hlbHBUZXh0fVwiXHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHRoYXNoW2FyclswXV0gPSBhcnJbMV1cclxuXHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRpZiAnIScgbm90IGluIGxpbmVcclxuXHRcdFx0XHRcdGFsZXJ0IFwiI3tsaW5lfVxcbiBpbiBsaW5lICN7bnIrMX1cXG4gbXVzdCBsb29rIGxpa2VcXG4yOTk5IUNBUkxTRU4gTWFnbnVzXCJcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdGhhc2guUExBWUVSUy5wdXNoIGxpbmUuc3BsaXQgJyEnXHJcblx0XHRcdFxyXG5cdFx0QHBsYXllcnMgPSBbXVxyXG5cdFx0QHRpdGxlID0gaGFzaC5USVRMRVxyXG5cdFx0QGRhdHVtID0gaGFzaC5EQVRFXHJcblx0XHRAcm91bmQgPSBwYXJzZUludCBoYXNoLlJPVU5EXHJcblx0XHRAdHBwID0gcGFyc2VJbnQgaGFzaC5UUFAgIyBUYWJsZXMgUGVyIFBhZ2VcclxuXHRcdEBwcHAgPSBwYXJzZUludCBoYXNoLlBQUCAjIFBsYXllcnMgUGVyIFBhZ2VcclxuXHRcdGcuSyAgPSBwYXJzZUludCBoYXNoLksgIyA0MCwgMjAgb3IgMTAgbm9ybWFsbHlcclxuXHRcdGcuRkFDVE9SID0gcGFyc2VGbG9hdCBoYXNoLkZBQ1RPUlxyXG5cdFx0QHBhdXNlZCA9IGhhc2guUEFVU0VEICMgbGlzdCBvZiB6ZXJvIGJhc2VkIGlkc1xyXG5cclxuXHRcdHBsYXllcnMgPSBoYXNoLlBMQVlFUlNcclxuXHRcdGcuTiA9IHBsYXllcnMubGVuZ3RoXHJcblxyXG5cdFx0aWYgbm90ICg0IDw9IGcuTiA8IDEwMDApXHJcblx0XHRcdGFsZXJ0IFwiTnVtYmVyIG9mIHBsYXllcnMgbXVzdCBiZSBiZXR3ZWVuIDQgYW5kIDk5OSFcIlxyXG5cdFx0XHRyZXR1cm5cclxuXHJcblx0XHRAcGVyc29ucyA9IFtdXHJcblx0XHRmb3IgaSBpbiByYW5nZSBnLk5cclxuXHRcdFx0cGxheWVyID0gbmV3IFBsYXllciBpXHJcblx0XHRcdHBsYXllci5yZWFkIHBsYXllcnNbaV1cclxuXHRcdFx0QHBlcnNvbnMucHVzaCBwbGF5ZXJcclxuXHJcblx0XHRpZiBAcGF1c2VkID09IFwiXCJcclxuXHRcdFx0QHBhdXNlZCA9IFtdXHJcblx0XHRlbHNlXHJcblx0XHRcdEBwYXVzZWQgPSBAcGF1c2VkLnNwbGl0ICchJ1xyXG5cdFx0XHRmb3IgaWQgaW4gQHBhdXNlZFxyXG5cdFx0XHRcdGlmIGlkICE9IFwiXCIgdGhlbiBAcGVyc29uc1tpZF0uYWN0aXZlID0gZmFsc2VcclxuXHJcblx0XHRwcmludCAnZmV0Y2hEYXRhLnBlcnNvbnMnLCBAcGVyc29uc1xyXG5cdFx0XHJcblx0XHRAcGVyc29ucy5zb3J0IChhLGIpIC0+IFxyXG5cdFx0XHRpZiBhLmVsbyAhPSBiLmVsbyB0aGVuIHJldHVybiBiLmVsbyAtIGEuZWxvXHJcblx0XHRcdGlmIGEubmFtZSA+IGIubmFtZSB0aGVuIDEgZWxzZSAtMVxyXG5cclxuXHRcdGZvciBpIGluIHJhbmdlIGcuTlxyXG5cdFx0XHRAcGVyc29uc1tpXS5pZCA9IGlcclxuXHRcdFx0QHBlcnNvbnNbaV0uZWxvID0gcGFyc2VJbnQgQHBlcnNvbnNbaV0uZWxvXHJcblxyXG5cdFx0aWYgZy5GQUNUT1IgPiAwICBcclxuXHRcdFx0aWYgZy5GQUNUT1IgPCAxLjIgdGhlbiBnLkZBQ1RPUiA9IDEuMlxyXG5cdFx0XHRYTUFYID0gQHBlcnNvbnNbMF0uZWxvXHJcblx0XHRcdFhNSU4gPSBfLmxhc3QoQHBlcnNvbnMpLmVsb1xyXG5cdFx0XHRnLk9GRlNFVCA9IChYTUFYIC0gWE1JTikgLyAoZy5GQUNUT1IgLSAxKSAtIFhNSU5cclxuXHRcdFx0Zy5PRkZTRVQgPSBNYXRoLnJvdW5kIGcuT0ZGU0VUXHJcblx0XHRcdHByaW50ICdYTUlOLFhNQVgsZy5PRkZTRVQnLGcuT0ZGU0VULFhNSU4sWE1BWFxyXG5cclxuXHRcdHByaW50IChwLmVsbyBmb3IgcCBpbiBAcGVyc29ucylcclxuXHRcdHByaW50ICdzb3J0ZWQgcGxheWVycycsIEBwZXJzb25zICMgYnkgaWQgQU5EIGRlc2NlbmRpbmcgZWxvXHJcblxyXG5cdFx0QHBsYXllcnNCeU5hbWUgPSBfLnNvcnRCeSBAcGVyc29ucywgKHBsYXllcikgLT4gcGxheWVyLm5hbWVcclxuXHRcdHByaW50ICdwbGF5ZXJzQnlOYW1lJywgKHAubmFtZSBmb3IgcCBpbiBAcGxheWVyc0J5TmFtZSlcclxuXHJcblx0XHQjIGV4dHJhY3QgQHBhaXJzIGZyb20gdGhlIGxhc3Qgcm91bmRcclxuXHRcdEBwYWlycyA9IFtdXHJcblx0XHRmb3IgcCBpbiBAcGVyc29uc1xyXG5cdFx0XHRhID0gcC5pZFxyXG5cdFx0XHRiID0gXy5sYXN0IHAub3BwXHJcblx0XHRcdGlmIGEgPCBiIFxyXG5cdFx0XHRcdHBhID0gQHBlcnNvbnNbYV1cclxuXHRcdFx0XHRwYiA9IEBwZXJzb25zW2JdXHJcblx0XHRcdFx0QHBhaXJzLnB1c2ggaWYgJ3cnID09IF8ubGFzdCBwLmNvbFxyXG5cdFx0XHRcdFx0cGEuY2hhaXIgPSAyICogQHBhaXJzLmxlbmd0aFxyXG5cdFx0XHRcdFx0cGIuY2hhaXIgPSAyICogQHBhaXJzLmxlbmd0aCArIDFcclxuXHRcdFx0XHRcdFthLGJdXHJcblx0XHRcdFx0ZWxzZSBcclxuXHRcdFx0XHRcdHBhLmNoYWlyID0gMiAqIEBwYWlycy5sZW5ndGggKyAxXHJcblx0XHRcdFx0XHRwYi5jaGFpciA9IDIgKiBAcGFpcnMubGVuZ3RoXHJcblx0XHRcdFx0XHRbYixhXVxyXG5cclxuXHRcdHByaW50ICdAcGFpcnMnLEBwYWlyc1xyXG5cclxuXHRcdEBkdW1wICdmZXRjaCdcclxuXHRcdFxyXG5cdFx0QHZpcmdpbiA9IHRydWVcclxuXHJcblx0XHRnLnBhZ2VzID0gW25ldyBUYWJsZXMsIG5ldyBOYW1lcywgbmV3IFN0YW5kaW5ncywgbmV3IEFjdGl2ZV1cclxuXHJcblx0XHRnLnBhZ2VzW2cuQUNUSVZFXS5zZXRMaXN0YSgpXHJcblx0XHRnLnBhZ2VzW2cuTkFNRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5UQUJMRVNdLnNldExpc3RhKClcclxuXHRcdGcucGFnZXNbZy5TVEFORElOR1NdLnNldExpc3RhKClcclxuXHJcblx0XHRnLnN0YXRlID0gZy5BQ1RJVkVcclxuXHJcblx0bWFrZVBhdXNlZCA6IC0+IEBwYXVzZWQuam9pbiBTRVBBUkFUT1IgIyAoMTIhMzQpXHJcblxyXG5cdG1ha2VQbGF5ZXJzIDogLT5cclxuXHRcdHBsYXllcnMgPSAocC53cml0ZSgpIGZvciBwIGluIEBwZXJzb25zKVxyXG5cdFx0cGxheWVycy5qb2luIFwiXFxuXCJcclxuXHJcblx0bWFrZVRvdXJuYW1lbnQgOiAodGltZXN0YW1wKSAtPlxyXG5cdFx0cmVzID0gW11cclxuXHRcdHJlcy5wdXNoIFwiRkFDVE9SPVwiICsgZy5GQUNUT1JcclxuXHRcdHJlcy5wdXNoIFwiUk9VTkQ9XCIgKyBAcm91bmRcclxuXHRcdHJlcy5wdXNoIFwiVElUTEU9XCIgKyBAdGl0bGVcclxuXHRcdHJlcy5wdXNoIFwiREFURT1cIiArIEBkYXR1bVxyXG5cdFx0cmVzLnB1c2ggXCJUSU1FU1RBTVA9XCIgKyB0aW1lc3RhbXBcclxuXHRcdHJlcy5wdXNoIFwiSz1cIiArIGcuS1xyXG5cdFx0cmVzLnB1c2ggXCJUUFA9XCIgKyBAdHBwXHJcblx0XHRyZXMucHVzaCBcIlBQUD1cIiArIEBwcHBcclxuXHRcdHJlcy5wdXNoIFwiUEFVU0VEPVwiICsgQG1ha2VQYXVzZWQoKVxyXG5cdFx0cmVzLnB1c2ggQG1ha2VQbGF5ZXJzKClcclxuXHRcdHJlcy5qb2luICdcXG4nXHJcblxyXG5cdG1ha2VTdGFuZGFyZEZpbGUgOiAtPlxyXG5cdFx0cmVzID0gW11cclxuXHRcdHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcgJ3NlLVNFJ1xyXG5cdFx0aGVhZGVyX2FmdGVyID0gXCIgZm9yIFwiICsgQHRpdGxlICsgXCIgYWZ0ZXIgUm91bmQgI3tAcm91bmR9ICAgICN7dGltZXN0YW1wfVwiXHJcblx0XHRoZWFkZXJfaW4gICAgPSBcIiBmb3IgXCIgKyBAdGl0bGUgKyBcIiBpbiBSb3VuZCAje0Byb3VuZCsxfSAgICAje3RpbWVzdGFtcH1cIlxyXG5cclxuXHRcdGlmIEByb3VuZCA8IDk5OSB0aGVuIGcucGFnZXNbZy5TVEFORElOR1NdLm1ha2UgcmVzLCBoZWFkZXJfYWZ0ZXJcclxuXHRcdGlmIEByb3VuZCA+PSAwICB0aGVuIGcucGFnZXNbZy5OQU1FU10ubWFrZSAgICAgcmVzLCBoZWFkZXJfaW4sQHBsYXllcnNCeU5hbWVcclxuXHRcdGlmIEByb3VuZCA8IDk5OSB0aGVuIGcucGFnZXNbZy5UQUJMRVNdLm1ha2UgICAgcmVzLCBoZWFkZXJfaW5cclxuXHJcblx0XHRyZXMuam9pbiBcIlxcblwiXHRcclxuXHJcblx0ZGlzdGFucyA6IChyb3VuZHMpIC0+XHJcblx0XHRpZiByb3VuZHMubGVuZ3RoID09IDAgdGhlbiByZXR1cm4gXCIwXCJcclxuXHRcdHJlc3VsdCA9IFtdXHJcblx0XHRmb3IgaSBpbiByYW5nZShyb3VuZHMubGVuZ3RoKSBcclxuXHRcdFx0Zm9yIFthLGJdIGluIHJvdW5kc1tpXVxyXG5cdFx0XHRcdGlmIGEgPCAwIG9yIGIgPCAwIHRoZW4gY29udGludWVcclxuXHRcdFx0XHRwYSA9IEBwZXJzb25zW2FdXHJcblx0XHRcdFx0cGIgPSBAcGVyc29uc1tiXVxyXG5cdFx0XHRcdGlmIHBhLmFjdGl2ZSBhbmQgcGIuYWN0aXZlIFxyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2ggYWJzKHBhLmVsbyAtIHBiLmVsbykgXHJcblx0XHQoZy5zdW0ocmVzdWx0KS9yZXN1bHQubGVuZ3RoKS50b0ZpeGVkIDJcclxuXHJcblx0bWFrZUNhbnZhcyA6IChuKSAtPlxyXG5cdFx0cmVzdWx0ID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIG5cclxuXHRcdFx0bGluZSA9IG5ldyBBcnJheSBuXHJcblx0XHRcdF8uZmlsbCBsaW5lLCAnwrcnXHJcblx0XHRcdGxpbmVbaV0gPSAnKidcclxuXHRcdFx0cmVzdWx0LnB1c2ggbGluZVxyXG5cdFx0cmVzdWx0XHJcblxyXG5cdGR1bXBDYW52YXMgOiAodGl0bGUsYXZlcmFnZSxjYW52YXMsbikgLT5cclxuXHRcdG91dHB1dCA9IFtcIlwiLCB0aXRsZV1cclxuXHRcdG91dHB1dC5wdXNoIFwiU3BhcnNlbmVzczogI3thdmVyYWdlfSAgKEF2ZXJhZ2UgRWxvIERpZmZlcmVuY2UpIEVYUE9ORU5UOiN7Zy5FWFBPTkVOVH0gQ09MT1JTOiN7Zy5DT0xPUlN9IEs6I3tnLkt9XCJcclxuXHRcdG91dHB1dC5wdXNoIFwiXCJcclxuXHRcdGhlYWRlciA9IChzdHIoKGkgKyAxKSAlIDEwKSBmb3IgaSBpbiByYW5nZSBuKS5qb2luKCcgJylcclxuXHRcdG91dHB1dC5wdXNoICcgICAgICcgKyBoZWFkZXIgKyAnICAgRWxvICAgIEFFRCdcclxuXHRcdG9yZG5pbmcgPSAocC5lbG8gZm9yIHAgaW4gQHBlcnNvbnMpXHJcblx0XHRmb3IgaSBpbiByYW5nZSBjYW52YXMubGVuZ3RoXHJcblx0XHRcdHJvdyA9IGNhbnZhc1tpXVxyXG5cdFx0XHRuciA9IHN0cihpICsgMSkucGFkU3RhcnQoMylcclxuXHRcdFx0b3V0cHV0LnB1c2ggXCIje25yfSAgI3soc3RyKGl0ZW0pIGZvciBpdGVtIGluIHJvdykuam9pbihcIiBcIil9ICAje29yZG5pbmdbaV19ICN7QHBlcnNvbnNbaV0uYXZnRWxvRGlmZigpLnRvRml4ZWQoMSkucGFkU3RhcnQoNil9XCJcclxuXHRcdG91dHB1dC5wdXNoICcgICAgICcgKyBoZWFkZXJcclxuXHRcdG91dHB1dC5qb2luICdcXG4nXHJcblxyXG5cdGRyYXdNYXRyaXggOiAodGl0bGUscm91bmRzLG4pIC0+XHJcblx0XHRjYW52YXMgPSBAbWFrZUNhbnZhcyBuXHJcblx0XHRmb3IgaSBpbiByYW5nZSByb3VuZHMubGVuZ3RoXHJcblx0XHRcdGZvciBbYSxiXSBpbiByb3VuZHNbaV1cclxuXHRcdFx0XHRpbnNpZGUgPSAwIDw9IGEgPCBuIGFuZCAwIDw9IGIgPCBuXHJcblx0XHRcdFx0aWYgbm90IGluc2lkZSB0aGVuIGNvbnRpbnVlXHJcblx0XHRcdFx0aWYgQHBlcnNvbnNbYV0uYWN0aXZlIGFuZCBAcGVyc29uc1tiXS5hY3RpdmVcclxuXHRcdFx0XHRcdGNhbnZhc1thXVtiXSA9IGcuQUxGQUJFVFtpXVxyXG5cdFx0XHRcdFx0Y2FudmFzW2JdW2FdID0gZy5BTEZBQkVUW2ldXHJcblx0XHRAZHVtcENhbnZhcyB0aXRsZSxAZGlzdGFucyhyb3VuZHMpLGNhbnZhcyxuXHJcblxyXG5cdG1ha2VNYXRyaXggOiAobikgLT5cclxuXHRcdGlmIG4gPiBnLk4gdGhlbiBuID0gZy5OXHJcblx0XHRtYXRyaXggPSAoKFtwLmlkLHAub3BwW3JdXSBmb3IgcCBpbiBAcGVyc29ucykgZm9yIHIgaW4gcmFuZ2UgQHJvdW5kKVxyXG5cdFx0QGRyYXdNYXRyaXggQHRpdGxlLCBtYXRyaXgsIG5cclxuXHJcblx0bWFrZUJ1YmJsZXMgOiAtPlxyXG5cdFx0cmVzID0gW11cclxuXHRcdGZvciBwYSBpbiBAcGVyc29uc1xyXG5cdFx0XHRmb3IgciBpbiByYW5nZSBAcm91bmRcclxuXHRcdFx0XHRpZiBwYS5vcHBbcl0gPj0gMCBcclxuXHRcdFx0XHRcdHBiID0gQHBlcnNvbnNbcGEub3BwW3JdXVxyXG5cdFx0XHRcdFx0cmVzLnB1c2ggXCIje3BhLmVsb31cXHQje3BiLmVsb31cIlxyXG5cdFx0cmVzLmpvaW4gJ1xcbidcclxuIl19
//# sourceURL=c:\github\ELO-Pairings\coffee\tournament.coffee