// Generated by CoffeeScript 2.7.0
import {
  g,
  range,
  print,
  scalex,
  scaley,
  assert,
  wrap,
  SEPARATOR
} from './globals.js';

import {
  parseExpr
} from './parser.js';

import {
  Player
} from './player.js';

import {
  Edmonds
} from './blossom.js';

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

export var Tournament = class Tournament {
  constructor() {
    this.title = '';
    this.round = 0;
    this.tpp = 30;
    this.ppp = 60;
    // dessa tre listor pekar på samma objekt
    this.players = [];
    this.persons = []; // stabil, sorterad på id och elo
    this.pairs = []; // varierar med varje rond
    this.robin = range(g.N);
    this.mat = [];
    this.virgin = true;
  }

  write() {}

  makeEdges(iBye) { // iBye är ett id eller -1
    var a, b, cost, diff, edges, k, l, len, len1, pa, pb, r, ref, ref1;
    edges = [];
    r = this.round;
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      a = ref[k];
      pa = this.persons[a];
      if (!pa.active || pa.id === iBye) {
        continue;
      }
      ref1 = range(a + 1, g.N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        b = ref1[l];
        pb = this.persons[b];
        if (!pb.active || pb.id === iBye) {
          continue;
        }
        if (g.DIFF === 'ELO') {
          diff = abs(pa.elo - pb.elo);
        }
        if (g.DIFF === 'POS') {
          diff = abs(pa.pos[r] - pb.pos[r]);
        }
        cost = 9999 - diff ** g.EXPONENT;
        if (g.ok(pa, pb)) {
          edges.push([pa.id, pb.id, cost]);
        }
      }
    }
    return edges;
  }

  findSolution(edges) {
    var edmonds;
    edmonds = new Edmonds(edges);
    return edmonds.maxWeightMatching(edges);
  }

  assignColors(p0, p1) {
    var b0, b1, x;
    b0 = p0.balans();
    b1 = p1.balans();
    if (b0 < b1) {
      x = 0;
    } else if (b0 > b1) {
      x = 1;
    } else if (p0.id < p1.id) {
      x = 0;
    } else {
      x = 1;
    }
    p0.col += 'wb'[x];
    return p1.col += 'bw'[x];
  }

  unscramble(solution) { // [5,3,4,1,2,0] => [[0,5],[1,3],[2,4]]
    var i, j, k, len, ref, result;
    solution = _.clone(solution);
    result = [];
    ref = range(solution.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (solution[i] !== -1) {
        j = solution[i];
        result.push([i, j]);
        solution[j] = -1;
        solution[i] = -1;
      }
    }
    return result;
  }

  solutionCost(pair) {
    var a, b, da, db, diff, pa, pb, r;
    [a, b] = pair;
    pa = this.persons[a];
    pb = this.persons[b];
    if (g.DIFF === 'ELO') {
      r = this.round;
      da = pa.elo;
      db = pb.elo;
    }
    if (g.DIFF === 'POS') {
      da = pa.pos[r];
      db = pb.pos[r];
    }
    diff = Math.abs(da - db);
    return diff ** g.EXPONENT;
  }

  solutionCosts(pairs) {
    var pair;
    return g.sumNumbers((function() {
      var k, len, results;
      results = [];
      for (k = 0, len = pairs.length; k < len; k++) {
        pair = pairs[k];
        results.push(this.solutionCost(pair));
      }
      return results;
    }).call(this));
  }

  preMatch() { // return id för spelaren som ska ha bye eller -1 om bye saknas
    var k, len, p, pBye, ref, temp;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (!p.active) {
        p.res += '0';
      }
    }
    temp = _.filter(this.persons, function(p) {
      return p.active;
    });
    if (temp.length % 2 === 1) { // Spelaren med lägst elo och som inte har haft frirond, får frironden
      temp = _.filter(this.persons, function(p) {
        return p.active && p.bye() === false;
      });
      pBye = _.last(temp);
      pBye.opp.push(g.BYE);
      pBye.col += '_';
      pBye.res += '2';
      return pBye.id;
    }
    return g.BYE;
  }

  postMatch() {
    var a, b, col0, col1, i, k, l, len, len1, len2, len3, len4, m, n, o, p, pa, pb, ref, ref1, ref2, ref3, ref4, results;
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      if (p.active) {
        continue;
      }
      p.opp.push(g.PAUSE);
      p.col += '_';
    }
    ref1 = this.pairs;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      [a, b] = ref1[l];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.opp.push(pb.id);
      pb.opp.push(pa.id);
    }
    if (this.round === 0) {
      ref2 = range(this.pairs.length);
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        i = ref2[m];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        col1 = "bw"[i % 2];
        col0 = g.other(col1);
        pa.col += col0;
        pb.col += col1;
        if (i % 2 === 1) {
          this.pairs[i].reverse();
        }
      }
    } else {
      ref3 = range(this.pairs.length);
      for (n = 0, len3 = ref3.length; n < len3; n++) {
        i = ref3[n];
        [a, b] = this.pairs[i];
        pa = this.persons[a];
        pb = this.persons[b];
        this.assignColors(pa, pb);
        if (pa.col[this.round] === 'b') {
          this.pairs[i].reverse();
        }
      }
    }
    ref4 = this.pairs;
    results = [];
    for (i = o = 0, len4 = ref4.length; o < len4; i = ++o) {
      [a, b] = ref4[i];
      pa = this.persons[a];
      pb = this.persons[b];
      pa.chair = 2 * i;
      results.push(pb.chair = 2 * i + 1);
    }
    return results;
  }

  downloadFile(txt, filename) {
    var a, blob, url;
    blob = new Blob([txt], {
      type: 'text/plain'
    });
    url = URL.createObjectURL(blob);
    a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    return URL.revokeObjectURL(url);
  }

  scoringProbability(diff) {
    return 1 / (1 + 10 ** (diff / 400));
  }

  lotta() {
    var a, b, c, edges, i, id, index, k, l, len, len1, p, ref, solution, start, timestamp;
    if (this.round > 0 && g.calcMissing() > 0) {
      print('lottning ej genomförd!');
      return;
    }
    this.dump('lotta');
    this.virgin = false;
    timestamp = new Date().toLocaleString('se-SE').replaceAll(' ', '_');
    this.downloadFile(this.makeURL(timestamp), `${timestamp}-${this.round} URL.txt`);
    this.personsSorted = _.clone(this.persons);
    this.personsSorted.sort((pa, pb) => {
      var da, db;
      da = pa.elo;
      db = pb.elo;
      return db - da;
    });
    ref = range(this.personsSorted.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      this.personsSorted[i].pos[this.round] = i;
    }
    print('sorted', this.personsSorted);
    print(`Lottning av rond ${this.round} =====================================================`);
    document.title = `Round ${this.round + 1}`;
    print('pos', (function() {
      var l, len1, ref1, results;
      ref1 = this.personsSorted;
      results = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        results.push(p.id);
      }
      return results;
    }).call(this));
    start = new Date();
    edges = this.makeEdges(this.preMatch()); // -1 om bye saknas
    print('edges:', (function() {
      var l, len1, results;
      results = [];
      for (l = 0, len1 = edges.length; l < len1; l++) {
        [a, b, c] = edges[l];
        results.push(`${a}-${b} ${(9999 - c).toFixed(1)}`);
      }
      return results;
    })());
    solution = this.findSolution(edges);
    print('solution', solution);
    print('cpu', new Date() - start);
    for (id = l = 0, len1 = solution.length; l < len1; id = ++l) {
      index = solution[id];
      p = this.persons[index];
      if (id === -1 && ((g.BYE === _.last(p.opp)) || p.active)) {
        print('Solution failed!');
        return;
      }
    }
    this.pairs = this.unscramble(solution);
    if (this.round === 0) {
      print('pairs', this.pairs);
    }
    if (this.round > 0) {
      print('pairs', (function() {
        var len2, m, ref1, results;
        ref1 = this.pairs;
        results = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          [a, b] = ref1[m];
          results.push([a, b, this.persons[a].elo, this.persons[b].elo, Math.abs(this.persons[a].elo - this.persons[b].elo).toFixed(1)]);
        }
        return results;
      }).call(this));
    }
    print('solutionCosts', this.solutionCosts(this.pairs));
    this.postMatch();
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    g.pages[g.STANDINGS].setLista();
    if (g.N < 80) {
      print(this.makeMatrix()); // skriver till debug-fönstret, time outar inte.
    }
    this.downloadFile(this.makeBubbles(), `${timestamp}-${this.round} Bubbles.txt`);
    this.makeBubbles();
    this.downloadFile(this.makeStandardFile(), `${timestamp}-${this.round}.txt`);
    this.round += 1;
    return g.state = g.TABLES;
  }

  dump(title) {
    var k, len, p, ref;
    print(`##### ${title} #####`);
    print('TOUR', this.title);
    print('DATE', this.datum);
    print('ROUND', this.round);
    print('TPP', this.tpp);
    print('PPP', this.ppp);
    print('K', g.K);
    print('PAUSED', this.paused);
    print('PLAYERS');
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      print('  ', p.id, p.elo, p.name, p.opp, p.col, p.res);
    }
    return print('################');
  }

  fetchURL(url = location.search) {
    var XMAX, XMIN, a, b, getParam, i, id, k, l, len, len1, len2, len3, m, n, p, pa, pb, player, players, ref, ref1, ref2, ref3, ref4, urlParams;
    if (url === '') {
      window.location.href = "https://github.com/ChristerNilsson/ELO-Pairings/blob/main/README.md";
    }
    print('fetchURL', url);
    getParam = function(name, def) {
      return urlParams.get(name) || def;
    };
    urlParams = new URLSearchParams(url);
    this.players = [];
    this.title = urlParams.get('TOUR').replaceAll('_', ' ');
    this.datum = urlParams.get('DATE') || "";
    this.round = parseInt(getParam('ROUND', 0));
    this.tpp = parseInt(getParam('TPP', 30)); // Tables Per Page
    this.ppp = parseInt(getParam('PPP', 60)); // Players Per Page
    g.K = parseInt(getParam('K', 20)); // 40, 20 or 10 normally
    players = urlParams.get('PLAYERS');
    players = players.replaceAll(')(', ')!(');
    players = players.replaceAll('_', ' ');
    players = wrap(players);
    players = parseExpr(players);
    print('fetchURL.players', players);
    g.N = players.length;
    if (!((4 <= (ref = g.N) && ref < 1000))) {
      print("Error: Number of players must be between 4 and 999!");
      return;
    }
    this.persons = [];
    ref1 = range(g.N);
    for (k = 0, len = ref1.length; k < len; k++) {
      i = ref1[k];
      player = new Player(i);
      player.read(players[i]);
      this.persons.push(player);
    }
    this.paused = getParam('PAUSED', '()'); // list of zero based ids
    this.paused = parseExpr(this.paused);
    ref2 = this.paused;
    for (l = 0, len1 = ref2.length; l < len1; l++) {
      id = ref2[l];
      this.persons[id].active = false;
    }
    print('fetchURL.persons', this.persons);
    this.persons.sort(function(a, b) {
      if (a.elo !== b.elo) {
        return b.elo - a.elo;
      }
      if (a.name > b.name) {
        return 1;
      } else {
        return -1;
      }
    });
    // @persons = @persons.reverse()
    XMAX = this.persons[0].elo;
    XMIN = _.last(this.persons).elo;
    ref3 = range(g.N);
    for (m = 0, len2 = ref3.length; m < len2; m++) {
      i = ref3[m];
      this.persons[i].id = i;
      this.persons[i].elo = parseInt(this.persons[i].elo);
    }
    print((function() {
      var len3, n, ref4, results;
      ref4 = this.persons;
      results = [];
      for (n = 0, len3 = ref4.length; n < len3; n++) {
        p = ref4[n];
        results.push(p.elo);
      }
      return results;
    }).call(this));
    print('sorted players', this.persons); // by id AND descending elo
    this.playersByName = _.sortBy(this.persons, function(player) {
      return player.name;
    });
    print('playersByName', (function() {
      var len3, n, ref4, results;
      ref4 = this.playersByName;
      results = [];
      for (n = 0, len3 = ref4.length; n < len3; n++) {
        p = ref4[n];
        results.push(p.name);
      }
      return results;
    }).call(this));
    // extract @pairs from the last round
    this.pairs = [];
    ref4 = this.persons;
    for (n = 0, len3 = ref4.length; n < len3; n++) {
      p = ref4[n];
      a = p.id;
      b = _.last(p.opp);
      if (a < b) {
        pa = this.persons[a];
        pb = this.persons[b];
        this.pairs.push('w' === _.last(p.col) ? (pa.chair = 2 * this.pairs.length, pb.chair = 2 * this.pairs.length + 1, [a, b]) : (pa.chair = 2 * this.pairs.length + 1, pb.chair = 2 * this.pairs.length, [b, a]));
      }
    }
    print('@pairs', this.pairs);
    this.dump('fetch');
    g.pages = [new Tables(), new Names(), new Standings(), new Active()];
    g.pages[g.NAMES].setLista();
    g.pages[g.TABLES].setLista();
    return g.pages[g.STANDINGS].setLista();
  }

  makePaused() {
    return wrap(this.paused.join(SEPARATOR)); // (12!34)
  }

  makePlayers() {
    var k, len, p, players, ref, s;
    players = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      p = ref[k];
      s = p.write();
      players.push(wrap(s));
    }
    return players.join("\n");
  }

  // res = res.concat players
  makeURL(timestamp) {
    var res;
    res = [];
    // res.push "https://christernilsson.github.io/ELO-Pairings"
    res.push("http://127.0.0.1:5500");
    res.push("?TOUR=" + this.title.replaceAll(' ', '_'));
    res.push("&DATE=" + this.datum);
    res.push("&TIMESTAMP=" + timestamp);
    res.push("&ROUND=" + this.round);
    res.push("&K=" + g.K);
    res.push("&TPP=" + this.tpp);
    res.push("&PPP=" + this.ppp);
    res.push("&PAUSED=" + this.makePaused());
    res.push("&PLAYERS=" + this.makePlayers());
    return res.join('\n');
  }

  makeStandardFile() {
    var header_after, header_in, res, timestamp;
    res = [];
    timestamp = new Date().toLocaleString('se-SE');
    // print timestamp
    header_after = " for " + this.title + ` after Round ${this.round}    ${timestamp}`;
    header_in = " for " + this.title + ` in Round ${this.round + 1}    ${timestamp}`;
    if (this.round < 999) {
      g.pages[g.STANDINGS].make(res, header_after);
    }
    if (this.round >= 0) {
      g.pages[g.NAMES].make(res, header_in, this.playersByName);
    }
    if (this.round < 999) {
      g.pages[g.TABLES].make(res, header_in);
    }
    return res.join("\n");
  }

  distans(rounds) {
    var a, b, i, k, l, len, len1, pa, pb, ref, ref1, result;
    result = [];
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        if (a < 0 || b < 0) {
          continue;
        }
        pa = this.persons[a];
        pb = this.persons[b];
        if (pa.active && pb.active) {
          result.push(abs(pa.elo - pb.elo));
        }
      }
    }
    return (g.sum(result) / result.length).toFixed(2);
  }

  makeCanvas() {
    var i, k, len, line, ref, result;
    result = [];
    ref = range(g.N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      line = new Array(g.N);
      _.fill(line, '·');
      line[i] = '*';
      result.push(line);
    }
    return result;
  }

  dumpCanvas(title, average, canvas) {
    var header, i, item, k, len, nr, ordning, output, p, ref, row;
    output = ["", title];
    output.push(`Sparseness: ${average}  (Average Elo Difference) DIFF:${g.DIFF} EXPONENT:${g.EXPONENT} COLORS:${g.COLORS} K:${g.K}`);
    output.push("");
    header = ((function() {
      var k, len, ref, results;
      ref = range(g.N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(str((i + 1) % 10));
      }
      return results;
    })()).join(' ');
    output.push('     ' + header + '   Elo    AED');
    ordning = (function() {
      var k, len, ref, results;
      ref = this.persons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        p = ref[k];
        results.push(p.elo);
      }
      return results;
    }).call(this);
    ref = range(canvas.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      row = canvas[i];
      nr = str(i + 1).padStart(3);
      output.push(`${nr}  ${((function() {
        var l, len1, results;
        results = [];
        for (l = 0, len1 = row.length; l < len1; l++) {
          item = row[l];
          results.push(str(item));
        }
        return results;
      })()).join(" ")}  ${ordning[i]} ${this.persons[i].avgEloDiff().toFixed(1).padStart(6)}`);
    }
    output.push('     ' + header);
    return output.join('\n');
  }

  drawMatrix(title, rounds) {
    var a, b, canvas, i, k, l, len, len1, ref, ref1;
    canvas = this.makeCanvas();
    ref = range(rounds.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = rounds[i];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        [a, b] = ref1[l];
        // print 'drawMatrix',a,b
        if (a < 0 || b < 0) {
          continue;
        }
        if (this.persons[a].active && this.persons[b].active) {
          canvas[a][b] = g.ALFABET[i];
          canvas[b][a] = g.ALFABET[i];
        }
      }
    }
    return this.dumpCanvas(title, this.distans(rounds), canvas);
  }

  makeMatrix() {
    var k, l, len, len1, matrix, p, r, ref, ref1, res;
    matrix = [];
    ref = range(this.round);
    for (k = 0, len = ref.length; k < len; k++) {
      r = ref[k];
      res = [];
      ref1 = this.persons;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        p = ref1[l];
        res.push([p.id, p.opp[r]]);
      }
      matrix.push(res);
    }
    return this.drawMatrix(this.title, matrix);
  }

  makeBubbles() {
    var k, l, len, len1, pa, pb, r, ref, ref1, res;
    res = [];
    ref = this.persons;
    for (k = 0, len = ref.length; k < len; k++) {
      pa = ref[k];
      ref1 = range(this.round);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        r = ref1[l];
        if (pa.opp[r] >= 0) {
          pb = this.persons[pa.opp[r]];
          res.push(`${pa.elo}\t${pb.elo}`);
        }
      }
    }
    return res.join('\n');
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ELO-Pairings\coffee\tournament.coffee