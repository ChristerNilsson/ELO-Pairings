// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.mouseMoved = this.mouseMoved.bind(this);
    this.t = g.tournament;
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.TABLES);
    });
    this.buttons.s.active = false;
  }

  setLista() {
    var header, p, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return `${i % 10} `;
    });
    rheader = rheader.join(' ');
    header = "";
    header += g.txtT("Pos", 3, window.RIGHT);
    header += ' ' + g.txtT("Id", 3, window.RIGHT);
    header += ' ' + g.txtT("Elo", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    header += ' ' + g.txtT(rheader, 3 * this.round, window.LEFT);
    header += ' ' + g.txtT("Chg", 7, window.RIGHT);
    header += ' ' + g.txtT("Perf", 6, window.RIGHT);
    this.playersByPerformance = _.clone(this.t.persons.slice(0, g.N));
    this.playersByPerformance = _.sortBy(this.playersByPerformance, (p) => {
      return -p.performance(this.t.round);
    });
    print((function() {
      var j, len, ref, results;
      ref = this.playersByPerformance;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        results.push(p.performance(this.t.round));
      }
      return results;
    }).call(this));
    // print 'före invert'
    // g.inv = g.invert (p.id for p in @playersByPerformance)
    // print 'efter invert',g.inv
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, perf, r, ref, s, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      perf = p.performance(this.t.round - 1); // -1)
      s = "";
      s += g.txtT((1 + pos).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(p.name, 25, window.LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), window.CENTER);
      s += ' ' + g.txtT((perf - p.elo).toFixed(1), 6, window.RIGHT);
      s += ' ' + g.txtT(perf.toFixed(1), 6, window.RIGHT);
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        // if p.opp[r] == -1 then @txt "P", x, @y+1, window.CENTER, 'black'
        // else if p.opp[r] == g.N then @txt "BYE", x, @y+1, window.CENTER, 'black'
        // print 'yyy',"<#{p.opp[r]}>"
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  mouseMoved() {
    var PD, a, b, chg, iy, pa, pb, r;
    boundMethodCheck(this, Standings);
    r = round((mouseX / g.ZOOM[g.state] - 24.2) / 1.8);
    iy = this.lista.offset + round(mouseY / g.ZOOM[g.state] - 5);
    if ((0 <= iy && iy < this.playersByPerformance.length) && (0 <= r && r < g.tournament.round - 1)) {
      //iy = g.inv[iy]
      a = iy;
      pa = this.playersByPerformance[a];
      b = pa.opp[r];
      if (b === g.BYE) {
        g.help = `${pa.elo} ${pa.name} has a bye => chg = ${g.K / 2}`;
      }
      if (b === g.PAUSE) {
        g.help = `${pa.elo} ${pa.name} has a pause => chg = 0`;
      }
      if (b >= 0) {
        pb = this.t.persons[b];
        PD = pa.scoringProbability(r);
        chg = pa.calcRound(r);
        return g.help = `${pa.elo} ${pa.name} vs ${pb.elo} ${pb.name}:${g.prBoth(pa.res[r])}=> chg = ${chg.toFixed(1)}`;
      }
    } else {
      return g.help = "";
    }
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 58);
  }

  show(s, x, y, bg, fg) {
    fill(bg);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill(fg);
    return this.txt(s, x, y + 1, window.CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    // print "lightbulb id:#{id} color:#{color} x:#{x} y#{y} result:#{result} opponent:#{opponent}"
    push();
    rectMode(window.CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var i, j, k, l, len, len1, len2, perf, person, r, ref, ref1, ref2, s;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, window.RIGHT);
    header += ' ' + g.txtT('Id', 3, window.RIGHT);
    header += ' ' + g.txtT("Elo", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += ' ' + g.txtT("Chg", 7, window.RIGHT);
    header += ' ' + g.txtT("Perf", 7, window.RIGHT);
    if (this.t.round <= this.expl) {
      header += '  ' + g.txtT("Explanation", 12, window.LEFT);
    }
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      person = ref1[i];
      perf = person.performance(this.t.round);
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT((1 + person.id).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(person.elo.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (person.opp[r] === -1) {
          s += '      ';
        } else {
          s += g.txtT(`${1 + person.opp[r]}${g.RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + g.txtT((perf - person.elo).toFixed(1), 6, window.RIGHT);
      s += ' ' + g.txtT(perf.toFixed(2), 7, window.RIGHT);
      // s += ' ' + g.txtT person.performance(@t.round).toFixed(1),  8, window.RIGHT
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ELO-Pairings\coffee\page_standings.coffee