// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.mouseMoved = this.mouseMoved.bind(this);
    this.t = g.tournament;
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.TABLES);
    });
    this.buttons.s.active = false;
  }

  setLista() {
    var header, p, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return ` ${i % 10} `;
    });
    rheader = rheader.join('');
    header = "";
    header += g.txtT("Pos", 3, window.RIGHT);
    header += ' ' + g.txtT("Id", 3, window.RIGHT);
    header += ' ' + g.txtT("Elo0", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    header += '' + g.txtT(rheader, 3 * this.round, window.LEFT);
    header += ' ' + g.txtT("Chg", 7, window.RIGHT);
    header += ' ' + g.txtT("Elo", 6, window.RIGHT);
    this.playersByPerformance = _.clone(this.t.persons.slice(0, g.N));
    this.playersByPerformance = _.sortBy(this.playersByPerformance, (p) => {
      return -(p.elo(this.t.round) - p.elo0);
    });
    print(((function() {
      var j, len, ref, results;
      ref = this.playersByPerformance;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        results.push(p.elo(this.t.round).toFixed(1));
      }
      return results;
    }).call(this)).join(' '));
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var elo, j, len, r, ref, s, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      elo = p.elo(this.t.round - 1);
      s = "";
      s += g.txtT((1 + pos).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(p.elo0.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(p.name, 25, window.LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), window.CENTER);
      s += ' ' + g.txtT((elo - p.elo0).toFixed(1), 6, window.RIGHT);
      s += ' ' + g.txtT(elo.toFixed(1), 6, window.RIGHT);
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        // if p.opp[r] == -1 then @txt "P", x, @y+1, window.CENTER, 'black'
        // else if p.opp[r] == g.N then @txt "BYE", x, @y+1, window.CENTER, 'black'
        // print 'yyy',"<#{p.opp[r]}>"
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  mouseMoved() {
    var PD, a, b, chg, diff, iy, pa, pb, r, s;
    boundMethodCheck(this, Standings);
    r = round((mouseX / g.ZOOM[g.state] - 24.2) / 1.8);
    iy = this.lista.offset + round(mouseY / g.ZOOM[g.state] - 5);
    if ((0 <= iy && iy < this.playersByPerformance.length) && (0 <= r && r < g.tournament.round - 1)) {
      g.K = g.K0 * g.k ** r;
      a = iy;
      pa = this.playersByPerformance[a];
      b = pa.opp[r];
      if (b === g.BYE) {
        g.help = `${pa.elo0} ${pa.name} has a bye => chg = ${g.K / 2}`;
      }
      if (b === g.PAUSE) {
        g.help = `${pa.elo0} ${pa.name} has a pause => chg = 0`;
      }
      if (b >= 0) {
        pb = this.t.persons[b];
        diff = pa.elo(r) - pb.elo(r);
        PD = g.scoringProbability(diff);
        chg = pa.calcRound(r);
        s = "";
        s += g.txtT('', 3, window.RIGHT);
        s += ' ' + g.txtT((1 + pb.id).toString(), 3, window.RIGHT);
        s += ' ' + g.txtT(pb.elo0.toString(), 4, window.RIGHT);
        s += ' ' + g.txtT(pb.name, 25, window.LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), window.LEFT);
        s += ' ' + g.txtT(chg.toFixed(1), 6, window.RIGHT);
        s += ' ' + g.txtT(pb.elo(r).toFixed(1), 6, window.RIGHT);
        s += ' ' + g.txtT(g.prBth(pa.res[r]), 3, window.LEFT);
        s += ' ' + g.txtT(diff.toFixed(1), 6, window.RIGHT);
        s += ' ' + g.txtT(PD.toFixed(3), 5, window.RIGHT);
        return g.help = s;
      }
    } else {
      return g.help = "";
    }
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 3 * g.ZOOM[g.state]);
  }

  show(s, x, y, bg, fg) {
    fill(bg);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill(fg);
    return this.txt(s, x, y + 1, window.CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    // print "lightbulb id:#{id} color:#{color} x:#{x} y#{y} result:#{result} opponent:#{opponent}"
    push();
    rectMode(window.CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var elo, i, j, k, l, len, len1, len2, person, r, ref, ref1, ref2, s;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, window.RIGHT);
    header += ' ' + g.txtT('Id', 3, window.RIGHT);
    header += ' ' + g.txtT("Elo0", 4, window.RIGHT);
    header += ' ' + g.txtT("Name", 25, window.LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, window.RIGHT);
    }
    header += ' ' + g.txtT("Chg", 7, window.RIGHT);
    header += ' ' + g.txtT("Elo", 7, window.RIGHT);
    if (this.t.round <= this.expl) {
      header += '  ' + g.txtT("Explanation", 12, window.LEFT);
    }
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      person = ref1[i];
      elo = person.elo(this.t.round);
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT((1 + person.id).toString(), 3, window.RIGHT);
      s += ' ' + g.txtT(person.elo0.toString(), 4, window.RIGHT);
      s += ' ' + g.txtT(person.name, 25, window.LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (person.opp[r] === -2) {
          s += '    P ';
        }
        if (person.opp[r] === -1) {
          s += '   BYE';
        }
        if (person.opp[r] >= 0) {
          s += g.txtT(`${1 + person.opp[r]}${g.RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, window.RIGHT);
        }
      }
      s += ' ' + g.txtT((elo - person.elo0).toFixed(1), 6, window.RIGHT);
      s += ' ' + g.txtT(elo.toFixed(2), 7, window.RIGHT);
      // s += ' ' + g.txtT person.elo(@t.round).toFixed(1),  8, window.RIGHT
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZV9zdGFuZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi5cXCIsInNvdXJjZXMiOlsiY29mZmVlXFxwYWdlX3N0YW5kaW5ncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsT0FBQTtFQUFTLENBQVQ7RUFBVyxLQUFYO0VBQWlCLEtBQWpCO0VBQXVCLE1BQXZCO0VBQThCLE1BQTlCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsSUFBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBZ0IsTUFBaEI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsWUFBTixNQUFBLFVBQUEsUUFBd0IsS0FBeEI7RUFFTixXQUFjLENBQUEsQ0FBQTs7UUFpRGQsQ0FBQSxpQkFBQSxDQUFBO0lBL0NDLElBQUMsQ0FBQSxDQUFELEdBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXNCLElBQUksTUFBSixDQUFXLEVBQVgsRUFBZSxFQUFmLEVBQW1CLENBQUEsQ0FBQSxHQUFBO2FBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxDQUFDLENBQUMsTUFBYjtJQUFOLENBQW5CO0lBQ3RCLElBQUMsQ0FBQSxPQUFPLENBQUMsVUFBVCxHQUFzQixJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixDQUFBLENBQUEsR0FBQTthQUFNLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBQyxDQUFDLE1BQWI7SUFBTixDQUFuQjtJQUN0QixJQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFYLEdBQW9CO0VBTFA7O0VBT2QsUUFBVyxDQUFBLENBQUE7QUFFWixRQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUE7SUFBRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxLQUFBLENBQU0sQ0FBTixFQUFRLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FB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bnRlbnQiOlsiaW1wb3J0IHsgZyxwcmludCxyYW5nZSxzY2FsZXgsc2NhbGV5IH0gZnJvbSAnLi9nbG9iYWxzLmpzJyBcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vcGFnZS5qcycgXHJcbmltcG9ydCB7IEJ1dHRvbixzcHJlYWQgfSBmcm9tICcuL2J1dHRvbi5qcycgIFxyXG5pbXBvcnQgeyBMaXN0YSB9IGZyb20gJy4vbGlzdGEuanMnIFxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YW5kaW5ncyBleHRlbmRzIFBhZ2VcclxuXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QHQgPSBnLnRvdXJuYW1lbnRcclxuXHRcdEBidXR0b25zLkFycm93TGVmdCAgPSBuZXcgQnV0dG9uICcnLCAnJywgKCkgPT4gZy5zZXRTdGF0ZSBnLkFDVElWRVxyXG5cdFx0QGJ1dHRvbnMuQXJyb3dSaWdodCA9IG5ldyBCdXR0b24gJycsICcnLCAoKSA9PiBnLnNldFN0YXRlIGcuVEFCTEVTXHJcblx0XHRAYnV0dG9ucy5zLmFjdGl2ZSA9IGZhbHNlXHJcblxyXG5cdHNldExpc3RhIDogLT5cclxuXHJcblx0XHRyaGVhZGVyID0gXy5tYXAgcmFuZ2UoMSxAdC5yb3VuZCsxKSwgKGkpIC0+IFwiICN7aSUxMH0gXCJcclxuXHRcdHJoZWFkZXIgPSByaGVhZGVyLmpvaW4gJydcclxuXHRcdGhlYWRlciA9IFwiXCJcclxuXHRcdGhlYWRlciArPSAgICAgICBnLnR4dFQgXCJQb3NcIiwgICAgICAgICAgMyx3aW5kb3cuUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJJZFwiLCAgICAgICAgICAgMyx3aW5kb3cuUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJFbG8wXCIsICAgICAgICAgNCx3aW5kb3cuUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJOYW1lXCIsICAgICAgICAyNSx3aW5kb3cuTEVGVFxyXG5cdFx0aGVhZGVyICs9ICcnICsgZy50eHRUIHJoZWFkZXIsIDMqQHJvdW5kLHdpbmRvdy5MRUZUIFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIkNoZ1wiLCAgICAgICAgICA3LHdpbmRvdy5SSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIkVsb1wiLCAgICAgICAgICA2LHdpbmRvdy5SSUdIVFxyXG5cclxuXHRcdEBwbGF5ZXJzQnlQZXJmb3JtYW5jZSA9IF8uY2xvbmUgQHQucGVyc29ucy5zbGljZSAwLGcuTlxyXG5cdFx0QHBsYXllcnNCeVBlcmZvcm1hbmNlID0gXy5zb3J0QnkgQHBsYXllcnNCeVBlcmZvcm1hbmNlLCAocCkgPT4gLShwLmVsbyhAdC5yb3VuZCkgLSBwLmVsbzApXHJcblxyXG5cdFx0cHJpbnQgKHAuZWxvKEB0LnJvdW5kKS50b0ZpeGVkKDEpIGZvciBwIGluIEBwbGF5ZXJzQnlQZXJmb3JtYW5jZSkuam9pbiAnICdcclxuXHJcblx0XHRAbGlzdGEgPSBuZXcgTGlzdGEgQHBsYXllcnNCeVBlcmZvcm1hbmNlLCBoZWFkZXIsIEBidXR0b25zLCAocCxpbmRleCxwb3MpID0+ICMgcmV0dXJuZXJhIHN0csOkbmdlbiBzb20gc2thIHNrcml2YXMgdXQuIERlc3N1dG9tIHJpdGFzIGxpZ2h0YnVsYnMgaMOkci5cclxuXHRcdFx0QHlfYnVsYiA9ICg1ICsgaW5kZXgpICogZy5aT09NW2cuc3RhdGVdIFxyXG5cdFx0XHR0ZXh0QWxpZ24gTEVGVFxyXG5cdFx0XHRmaWxsICdibGFjaycgXHJcblx0XHRcdGVsbyA9IHAuZWxvIEB0LnJvdW5kLTFcclxuXHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0cyArPSAgICAgICBnLnR4dFQgKDErcG9zKS50b1N0cmluZygpLCAgICAgMywgd2luZG93LlJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUICgxK3AuaWQpLnRvU3RyaW5nKCksICAgIDMsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBwLmVsbzAudG9TdHJpbmcoKSwgICAgICA0LCB3aW5kb3cuUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcC5uYW1lLCAgICAgICAgICAgICAgICAyNSwgd2luZG93LkxFRlRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgJycsICAgICAgMyAqIChAdC5yb3VuZC0xKSwgd2luZG93LkNFTlRFUlxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCAoZWxvIC0gcC5lbG8wKS50b0ZpeGVkKDEpLCA2LCB3aW5kb3cuUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgZWxvLnRvRml4ZWQoMSksICAgICAgICAgNiwgd2luZG93LlJJR0hUXHJcblxyXG5cdFx0XHRmb3IgciBpbiByYW5nZSBnLnRvdXJuYW1lbnQucm91bmQgLSAxICMtIDFcclxuXHRcdFx0XHR4ID0gZy5aT09NW2cuc3RhdGVdICogKDI0LjIgKyAxLjgqcilcclxuXHRcdFx0XHQjIGlmIHAub3BwW3JdID09IC0xIHRoZW4gQHR4dCBcIlBcIiwgeCwgQHkrMSwgd2luZG93LkNFTlRFUiwgJ2JsYWNrJ1xyXG5cdFx0XHRcdCMgZWxzZSBpZiBwLm9wcFtyXSA9PSBnLk4gdGhlbiBAdHh0IFwiQllFXCIsIHgsIEB5KzEsIHdpbmRvdy5DRU5URVIsICdibGFjaydcclxuXHRcdFx0XHQjIHByaW50ICd5eXknLFwiPCN7cC5vcHBbcl19PlwiXHJcblx0XHRcdFx0QGxpZ2h0YnVsYiBwLmlkLCBwLmNvbFtyXSwgeCwgQHlfYnVsYiwgcC5yZXMuc2xpY2UocixyKzEpLCBwLm9wcFtyXVxyXG5cdFx0XHRzXHJcblx0XHRAbGlzdGEucGFpbnRZZWxsb3dSb3cgPSBmYWxzZVxyXG5cdFx0c3ByZWFkIEBidXR0b25zLCAxMCwgQHksIEBoXHJcblxyXG5cdG1vdXNlTW92ZWQgOiA9PlxyXG5cdFx0ciA9IHJvdW5kICgobW91c2VYIC8gZy5aT09NW2cuc3RhdGVdIC0gMjQuMikgLyAxLjgpXHJcblx0XHRpeSA9IEBsaXN0YS5vZmZzZXQgKyByb3VuZCBtb3VzZVkgLyBnLlpPT01bZy5zdGF0ZV0gLSA1XHJcblx0XHRpZiAwIDw9IGl5IDwgQHBsYXllcnNCeVBlcmZvcm1hbmNlLmxlbmd0aCBhbmQgMCA8PSByIDwgZy50b3VybmFtZW50LnJvdW5kIC0gMVxyXG5cdFx0XHRnLksgPSBnLkswICogZy5rICoqIHJcclxuXHRcdFx0YSA9IGl5XHJcblx0XHRcdHBhID0gQHBsYXllcnNCeVBlcmZvcm1hbmNlW2FdXHJcblx0XHRcdGIgPSBwYS5vcHBbcl1cclxuXHRcdFx0aWYgYiA9PSBnLkJZRSAgIHRoZW4gZy5oZWxwID0gXCIje3BhLmVsbzB9ICN7cGEubmFtZX0gaGFzIGEgYnllID0+IGNoZyA9ICN7Zy5LLzJ9XCJcclxuXHRcdFx0aWYgYiA9PSBnLlBBVVNFIHRoZW4gZy5oZWxwID0gXCIje3BhLmVsbzB9ICN7cGEubmFtZX0gaGFzIGEgcGF1c2UgPT4gY2hnID0gMFwiXHJcblx0XHRcdGlmIGIgPj0gMFx0XHRcdFx0XHJcblx0XHRcdFx0cGIgPSBAdC5wZXJzb25zW2JdXHJcblx0XHRcdFx0ZGlmZiA9IHBhLmVsbyhyKSAtIHBiLmVsbyhyKVxyXG5cdFx0XHRcdFBEID0gZy5zY29yaW5nUHJvYmFiaWxpdHkgZGlmZlxyXG5cdFx0XHRcdGNoZyA9IHBhLmNhbGNSb3VuZCByXHJcblxyXG5cdFx0XHRcdHMgPSBcIlwiXHJcblx0XHRcdFx0cyArPSAgICAgICBnLnR4dFQgJycsICAgICAgICAgICAgICAgICAgICAgIDMsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUICgxK3BiLmlkKS50b1N0cmluZygpLCAgICAzLCB3aW5kb3cuUklHSFRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBwYi5lbG8wLnRvU3RyaW5nKCksICAgICAgNCwgd2luZG93LlJJR0hUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcGIubmFtZSwgICAgICAgICAgICAgICAgMjUsIHdpbmRvdy5MRUZUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgJycsICAgICAgIDMgKiAoQHQucm91bmQtMSksIHdpbmRvdy5MRUZUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgY2hnLnRvRml4ZWQoMSksICAgICAgICAgIDYsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBiLmVsbyhyKS50b0ZpeGVkKDEpLCAgICA2LCB3aW5kb3cuUklHSFRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBnLnByQnRoKHBhLnJlc1tyXSksICAgICAgMywgd2luZG93LkxFRlRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBkaWZmLnRvRml4ZWQoMSksICAgICAgICAgNiwgd2luZG93LlJJR0hUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgUEQudG9GaXhlZCgzKSwgICAgICAgICAgIDUsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRcdGcuaGVscCA9IHNcclxuXHRcdGVsc2VcclxuXHRcdFx0Zy5oZWxwID0gXCJcIlxyXG5cclxuXHRtb3VzZVdoZWVsICAgOiAoZXZlbnQgKS0+IEBsaXN0YS5tb3VzZVdoZWVsIGV2ZW50XHJcblx0bW91c2VQcmVzc2VkIDogKGV2ZW50KSAtPiBAbGlzdGEubW91c2VQcmVzc2VkIGV2ZW50XHJcblx0a2V5UHJlc3NlZCAgIDogKGV2ZW50KSAtPiBAYnV0dG9uc1trZXldLmNsaWNrKClcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRmaWxsICd3aGl0ZSdcclxuXHRcdEBzaG93SGVhZGVyIEB0LnJvdW5kLTFcclxuXHRcdEBsaXN0YS5kcmF3KClcclxuXHRcdGZvciBrZXksYnV0dG9uIG9mIEBidXR0b25zXHJcblx0XHRcdGJ1dHRvbi5kcmF3KClcclxuXHRcdHRleHRBbGlnbiBMRUZUXHJcblx0XHR0ZXh0IGcuaGVscCwgMTAsIDMqZy5aT09NW2cuc3RhdGVdXHJcblxyXG5cdHNob3cgOiAocyx4LHksYmcsZmcpIC0+XHJcblx0XHRmaWxsIGJnXHJcblx0XHRyZWN0IHgsIHksIDEuNiAqIGcuWk9PTVtnLnN0YXRlXSwgMC45ICogZy5aT09NW2cuc3RhdGVdXHJcblx0XHRmaWxsIGZnXHJcblx0XHRAdHh0IHMsIHgsIHkrMSwgd2luZG93LkNFTlRFUlxyXG5cclxuXHRsaWdodGJ1bGIgOiAoaWQsIGNvbG9yLCB4LCB5LCByZXN1bHQsIG9wcG9uZW50KSAtPlxyXG5cdFx0IyBwcmludCBcImxpZ2h0YnVsYiBpZDoje2lkfSBjb2xvcjoje2NvbG9yfSB4OiN7eH0geSN7eX0gcmVzdWx0OiN7cmVzdWx0fSBvcHBvbmVudDoje29wcG9uZW50fVwiXHJcblx0XHRwdXNoKClcclxuXHRcdHJlY3RNb2RlIHdpbmRvdy5DRU5URVJcclxuXHRcdHMgPSAxICsgb3Bwb25lbnRcclxuXHRcdGlmIG9wcG9uZW50ID09IGcuUEFVU0UgdGhlbiBAc2hvdyBcIiBQIFwiLHgseSxcImdyYXlcIiwneWVsbG93J1xyXG5cdFx0aWYgb3Bwb25lbnQgPT0gZy5CWUUgICB0aGVuIEBzaG93IFwiQllFXCIseCx5LFwiZ3JlZW5cIiwneWVsbG93J1xyXG5cdFx0aWYgb3Bwb25lbnQgPj0gMFxyXG5cdFx0XHRyZXN1bHQgPSAnMDEyJy5pbmRleE9mIHJlc3VsdFxyXG5cdFx0XHRAc2hvdyAxK29wcG9uZW50LCB4LCB5LCAncmVkIGdyYXkgZ3JlZW4nLnNwbGl0KCcgJylbcmVzdWx0XSwge2I6J2JsYWNrJywgJyAnOid5ZWxsb3cnLCB3Oid3aGl0ZSd9W2NvbG9yXVxyXG5cdFx0cG9wKClcclxuXHJcblx0bWFrZSA6IChyZXMsaGVhZGVyKSAtPlxyXG5cdFx0aWYgQHQucGFpcnMubGVuZ3RoID09IDAgdGhlbiByZXMucHVzaCBcIlRoaXMgUk9VTkQgY2FuJ3QgYmUgcGFpcmVkISAoVG9vIG1hbnkgcm91bmRzKVwiXHJcblxyXG5cdFx0cmVzLnB1c2ggXCJTVEFORElOR1NcIiArIGhlYWRlclxyXG5cdFx0cmVzLnB1c2ggXCJcIlxyXG5cclxuXHRcdGhlYWRlciA9IFwiXCJcclxuXHRcdGhlYWRlciArPSAgICAgICBnLnR4dFQgXCJQb3NcIiwgICAzLCB3aW5kb3cuUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgJ0lkJywgICAgMywgd2luZG93LlJJR0hUXHJcblx0XHRoZWFkZXIgKz0gJyAnICsgZy50eHRUIFwiRWxvMFwiLCAgNCwgd2luZG93LlJJR0hUXHJcblx0XHRoZWFkZXIgKz0gJyAnICsgZy50eHRUIFwiTmFtZVwiLCAyNSwgd2luZG93LkxFRlRcclxuXHRcdGZvciByIGluIHJhbmdlIEB0LnJvdW5kXHJcblx0XHRcdGhlYWRlciArPSBnLnR4dFQgXCIje3IrMX1cIiwgIDYsd2luZG93LlJJR0hUXHJcblx0XHRoZWFkZXIgKz0gJyAnICsgZy50eHRUIFwiQ2hnXCIsICAgNyx3aW5kb3cuUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJFbG9cIiwgICA3LHdpbmRvdy5SSUdIVFxyXG5cdFx0aWYgQHQucm91bmQgPD0gQGV4cGwgdGhlbiBoZWFkZXIgKz0gJyAgJyArIGcudHh0VCBcIkV4cGxhbmF0aW9uXCIsIDEyLHdpbmRvdy5MRUZUXHJcblx0XHRcclxuXHRcdGZvciBwZXJzb24saSBpbiBAcGxheWVyc0J5UGVyZm9ybWFuY2VcclxuXHRcdFx0ZWxvID0gcGVyc29uLmVsbyBAdC5yb3VuZFxyXG5cdFx0XHRpZiBpICUgQHQucHBwID09IDAgdGhlbiByZXMucHVzaCBoZWFkZXJcclxuXHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0cyArPSAgICAgICBnLnR4dFQgKDEraSkudG9TdHJpbmcoKSwgICAgICAgICAgMywgd2luZG93LlJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUICgxK3BlcnNvbi5pZCkudG9TdHJpbmcoKSwgIDMsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBwZXJzb24uZWxvMC50b1N0cmluZygpLCAgICA0LCB3aW5kb3cuUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcGVyc29uLm5hbWUsICAgICAgICAgICAgICAyNSwgd2luZG93LkxFRlRcclxuXHRcdFx0cyArPSAnICdcclxuXHRcdFx0Zm9yIHIgaW4gcmFuZ2UgQHQucm91bmRcclxuXHRcdFx0XHRpZiBwZXJzb24ub3BwW3JdID09IC0yIHRoZW4gcyArPSAnICAgIFAgJ1xyXG5cdFx0XHRcdGlmIHBlcnNvbi5vcHBbcl0gPT0gLTEgdGhlbiBzICs9ICcgICBCWUUnXHJcblx0XHRcdFx0aWYgcGVyc29uLm9wcFtyXSA+PSAwXHJcblx0XHRcdFx0XHRzICs9IGcudHh0VCBcIiN7MStwZXJzb24ub3BwW3JdfSN7Zy5SSU5HU1twZXJzb24uY29sW3JdWzBdXX0je1wiMMK9MVwiW3BlcnNvbi5yZXNbcl1dfVwiLCA2LCB3aW5kb3cuUklHSFRcdFx0XHRcclxuXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUIChlbG8gLSBwZXJzb24uZWxvMCkudG9GaXhlZCgxKSwgIDYsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBlbG8udG9GaXhlZCgyKSwgIDcsIHdpbmRvdy5SSUdIVFxyXG5cdFx0XHQjIHMgKz0gJyAnICsgZy50eHRUIHBlcnNvbi5lbG8oQHQucm91bmQpLnRvRml4ZWQoMSksICA4LCB3aW5kb3cuUklHSFRcclxuXHRcdFx0cmVzLnB1c2ggcyBcclxuXHRcdFx0aWYgaSAlIEB0LnBwcCA9PSBAdC5wcHAtMSB0aGVuIHJlcy5wdXNoIFwiXFxmXCJcclxuXHRcdHJlcy5wdXNoIFwiXFxmXCIiXX0=
//# sourceURL=c:\github\ELO-Pairings\coffee\page_standings.coffee