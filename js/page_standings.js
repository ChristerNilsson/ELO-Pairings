// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.mouseMoved = this.mouseMoved.bind(this);
    this.t = g.tournament;
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.TABLES);
    });
    this.buttons.s.active = false;
  }

  setLista() {
    var header, p, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return ` ${i % 10} `;
    });
    rheader = rheader.join('');
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT("Id", 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    header += '' + g.txtT(rheader, 3 * this.round, LEFT);
    header += ' ' + g.txtT("Quality", 8, RIGHT);
    this.playersByPerformance = _.clone(this.t.persons.slice(0, g.N));
    this.playersByPerformance = _.sortBy(this.playersByPerformance, (p) => {
      return -(p.change(this.t.round + 1));
    });
    print(((function() {
      var j, len, ref, results;
      ref = this.playersByPerformance;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        p = ref[j];
        results.push(p.change(this.t.round).toFixed(1));
      }
      return results;
    }).call(this)).join(' '));
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, r, ref, s, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      s = "";
      s += g.txtT((1 + pos).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(p.name, 25, LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), CENTER);
      s += ' ' + g.txtT(p.change(this.t.round).toFixed(3), 7, RIGHT);
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        // if p.opp[r] == -1 then @txt "P", x, @y+1,  CENTER, 'black'
        // else if p.opp[r] == g.N then @txt "BYE", x, @y+1,  CENTER, 'black'
        // print 'yyy',"<#{p.opp[r]}>"
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  mouseMoved() {
    var PD, a, b, chg, diff, iy, pa, pb, r, s;
    boundMethodCheck(this, Standings);
    r = round((mouseX / g.ZOOM[g.state] - 24.2) / 1.8);
    iy = this.lista.offset + round(mouseY / g.ZOOM[g.state] - 5);
    if ((0 <= iy && iy < this.playersByPerformance.length) && (0 <= r && r < g.tournament.round - 1)) {
      a = iy;
      pa = this.playersByPerformance[a];
      b = pa.opp[r];
      if (b === g.BYE) {
        g.help = `${pa.elo} ${pa.name} has a bye => chg = ${g.K / 2}`;
      }
      if (b === g.PAUSE) {
        g.help = `${pa.elo} ${pa.name} has a pause => chg = 0`;
      }
      if (b >= 0) {
        pb = this.t.persons[b];
        diff = pa.elo - pb.elo;
        PD = g.K * g.scoringProbability(diff);
        chg = pa.calcRound(r);
        s = "";
        s += g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT((1 + pb.id).toString(), 3, RIGHT);
        s += ' ' + g.txtT(pb.elo.toString(), 4, RIGHT);
        s += ' ' + g.txtT(pb.name, 25, LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), LEFT);
        s += ' ' + g.txtT(chg.toFixed(3), 7, RIGHT);
        s += ' ' + g.txtT(-diff, 6, RIGHT);
        return g.help = s;
      }
    } else {
      return g.help = "";
    }
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 3 * g.ZOOM[g.state]);
  }

  show(s, x, y, bg, fg) {
    fill(bg);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill(fg);
    return this.txt(s, x, y + 1, CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    // print "lightbulb id:#{id} color:#{color} x:#{x} y#{y} result:#{result} opponent:#{opponent}"
    push();
    rectMode(CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var i, j, k, l, len, len1, len2, person, r, ref, ref1, ref2, s;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT('Id', 3, RIGHT);
    header += ' ' + g.txtT("Elo0", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, RIGHT);
    }
    header += ' ' + g.txtT("Quality", 10, RIGHT);
    if (this.t.round <= this.expl) {
      header += '  ' + g.txtT("Explanation", 12, LEFT);
    }
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      person = ref1[i];
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + person.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(person.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(person.name, 25, LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (person.opp[r] === -2) {
          s += '    P ';
        }
        if (person.opp[r] === -1) {
          s += '   BYE';
        }
        if (person.opp[r] >= 0) {
          s += g.txtT(`${1 + person.opp[r]}${g.RINGS[person.col[r][0]]}${"0½1"[person.res[r]]}`, 6, RIGHT);
        }
      }
      s += ' ' + g.txtT((person.change(this.t.round + 1)).toFixed(6), 9, RIGHT);
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZV9zdGFuZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi5cXCIsInNvdXJjZXMiOlsiY29mZmVlXFxwYWdlX3N0YW5kaW5ncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsT0FBQTtFQUFTLENBQVQ7RUFBVyxLQUFYO0VBQWlCLEtBQWpCO0VBQXVCLE1BQXZCO0VBQThCLE1BQTlCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsSUFBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBZ0IsTUFBaEI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsWUFBTixNQUFBLFVBQUEsUUFBd0IsS0FBeEI7RUFFTixXQUFjLENBQUEsQ0FBQTs7UUE4Q2QsQ0FBQSxpQkFBQSxDQUFBO0lBNUNDLElBQUMsQ0FBQSxDQUFELEdBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXNCLElBQUksTUFBSixDQUFXLEVBQVgsRUFBZSxFQUFmLEVBQW1CLENBQUEsQ0FBQSxHQUFBO2FBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxDQUFDLENBQUMsTUFBYjtJQUFOLENBQW5CO0lBQ3RCLElBQUMsQ0FBQSxPQUFPLENBQUMsVUFBVCxHQUFzQixJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixDQUFBLENBQUEsR0FBQTthQUFNLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBQyxDQUFDLE1BQWI7SUFBTixDQUFuQjtJQUN0QixJQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFYLEdBQW9CO0VBTFA7O0VBT2QsUUFBVyxDQUFBLENBQUE7QUFFWixRQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUE7SUFBRSxPQUFBLEdBQVUsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxLQUFBLENBQU0sQ0FBTixFQUFRLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQWpCLENBQU4sRUFBMkIsUUFBQSxDQUFDLENBQUQsQ0FBQTthQUFPLEVBQUEsQ0FBQSxDQUFJLENBQUEsR0FBRSxFQUFOLEVBQUE7SUFBUCxDQUEzQjtJQUNWLE9BQUEsR0FBVSxPQUFPLENBQUMsSUFBUixDQUFhLEVBQWI7SUFDVixNQUFBLEdBQVM7SUFDVCxNQUFBLElBQWdCLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxFQUF1QixDQUF2QixFQUEwQixLQUExQjtJQUNoQixNQUFBLElBQVUsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sSUFBUCxFQUF1QixDQUF2QixFQUEwQixLQUExQjtJQUNoQixNQUFBLElBQVUsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxFQUF1QixDQUF2QixFQUEwQixLQUExQjtJQUNoQixNQUFBLElBQVUsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBUCxFQUFzQixFQUF0QixFQUEwQixJQUExQjtJQUNoQixNQUFBLElBQVUsRUFBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBUCxFQUFnQixDQUFBLEdBQUUsSUFBQyxDQUFBLEtBQW5CLEVBQTBCLElBQTFCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxTQUFQLEVBQXVCLENBQXZCLEVBQTBCLEtBQTFCO0lBRWhCLElBQUMsQ0FBQSxvQkFBRCxHQUF3QixDQUFDLENBQUMsS0FBRixDQUFRLElBQUMsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQVgsQ0FBaUIsQ0FBakIsRUFBbUIsQ0FBQyxDQUFDLENBQXJCLENBQVI7SUFDeEIsSUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLG9CQUFWLEVBQWdDLENBQUMsQ0FBRCxDQUFBLEdBQUE7YUFBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUgsR0FBUyxDQUFsQixDQUFEO0lBQVIsQ0FBaEM7SUFFeEIsS0FBQSxDQUFNOztBQUFDO0FBQUE7TUFBQSxLQUFBLHFDQUFBOztxQkFBQSxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBWixDQUFrQixDQUFDLE9BQW5CLENBQTJCLENBQTNCO01BQUEsQ0FBQTs7aUJBQUQsQ0FBOEQsQ0FBQyxJQUEvRCxDQUFvRSxHQUFwRSxDQUFOO0lBRUEsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLEtBQUosQ0FBVSxJQUFDLENBQUEsb0JBQVgsRUFBaUMsTUFBakMsRUFBeUMsSUFBQyxDQUFBLE9BQTFDLEVBQW1ELENBQUMsQ0FBRCxFQUFHLEtBQUgsRUFBUyxHQUFULENBQUEsR0FBQSxFQUFBO0FBQzlELFVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQTtNQUFHLElBQUMsQ0FBQSxNQUFELEdBQVUsQ0FBQyxDQUFBLEdBQUksS0FBTCxDQUFBLEdBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSDtNQUM5QixTQUFBLENBQVUsSUFBVjtNQUNBLElBQUEsQ0FBSyxPQUFMO01BQ0EsQ0FBQSxHQUFJO01BQ0osQ0FBQSxJQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFBLEdBQUUsR0FBSCxDQUFPLENBQUMsUUFBUixDQUFBLENBQVAsRUFBK0IsQ0FBL0IsRUFBbUMsS0FBbkM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFBLEdBQUUsQ0FBQyxDQUFDLEVBQUwsQ0FBUSxDQUFDLFFBQVQsQ0FBQSxDQUFQLEVBQStCLENBQS9CLEVBQW1DLEtBQW5DO01BQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBTixDQUFBLENBQVAsRUFBK0IsQ0FBL0IsRUFBbUMsS0FBbkM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLElBQVQsRUFBOEIsRUFBOUIsRUFBbUMsSUFBbkM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBUCxFQUFnQixDQUFBLEdBQUksQ0FBQyxJQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUgsR0FBUyxDQUFWLENBQXBCLEVBQW1DLE1BQW5DO01BQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLENBQUMsQ0FBQyxLQUFaLENBQWtCLENBQUMsT0FBbkIsQ0FBMkIsQ0FBM0IsQ0FBUCxFQUFzQyxDQUF0QyxFQUF5QyxLQUF6QztBQUVYOztNQUFBLEtBQUEscUNBQUE7O1FBQ0MsQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBTixHQUFrQixDQUFDLElBQUEsR0FBTyxHQUFBLEdBQUksQ0FBWixFQUExQjs7OztRQUlJLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBQyxDQUFDLEVBQWIsRUFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQXRCLEVBQTJCLENBQTNCLEVBQThCLElBQUMsQ0FBQSxNQUEvQixFQUF1QyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQU4sQ0FBWSxDQUFaLEVBQWMsQ0FBQSxHQUFFLENBQWhCLENBQXZDLEVBQTJELENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFoRTtNQUxEO2FBTUE7SUFsQjJELENBQW5EO0lBbUJULElBQUMsQ0FBQSxLQUFLLENBQUMsY0FBUCxHQUF3QjtXQUN4QixNQUFBLENBQU8sSUFBQyxDQUFBLE9BQVIsRUFBaUIsRUFBakIsRUFBcUIsSUFBQyxDQUFBLENBQXRCLEVBQXlCLElBQUMsQ0FBQSxDQUExQjtFQXJDVTs7RUF1Q1gsVUFBYSxDQUFBLENBQUE7QUFDZCxRQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBOzJCQWpEYTtJQWlEWCxDQUFBLEdBQUksS0FBQSxDQUFPLENBQUMsTUFBQSxHQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBZixHQUEyQixJQUE1QixDQUFBLEdBQW9DLEdBQTNDO0lBQ0osRUFBQSxHQUFLLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQixLQUFBLENBQU0sTUFBQSxHQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBZixHQUEyQixDQUFqQztJQUNyQixJQUFHLENBQUEsQ0FBQSxJQUFLLEVBQUwsSUFBSyxFQUFMLEdBQVUsSUFBQyxDQUFBLG9CQUFvQixDQUFDLE1BQWhDLENBQUEsSUFBMkMsQ0FBQSxDQUFBLElBQUssQ0FBTCxJQUFLLENBQUwsR0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQWIsR0FBcUIsQ0FBOUIsQ0FBOUM7TUFDQyxDQUFBLEdBQUk7TUFDSixFQUFBLEdBQUssSUFBQyxDQUFBLG9CQUFvQixDQUFDLENBQUQ7TUFDMUIsQ0FBQSxHQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRDtNQUNWLElBQUcsQ0FBQSxLQUFLLENBQUMsQ0FBQyxHQUFWO1FBQXFCLENBQUMsQ0FBQyxJQUFGLEdBQVMsQ0FBQSxDQUFBLENBQUcsRUFBRSxDQUFDLEdBQU4sRUFBQSxDQUFBLENBQWEsRUFBRSxDQUFDLElBQWhCLENBQUEsb0JBQUEsQ0FBQSxDQUEyQyxDQUFDLENBQUMsQ0FBRixHQUFJLENBQS9DLENBQUEsRUFBOUI7O01BQ0EsSUFBRyxDQUFBLEtBQUssQ0FBQyxDQUFDLEtBQVY7UUFBcUIsQ0FBQyxDQUFDLElBQUYsR0FBUyxDQUFBLENBQUEsQ0FBRyxFQUFFLENBQUMsR0FBTixFQUFBLENBQUEsQ0FBYSxFQUFFLENBQUMsSUFBaEIsQ0FBQSx1QkFBQSxFQUE5Qjs7TUFDQSxJQUFHLENBQUEsSUFBSyxDQUFSO1FBQ0MsRUFBQSxHQUFLLElBQUMsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUQ7UUFDZixJQUFBLEdBQU8sRUFBRSxDQUFDLEdBQUgsR0FBUyxFQUFFLENBQUM7UUFDbkIsRUFBQSxHQUFLLENBQUMsQ0FBQyxDQUFGLEdBQU0sQ0FBQyxDQUFDLGtCQUFGLENBQXFCLElBQXJCO1FBQ1gsR0FBQSxHQUFNLEVBQUUsQ0FBQyxTQUFILENBQWEsQ0FBYjtRQUVOLENBQUEsR0FBSTtRQUNKLENBQUEsSUFBVyxDQUFDLENBQUMsSUFBRixDQUFPLEVBQVAsRUFBZ0MsQ0FBaEMsRUFBb0MsS0FBcEM7UUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFBLEdBQUUsRUFBRSxDQUFDLEVBQU4sQ0FBUyxDQUFDLFFBQVYsQ0FBQSxDQUFQLEVBQWdDLENBQWhDLEVBQW9DLEtBQXBDO1FBQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUCxDQUFBLENBQVAsRUFBK0IsQ0FBL0IsRUFBbUMsS0FBbkM7UUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBRSxDQUFDLElBQVYsRUFBK0IsRUFBL0IsRUFBb0MsSUFBcEM7UUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBUCxFQUFpQixDQUFBLEdBQUksQ0FBQyxJQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUgsR0FBUyxDQUFWLENBQXJCLEVBQW9DLElBQXBDO1FBQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLEdBQUcsQ0FBQyxPQUFKLENBQVksQ0FBWixDQUFQLEVBQWdDLENBQWhDLEVBQW9DLEtBQXBDO1FBQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsSUFBUixFQUFnQyxDQUFoQyxFQUFvQyxLQUFwQztlQUNYLENBQUMsQ0FBQyxJQUFGLEdBQVMsRUFkVjtPQU5EO0tBQUEsTUFBQTthQXNCQyxDQUFDLENBQUMsSUFBRixHQUFTLEdBdEJWOztFQUhZOztFQTJCYixVQUFlLENBQUMsS0FBRCxDQUFBO1dBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLENBQWtCLEtBQWxCO0VBQVg7O0VBQ2YsWUFBZSxDQUFDLEtBQUQsQ0FBQTtXQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsWUFBUCxDQUFvQixLQUFwQjtFQUFYOztFQUNmLFVBQWUsQ0FBQyxLQUFELENBQUE7V0FBVyxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQUQsQ0FBSyxDQUFDLEtBQWQsQ0FBQTtFQUFYOztFQUVmLElBQU8sQ0FBQSxDQUFBO0FBQ1IsUUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBO0lBQUUsSUFBQSxDQUFLLE9BQUw7SUFDQSxJQUFDLENBQUEsVUFBRCxDQUFZLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQXJCO0lBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLENBQUE7QUFDQTtJQUFBLEtBQUEsVUFBQTs7TUFDQyxNQUFNLENBQUMsSUFBUCxDQUFBO0lBREQ7SUFFQSxTQUFBLENBQVUsSUFBVjtXQUNBLElBQUEsQ0FBSyxDQUFDLENBQUMsSUFBUCxFQUFhLEVBQWIsRUFBaUIsQ0FBQSxHQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBekI7RUFQTTs7RUFTUCxJQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sRUFBUCxFQUFVLEVBQVYsQ0FBQTtJQUNOLElBQUEsQ0FBSyxFQUFMO0lBQ0EsSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBdkIsRUFBa0MsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUgsQ0FBOUM7SUFDQSxJQUFBLENBQUssRUFBTDtXQUNBLElBQUMsQ0FBQSxHQUFELENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxDQUFBLEdBQUUsQ0FBYixFQUFpQixNQUFqQjtFQUpNOztFQU1QLFNBQVksQ0FBQyxFQUFELEVBQUssS0FBTCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLE1BQWxCLEVBQTBCLFFBQTFCLENBQUE7QUFDYixRQUFBLENBQUE7O0lBQ0UsSUFBQSxDQUFBO0lBQ0EsUUFBQSxDQUFVLE1BQVY7SUFDQSxDQUFBLEdBQUksQ0FBQSxHQUFJO0lBQ1IsSUFBRyxRQUFBLEtBQVksQ0FBQyxDQUFDLEtBQWpCO01BQTRCLElBQUMsQ0FBQSxJQUFELENBQU0sS0FBTixFQUFZLENBQVosRUFBYyxDQUFkLEVBQWdCLE1BQWhCLEVBQXVCLFFBQXZCLEVBQTVCOztJQUNBLElBQUcsUUFBQSxLQUFZLENBQUMsQ0FBQyxHQUFqQjtNQUE0QixJQUFDLENBQUEsSUFBRCxDQUFNLEtBQU4sRUFBWSxDQUFaLEVBQWMsQ0FBZCxFQUFnQixPQUFoQixFQUF3QixRQUF4QixFQUE1Qjs7SUFDQSxJQUFHLFFBQUEsSUFBWSxDQUFmO01BQ0MsTUFBQSxHQUFTLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZDtNQUNULElBQUMsQ0FBQSxJQUFELENBQU0sQ0FBQSxHQUFFLFFBQVIsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsZ0JBQWdCLENBQUMsS0FBakIsQ0FBdUIsR0FBdkIsQ0FBMkIsQ0FBQyxNQUFELENBQW5ELEVBQTZEO1FBQUMsQ0FBQSxFQUFFLE9BQUg7UUFBWSxHQUFBLEVBQUksUUFBaEI7UUFBMEIsQ0FBQSxFQUFFO01BQTVCLENBQW9DLENBQUMsS0FBRCxDQUFqRyxFQUZEOztXQUdBLEdBQUEsQ0FBQTtFQVZXOztFQVlaLElBQU8sQ0FBQyxHQUFELEVBQUssTUFBTCxDQUFBO0FBQ1IsUUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQTtJQUFFLElBQUcsSUFBQyxDQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBVCxLQUFtQixDQUF0QjtNQUE2QixHQUFHLENBQUMsSUFBSixDQUFTLCtDQUFULEVBQTdCOztJQUVBLEdBQUcsQ0FBQyxJQUFKLENBQVMsV0FBQSxHQUFjLE1BQXZCO0lBQ0EsR0FBRyxDQUFDLElBQUosQ0FBUyxFQUFUO0lBRUEsTUFBQSxHQUFTO0lBQ1QsTUFBQSxJQUFnQixDQUFDLENBQUMsSUFBRixDQUFPLEtBQVAsRUFBZ0IsQ0FBaEIsRUFBb0IsS0FBcEI7SUFDaEIsTUFBQSxJQUFVLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLElBQVAsRUFBZ0IsQ0FBaEIsRUFBb0IsS0FBcEI7SUFDaEIsTUFBQSxJQUFVLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQVAsRUFBZ0IsQ0FBaEIsRUFBb0IsS0FBcEI7SUFDaEIsTUFBQSxJQUFVLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQVAsRUFBZSxFQUFmLEVBQW9CLElBQXBCO0FBQ2hCO0lBQUEsS0FBQSxxQ0FBQTs7TUFDQyxNQUFBLElBQVUsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFBLENBQUEsQ0FBRyxDQUFBLEdBQUUsQ0FBTCxDQUFBLENBQVAsRUFBa0IsQ0FBbEIsRUFBcUIsS0FBckI7SUFEWDtJQUVBLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxTQUFQLEVBQWtCLEVBQWxCLEVBQXNCLEtBQXRCO0lBQ2hCLElBQUcsSUFBQyxDQUFBLENBQUMsQ0FBQyxLQUFILElBQVksSUFBQyxDQUFBLElBQWhCO01BQTBCLE1BQUEsSUFBVSxJQUFBLEdBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBTyxhQUFQLEVBQXNCLEVBQXRCLEVBQTBCLElBQTFCLEVBQTNDOztBQUVBO0lBQUEsS0FBQSxnREFBQTs7TUFDQyxJQUFHLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBQyxDQUFDLEdBQVAsS0FBYyxDQUFqQjtRQUF3QixHQUFHLENBQUMsSUFBSixDQUFTLE1BQVQsRUFBeEI7O01BQ0EsQ0FBQSxHQUFJO01BQ0osQ0FBQSxJQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFBLEdBQUUsQ0FBSCxDQUFLLENBQUMsUUFBTixDQUFBLENBQVAsRUFBa0MsQ0FBbEMsRUFBc0MsS0FBdEM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFBLEdBQUUsTUFBTSxDQUFDLEVBQVYsQ0FBYSxDQUFDLFFBQWQsQ0FBQSxDQUFQLEVBQWtDLENBQWxDLEVBQXNDLEtBQXRDO01BQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBWCxDQUFBLENBQVAsRUFBaUMsQ0FBakMsRUFBcUMsS0FBckM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sTUFBTSxDQUFDLElBQWQsRUFBaUMsRUFBakMsRUFBc0MsSUFBdEM7TUFDWCxDQUFBLElBQUs7QUFDTDtNQUFBLEtBQUEsd0NBQUE7O1FBQ0MsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUQsQ0FBVixLQUFpQixDQUFDLENBQXJCO1VBQTRCLENBQUEsSUFBSyxTQUFqQzs7UUFDQSxJQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFWLEtBQWlCLENBQUMsQ0FBckI7VUFBNEIsQ0FBQSxJQUFLLFNBQWpDOztRQUNBLElBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQVYsSUFBaUIsQ0FBcEI7VUFDQyxDQUFBLElBQUssQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFBLENBQUEsQ0FBRyxDQUFBLEdBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQWYsQ0FBQSxDQUFBLENBQXFCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQUcsQ0FBQyxDQUFELENBQWQsQ0FBNUIsQ0FBQSxDQUFBLENBQWlELEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUQsQ0FBWCxDQUF0RCxDQUFBLENBQVAsRUFBZ0YsQ0FBaEYsRUFBb0YsS0FBcEYsRUFETjs7TUFIRDtNQU1BLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBQyxDQUFBLENBQUMsQ0FBQyxLQUFILEdBQVMsQ0FBdkIsQ0FBRCxDQUEyQixDQUFDLE9BQTVCLENBQW9DLENBQXBDLENBQVAsRUFBZ0QsQ0FBaEQsRUFBb0QsS0FBcEQ7TUFDWCxHQUFHLENBQUMsSUFBSixDQUFTLENBQVQ7TUFDQSxJQUFHLENBQUEsR0FBSSxJQUFDLENBQUEsQ0FBQyxDQUFDLEdBQVAsS0FBYyxJQUFDLENBQUEsQ0FBQyxDQUFDLEdBQUgsR0FBTyxDQUF4QjtRQUErQixHQUFHLENBQUMsSUFBSixDQUFTLElBQVQsRUFBL0I7O0lBaEJEO1dBaUJBLEdBQUcsQ0FBQyxJQUFKLENBQVMsSUFBVDtFQWpDTTs7QUExR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnLHByaW50LHJhbmdlLHNjYWxleCxzY2FsZXkgfSBmcm9tICcuL2dsb2JhbHMuanMnIFxyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi9wYWdlLmpzJyBcclxuaW1wb3J0IHsgQnV0dG9uLHNwcmVhZCB9IGZyb20gJy4vYnV0dG9uLmpzJyAgXHJcbmltcG9ydCB7IExpc3RhIH0gZnJvbSAnLi9saXN0YS5qcycgXHJcblxyXG5leHBvcnQgY2xhc3MgU3RhbmRpbmdzIGV4dGVuZHMgUGFnZVxyXG5cclxuXHRjb25zdHJ1Y3RvciA6IC0+XHJcblx0XHRzdXBlcigpXHJcblx0XHRAdCA9IGcudG91cm5hbWVudFxyXG5cdFx0QGJ1dHRvbnMuQXJyb3dMZWZ0ICA9IG5ldyBCdXR0b24gJycsICcnLCAoKSA9PiBnLnNldFN0YXRlIGcuQUNUSVZFXHJcblx0XHRAYnV0dG9ucy5BcnJvd1JpZ2h0ID0gbmV3IEJ1dHRvbiAnJywgJycsICgpID0+IGcuc2V0U3RhdGUgZy5UQUJMRVNcclxuXHRcdEBidXR0b25zLnMuYWN0aXZlID0gZmFsc2VcclxuXHJcblx0c2V0TGlzdGEgOiAtPlxyXG5cclxuXHRcdHJoZWFkZXIgPSBfLm1hcCByYW5nZSgxLEB0LnJvdW5kKzEpLCAoaSkgLT4gXCIgI3tpJTEwfSBcIlxyXG5cdFx0cmhlYWRlciA9IHJoZWFkZXIuam9pbiAnJ1xyXG5cdFx0aGVhZGVyID0gXCJcIlxyXG5cdFx0aGVhZGVyICs9ICAgICAgIGcudHh0VCBcIlBvc1wiLCAgICAgICAgICAzLCBSSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIklkXCIsICAgICAgICAgICAzLCBSSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIkVsb1wiLCAgICAgICAgICA0LCBSSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIk5hbWVcIiwgICAgICAgIDI1LCBMRUZUXHJcblx0XHRoZWFkZXIgKz0gJycgICsgZy50eHRUIHJoZWFkZXIsIDMqQHJvdW5kLCBMRUZUIFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCBcIlF1YWxpdHlcIiwgICAgICA4LCBSSUdIVFxyXG5cclxuXHRcdEBwbGF5ZXJzQnlQZXJmb3JtYW5jZSA9IF8uY2xvbmUgQHQucGVyc29ucy5zbGljZSAwLGcuTlxyXG5cdFx0QHBsYXllcnNCeVBlcmZvcm1hbmNlID0gXy5zb3J0QnkgQHBsYXllcnNCeVBlcmZvcm1hbmNlLCAocCkgPT4gLShwLmNoYW5nZShAdC5yb3VuZCsxKSlcclxuXHJcblx0XHRwcmludCAocC5jaGFuZ2UoQHQucm91bmQpLnRvRml4ZWQoMSkgZm9yIHAgaW4gQHBsYXllcnNCeVBlcmZvcm1hbmNlKS5qb2luICcgJ1xyXG5cclxuXHRcdEBsaXN0YSA9IG5ldyBMaXN0YSBAcGxheWVyc0J5UGVyZm9ybWFuY2UsIGhlYWRlciwgQGJ1dHRvbnMsIChwLGluZGV4LHBvcykgPT4gIyByZXR1cm5lcmEgc3Ryw6RuZ2VuIHNvbSBza2Egc2tyaXZhcyB1dC4gRGVzc3V0b20gcml0YXMgbGlnaHRidWxicyBow6RyLlxyXG5cdFx0XHRAeV9idWxiID0gKDUgKyBpbmRleCkgKiBnLlpPT01bZy5zdGF0ZV0gXHJcblx0XHRcdHRleHRBbGlnbiBMRUZUXHJcblx0XHRcdGZpbGwgJ2JsYWNrJyBcclxuXHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0cyArPSAgICAgICBnLnR4dFQgKDErcG9zKS50b1N0cmluZygpLCAgICAgMywgIFJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUICgxK3AuaWQpLnRvU3RyaW5nKCksICAgIDMsICBSSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBwLmVsby50b1N0cmluZygpLCAgICAgICA0LCAgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcC5uYW1lLCAgICAgICAgICAgICAgICAyNSwgIExFRlRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgJycsICAgICAgMyAqIChAdC5yb3VuZC0xKSwgIENFTlRFUlxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBwLmNoYW5nZShAdC5yb3VuZCkudG9GaXhlZCgzKSwgNywgUklHSFRcclxuXHJcblx0XHRcdGZvciByIGluIHJhbmdlIGcudG91cm5hbWVudC5yb3VuZCAtIDEgIy0gMVxyXG5cdFx0XHRcdHggPSBnLlpPT01bZy5zdGF0ZV0gKiAoMjQuMiArIDEuOCpyKVxyXG5cdFx0XHRcdCMgaWYgcC5vcHBbcl0gPT0gLTEgdGhlbiBAdHh0IFwiUFwiLCB4LCBAeSsxLCAgQ0VOVEVSLCAnYmxhY2snXHJcblx0XHRcdFx0IyBlbHNlIGlmIHAub3BwW3JdID09IGcuTiB0aGVuIEB0eHQgXCJCWUVcIiwgeCwgQHkrMSwgIENFTlRFUiwgJ2JsYWNrJ1xyXG5cdFx0XHRcdCMgcHJpbnQgJ3l5eScsXCI8I3twLm9wcFtyXX0+XCJcclxuXHRcdFx0XHRAbGlnaHRidWxiIHAuaWQsIHAuY29sW3JdLCB4LCBAeV9idWxiLCBwLnJlcy5zbGljZShyLHIrMSksIHAub3BwW3JdXHJcblx0XHRcdHNcclxuXHRcdEBsaXN0YS5wYWludFllbGxvd1JvdyA9IGZhbHNlXHJcblx0XHRzcHJlYWQgQGJ1dHRvbnMsIDEwLCBAeSwgQGhcclxuXHJcblx0bW91c2VNb3ZlZCA6ID0+XHJcblx0XHRyID0gcm91bmQgKChtb3VzZVggLyBnLlpPT01bZy5zdGF0ZV0gLSAyNC4yKSAvIDEuOClcclxuXHRcdGl5ID0gQGxpc3RhLm9mZnNldCArIHJvdW5kIG1vdXNlWSAvIGcuWk9PTVtnLnN0YXRlXSAtIDVcclxuXHRcdGlmIDAgPD0gaXkgPCBAcGxheWVyc0J5UGVyZm9ybWFuY2UubGVuZ3RoIGFuZCAwIDw9IHIgPCBnLnRvdXJuYW1lbnQucm91bmQgLSAxXHJcblx0XHRcdGEgPSBpeVxyXG5cdFx0XHRwYSA9IEBwbGF5ZXJzQnlQZXJmb3JtYW5jZVthXVxyXG5cdFx0XHRiID0gcGEub3BwW3JdXHJcblx0XHRcdGlmIGIgPT0gZy5CWUUgICB0aGVuIGcuaGVscCA9IFwiI3twYS5lbG99ICN7cGEubmFtZX0gaGFzIGEgYnllID0+IGNoZyA9ICN7Zy5LLzJ9XCJcclxuXHRcdFx0aWYgYiA9PSBnLlBBVVNFIHRoZW4gZy5oZWxwID0gXCIje3BhLmVsb30gI3twYS5uYW1lfSBoYXMgYSBwYXVzZSA9PiBjaGcgPSAwXCJcclxuXHRcdFx0aWYgYiA+PSAwXHRcdFx0XHRcclxuXHRcdFx0XHRwYiA9IEB0LnBlcnNvbnNbYl1cclxuXHRcdFx0XHRkaWZmID0gcGEuZWxvIC0gcGIuZWxvXHJcblx0XHRcdFx0UEQgPSBnLksgKiBnLnNjb3JpbmdQcm9iYWJpbGl0eSBkaWZmXHJcblx0XHRcdFx0Y2hnID0gcGEuY2FsY1JvdW5kIHJcclxuXHJcblx0XHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0XHRzICs9ICAgICAgIGcudHh0VCAnJywgICAgICAgICAgICAgICAgICAgICAgMywgIFJJR0hUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgKDErcGIuaWQpLnRvU3RyaW5nKCksICAgIDMsICBSSUdIVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBiLmVsby50b1N0cmluZygpLCAgICAgIDQsICBSSUdIVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBiLm5hbWUsICAgICAgICAgICAgICAgIDI1LCAgTEVGVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUICcnLCAgICAgICAzICogKEB0LnJvdW5kLTEpLCAgTEVGVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUIGNoZy50b0ZpeGVkKDMpLCAgICAgICAgICA3LCAgUklHSFRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCAtZGlmZiwgICAgICAgICAgICAgICAgICAgNiwgIFJJR0hUXHJcblx0XHRcdFx0Zy5oZWxwID0gc1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRnLmhlbHAgPSBcIlwiXHJcblxyXG5cdG1vdXNlV2hlZWwgICA6IChldmVudCApLT4gQGxpc3RhLm1vdXNlV2hlZWwgZXZlbnRcclxuXHRtb3VzZVByZXNzZWQgOiAoZXZlbnQpIC0+IEBsaXN0YS5tb3VzZVByZXNzZWQgZXZlbnRcclxuXHRrZXlQcmVzc2VkICAgOiAoZXZlbnQpIC0+IEBidXR0b25zW2tleV0uY2xpY2soKVxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0QHNob3dIZWFkZXIgQHQucm91bmQtMVxyXG5cdFx0QGxpc3RhLmRyYXcoKVxyXG5cdFx0Zm9yIGtleSxidXR0b24gb2YgQGJ1dHRvbnNcclxuXHRcdFx0YnV0dG9uLmRyYXcoKVxyXG5cdFx0dGV4dEFsaWduIExFRlRcclxuXHRcdHRleHQgZy5oZWxwLCAxMCwgMypnLlpPT01bZy5zdGF0ZV1cclxuXHJcblx0c2hvdyA6IChzLHgseSxiZyxmZykgLT5cclxuXHRcdGZpbGwgYmdcclxuXHRcdHJlY3QgeCwgeSwgMS42ICogZy5aT09NW2cuc3RhdGVdLCAwLjkgKiBnLlpPT01bZy5zdGF0ZV1cclxuXHRcdGZpbGwgZmdcclxuXHRcdEB0eHQgcywgeCwgeSsxLCAgQ0VOVEVSXHJcblxyXG5cdGxpZ2h0YnVsYiA6IChpZCwgY29sb3IsIHgsIHksIHJlc3VsdCwgb3Bwb25lbnQpIC0+XHJcblx0XHQjIHByaW50IFwibGlnaHRidWxiIGlkOiN7aWR9IGNvbG9yOiN7Y29sb3J9IHg6I3t4fSB5I3t5fSByZXN1bHQ6I3tyZXN1bHR9IG9wcG9uZW50OiN7b3Bwb25lbnR9XCJcclxuXHRcdHB1c2goKVxyXG5cdFx0cmVjdE1vZGUgIENFTlRFUlxyXG5cdFx0cyA9IDEgKyBvcHBvbmVudFxyXG5cdFx0aWYgb3Bwb25lbnQgPT0gZy5QQVVTRSB0aGVuIEBzaG93IFwiIFAgXCIseCx5LFwiZ3JheVwiLCd5ZWxsb3cnXHJcblx0XHRpZiBvcHBvbmVudCA9PSBnLkJZRSAgIHRoZW4gQHNob3cgXCJCWUVcIix4LHksXCJncmVlblwiLCd5ZWxsb3cnXHJcblx0XHRpZiBvcHBvbmVudCA+PSAwXHJcblx0XHRcdHJlc3VsdCA9ICcwMTInLmluZGV4T2YgcmVzdWx0XHJcblx0XHRcdEBzaG93IDErb3Bwb25lbnQsIHgsIHksICdyZWQgZ3JheSBncmVlbicuc3BsaXQoJyAnKVtyZXN1bHRdLCB7YjonYmxhY2snLCAnICc6J3llbGxvdycsIHc6J3doaXRlJ31bY29sb3JdXHJcblx0XHRwb3AoKVxyXG5cclxuXHRtYWtlIDogKHJlcyxoZWFkZXIpIC0+XHJcblx0XHRpZiBAdC5wYWlycy5sZW5ndGggPT0gMCB0aGVuIHJlcy5wdXNoIFwiVGhpcyBST1VORCBjYW4ndCBiZSBwYWlyZWQhIChUb28gbWFueSByb3VuZHMpXCJcclxuXHJcblx0XHRyZXMucHVzaCBcIlNUQU5ESU5HU1wiICsgaGVhZGVyXHJcblx0XHRyZXMucHVzaCBcIlwiXHJcblxyXG5cdFx0aGVhZGVyID0gXCJcIlxyXG5cdFx0aGVhZGVyICs9ICAgICAgIGcudHh0VCBcIlBvc1wiLCAgIDMsICBSSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCAnSWQnLCAgICAzLCAgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJFbG8wXCIsICA0LCAgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJOYW1lXCIsIDI1LCAgTEVGVFxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2UgQHQucm91bmRcclxuXHRcdFx0aGVhZGVyICs9IGcudHh0VCBcIiN7cisxfVwiLCAgNiwgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJRdWFsaXR5XCIsIDEwLCBSSUdIVFxyXG5cdFx0aWYgQHQucm91bmQgPD0gQGV4cGwgdGhlbiBoZWFkZXIgKz0gJyAgJyArIGcudHh0VCBcIkV4cGxhbmF0aW9uXCIsIDEyLCBMRUZUXHJcblx0XHRcclxuXHRcdGZvciBwZXJzb24saSBpbiBAcGxheWVyc0J5UGVyZm9ybWFuY2VcclxuXHRcdFx0aWYgaSAlIEB0LnBwcCA9PSAwIHRoZW4gcmVzLnB1c2ggaGVhZGVyXHJcblx0XHRcdHMgPSBcIlwiXHJcblx0XHRcdHMgKz0gICAgICAgZy50eHRUICgxK2kpLnRvU3RyaW5nKCksICAgICAgICAgIDMsICBSSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCAoMStwZXJzb24uaWQpLnRvU3RyaW5nKCksICAzLCAgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcGVyc29uLmVsby50b1N0cmluZygpLCAgICA0LCAgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcGVyc29uLm5hbWUsICAgICAgICAgICAgICAyNSwgIExFRlRcclxuXHRcdFx0cyArPSAnICdcclxuXHRcdFx0Zm9yIHIgaW4gcmFuZ2UgQHQucm91bmRcclxuXHRcdFx0XHRpZiBwZXJzb24ub3BwW3JdID09IC0yIHRoZW4gcyArPSAnICAgIFAgJ1xyXG5cdFx0XHRcdGlmIHBlcnNvbi5vcHBbcl0gPT0gLTEgdGhlbiBzICs9ICcgICBCWUUnXHJcblx0XHRcdFx0aWYgcGVyc29uLm9wcFtyXSA+PSAwXHJcblx0XHRcdFx0XHRzICs9IGcudHh0VCBcIiN7MStwZXJzb24ub3BwW3JdfSN7Zy5SSU5HU1twZXJzb24uY29sW3JdWzBdXX0je1wiMMK9MVwiW3BlcnNvbi5yZXNbcl1dfVwiLCA2LCAgUklHSFRcdFx0XHRcclxuXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUIChwZXJzb24uY2hhbmdlKEB0LnJvdW5kKzEpKS50b0ZpeGVkKDYpLCAgOSwgIFJJR0hUXHJcblx0XHRcdHJlcy5wdXNoIHMgXHJcblx0XHRcdGlmIGkgJSBAdC5wcHAgPT0gQHQucHBwLTEgdGhlbiByZXMucHVzaCBcIlxcZlwiXHJcblx0XHRyZXMucHVzaCBcIlxcZlwiIl19
//# sourceURL=c:\github\ELO-Pairings\coffee\page_standings.coffee