// Generated by CoffeeScript 2.7.0
var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  g,
  print,
  range,
  scalex,
  scaley
} from './globals.js';

import {
  Page
} from './page.js';

import {
  Button,
  spread
} from './button.js';

import {
  Lista
} from './lista.js';

export var Standings = class Standings extends Page {
  constructor() {
    super();
    this.mouseMoved = this.mouseMoved.bind(this);
    this.t = g.tournament;
    this.buttons.ArrowLeft = new Button('', '', () => {
      return g.setState(g.ACTIVE);
    });
    this.buttons.ArrowRight = new Button('', '', () => {
      return g.setState(g.TABLES);
    });
    this.buttons.s.active = false;
  }

  setLista() {
    var header, rheader;
    rheader = _.map(range(1, this.t.round + 1), function(i) {
      return ` ${i % 10} `;
    });
    rheader = rheader.join('');
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT("Id", 3, RIGHT);
    header += ' ' + g.txtT("Elo", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    header += '' + g.txtT(rheader, 3 * this.round, LEFT);
    header += ' ' + g.txtT("Quality", 8, RIGHT);
    header += ' ' + g.txtT("Score", 5, RIGHT);
    this.playersByPerformance = _.clone(this.t.playersByID.slice(0, g.N));
    this.playersByPerformance = _.sortBy(this.playersByPerformance, (p) => {
      return -(p.change(this.t.round + 1));
    });
    this.lista = new Lista(this.playersByPerformance, header, this.buttons, (p, index, pos) => { // returnera strängen som ska skrivas ut. Dessutom ritas lightbulbs här.
      var j, len, r, ref, s, x;
      this.y_bulb = (5 + index) * g.ZOOM[g.state];
      textAlign(LEFT);
      fill('black');
      s = "";
      s += g.txtT((1 + pos).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + p.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(p.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(p.name, 25, LEFT);
      s += ' ' + g.txtT('', 3 * (this.t.round - 1), CENTER);
      if (g.FACTOR === 0) {
        s += ' ' + g.txtT(p.change(this.t.round).toFixed(3), 7, RIGHT);
      }
      if (g.FACTOR !== 0) {
        s += ' ' + g.txtT(p.change(this.t.round).toFixed(1), 7, RIGHT);
      }
      s += ' ' + g.txtT(p.score().toString(), 5, RIGHT);
      ref = range(g.tournament.round - 1);
      //- 1
      for (j = 0, len = ref.length; j < len; j++) {
        r = ref[j];
        x = g.ZOOM[g.state] * (24.2 + 1.8 * r);
        this.lightbulb(p.id, p.col[r], x, this.y_bulb, p.res.slice(r, r + 1), p.opp[r]);
      }
      return s;
    });
    this.lista.paintYellowRow = false;
    return spread(this.buttons, 10, this.y, this.h);
  }

  mouseMoved() {
    var b, chg, diff, iy, pa, pb, r, s;
    boundMethodCheck(this, Standings);
    r = round((mouseX / g.ZOOM[g.state] - 24.2) / 1.8);
    iy = this.lista.offset + round(mouseY / g.ZOOM[g.state] - 5);
    if ((0 <= iy && iy < this.playersByPerformance.length) && (0 <= r && r < g.tournament.round - 1)) {
      // a = iy
      pa = this.playersByPerformance[iy];
      b = pa.opp[r];
      if (b === g.BYE) {
        g.help = `${pa.elo} ${pa.name} has a bye => chg = ${g.K / 2}`;
      }
      if (b === g.PAUSE) {
        g.help = `${pa.elo} ${pa.name} has a pause => chg = 0`;
      }
      if (b >= 0) {
        pb = this.t.playersByID[b];
        chg = pa.calcRound(r);
        s = "";
        s += g.txtT('', 3, RIGHT);
        s += ' ' + g.txtT((1 + pb.id).toString(), 3, RIGHT);
        s += ' ' + g.txtT(pb.elo.toString(), 4, RIGHT);
        s += ' ' + g.txtT(pb.name, 25, LEFT);
        s += ' ' + g.txtT('', 3 * (this.t.round - 1), LEFT);
        if (g.FACTOR === 0) {
          diff = pa.elo - pb.elo;
          s += ' ' + g.txtT(chg.toFixed(3), 7, RIGHT);
          s += ` = ${g.K}*(${pa.res[r] / 2}-p(${diff})) p(${diff})=${g.F(diff).toFixed(3)}`;
        } else {
          s += ' ' + g.txtT(chg.toFixed(1), 7, RIGHT);
          // if pa.res[r] == '1' then s += " = 0.5 * (#{g.OFFSET} + #{g.txtT pb.elo, 7, RIGHT})"
          // if pa.res[r] == '2' then s += " = #{g.OFFSET} + #{g.txtT pb.elo, 7, RIGHT}"
          if (pa.res[r] === '1') {
            s += ` = 0.5 * ${g.txtT(pb.elo, 7, RIGHT)}`;
          }
          if (pa.res[r] === '2') {
            s += ` = ${g.txtT(pb.elo, 7, RIGHT)}`;
          }
        }
        return g.help = s;
      }
    } else {
      return g.help = "";
    }
  }

  mouseWheel(event) {
    return this.lista.mouseWheel(event);
  }

  mousePressed(event) {
    return this.lista.mousePressed(event);
  }

  keyPressed(event) {
    return this.buttons[key].click();
  }

  draw() {
    var button, key, ref;
    fill('white');
    this.showHeader(this.t.round - 1);
    this.lista.draw();
    ref = this.buttons;
    for (key in ref) {
      button = ref[key];
      button.draw();
    }
    textAlign(LEFT);
    return text(g.help, 10, 3 * g.ZOOM[g.state]);
  }

  show(s, x, y, bg, fg) {
    fill(bg);
    rect(x, y, 1.6 * g.ZOOM[g.state], 0.9 * g.ZOOM[g.state]);
    fill(fg);
    return this.txt(s, x, y + 1, CENTER);
  }

  lightbulb(id, color, x, y, result, opponent) {
    var s;
    push();
    rectMode(CENTER);
    s = 1 + opponent;
    if (opponent === g.PAUSE) {
      this.show(" P ", x, y, "gray", 'yellow');
    }
    if (opponent === g.BYE) {
      this.show("BYE", x, y, "green", 'yellow');
    }
    if (opponent >= 0) {
      result = '012'.indexOf(result);
      this.show(1 + opponent, x, y, 'red gray green'.split(' ')[result], {
        b: 'black',
        ' ': 'yellow',
        w: 'white'
      }[color]);
    }
    return pop();
  }

  make(res, header) {
    var i, j, k, l, len, len1, len2, player, r, ref, ref1, ref2, s;
    if (this.t.pairs.length === 0) {
      res.push("This ROUND can't be paired! (Too many rounds)");
    }
    res.push("STANDINGS" + header);
    res.push("");
    header = "";
    header += g.txtT("Pos", 3, RIGHT);
    header += ' ' + g.txtT('Id', 3, RIGHT);
    header += ' ' + g.txtT("Elo0", 4, RIGHT);
    header += ' ' + g.txtT("Name", 25, LEFT);
    ref = range(this.t.round);
    for (j = 0, len = ref.length; j < len; j++) {
      r = ref[j];
      header += g.txtT(`${r + 1}`, 6, RIGHT);
    }
    header += ' ' + g.txtT("Quality", 11, RIGHT);
    ref1 = this.playersByPerformance;
    for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
      player = ref1[i];
      if (i % this.t.ppp === 0) {
        res.push(header);
      }
      s = "";
      s += g.txtT((1 + i).toString(), 3, RIGHT);
      s += ' ' + g.txtT((1 + player.id).toString(), 3, RIGHT);
      s += ' ' + g.txtT(player.elo.toString(), 4, RIGHT);
      s += ' ' + g.txtT(player.name, 25, LEFT);
      s += ' ';
      ref2 = range(this.t.round);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        r = ref2[l];
        if (player.opp[r] === -2) {
          s += '    P ';
        }
        if (player.opp[r] === -1) {
          s += '   BYE';
        }
        if (player.opp[r] >= 0) {
          s += g.txtT(`${1 + player.opp[r]}${g.RINGS[player.col[r][0]]}${"0½1"[player.res[r]]}`, 6, RIGHT);
        }
      }
      s += ' ' + g.txtT((player.change(this.t.round + 1)).toFixed(6), 10, RIGHT);
      res.push(s);
      if (i % this.t.ppp === this.t.ppp - 1) {
        res.push("\f");
      }
    }
    return res.push("\f");
  }

};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZV9zdGFuZGluZ3MuanMiLCJzb3VyY2VSb290IjoiLi5cXCIsInNvdXJjZXMiOlsiY29mZmVlXFxwYWdlX3N0YW5kaW5ncy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsT0FBQTtFQUFTLENBQVQ7RUFBVyxLQUFYO0VBQWlCLEtBQWpCO0VBQXVCLE1BQXZCO0VBQThCLE1BQTlCO0NBQUEsTUFBQTs7QUFDQSxPQUFBO0VBQVMsSUFBVDtDQUFBLE1BQUE7O0FBQ0EsT0FBQTtFQUFTLE1BQVQ7RUFBZ0IsTUFBaEI7Q0FBQSxNQUFBOztBQUNBLE9BQUE7RUFBUyxLQUFUO0NBQUEsTUFBQTs7QUFFQSxPQUFBLElBQWEsWUFBTixNQUFBLFVBQUEsUUFBd0IsS0FBeEI7RUFFTixXQUFjLENBQUEsQ0FBQTs7UUE0Q2QsQ0FBQSxpQkFBQSxDQUFBO0lBMUNDLElBQUMsQ0FBQSxDQUFELEdBQUssQ0FBQyxDQUFDO0lBQ1AsSUFBQyxDQUFBLE9BQU8sQ0FBQyxTQUFULEdBQXNCLElBQUksTUFBSixDQUFXLEVBQVgsRUFBZSxFQUFmLEVBQW1CLENBQUEsQ0FBQSxHQUFBO2FBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxDQUFDLENBQUMsTUFBYjtJQUFOLENBQW5CO0lBQ3RCLElBQUMsQ0FBQSxPQUFPLENBQUMsVUFBVCxHQUFzQixJQUFJLE1BQUosQ0FBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixDQUFBLENBQUEsR0FBQTthQUFNLENBQUMsQ0FBQyxRQUFGLENBQVcsQ0FBQyxDQUFDLE1BQWI7SUFBTixDQUFuQjtJQUN0QixJQUFDLENBQUEsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFYLEdBQW9CO0VBTFA7O0VBT2QsUUFBVyxDQUFBLENBQUE7QUFFWixRQUFBLE1BQUEsRUFBQTtJQUFFLE9BQUEsR0FBVSxDQUFDLENBQUMsR0FBRixDQUFNLEtBQUEsQ0FBTSxDQUFOLEVBQVEsSUFBQyxDQUFBLENBQUMsQ0FBQyxLQUFILEdBQVMsQ0FBakIsQ0FBTixFQUEyQixRQUFBLENBQUMsQ0FBRCxDQUFBO2FBQU8sRUFBQSxDQUFBLENBQUksQ0FBQSxHQUFFLEVBQU4sRUFBQTtJQUFQLENBQTNCO0lBQ1YsT0FBQSxHQUFVLE9BQU8sQ0FBQyxJQUFSLENBQWEsRUFBYjtJQUNWLE1BQUEsR0FBUztJQUNULE1BQUEsSUFBZ0IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFQLEVBQXVCLENBQXZCLEVBQTBCLEtBQTFCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFQLEVBQXVCLENBQXZCLEVBQTBCLEtBQTFCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFQLEVBQXVCLENBQXZCLEVBQTBCLEtBQTFCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQLEVBQXNCLEVBQXRCLEVBQTBCLElBQTFCO0lBQ2hCLE1BQUEsSUFBVSxFQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFQLEVBQWdCLENBQUEsR0FBRSxJQUFDLENBQUEsS0FBbkIsRUFBMEIsSUFBMUI7SUFDaEIsTUFBQSxJQUFVLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLFNBQVAsRUFBdUIsQ0FBdkIsRUFBMEIsS0FBMUI7SUFDaEIsTUFBQSxJQUFVLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLE9BQVAsRUFBdUIsQ0FBdkIsRUFBMEIsS0FBMUI7SUFFaEIsSUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsQ0FBQyxLQUFGLENBQVEsSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBZixDQUFxQixDQUFyQixFQUF1QixDQUFDLENBQUMsQ0FBekIsQ0FBUjtJQUN4QixJQUFDLENBQUEsb0JBQUQsR0FBd0IsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFDLENBQUEsb0JBQVYsRUFBZ0MsQ0FBQyxDQUFELENBQUEsR0FBQTthQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQWxCLENBQUQ7SUFBUixDQUFoQztJQUV4QixJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSixDQUFVLElBQUMsQ0FBQSxvQkFBWCxFQUFpQyxNQUFqQyxFQUF5QyxJQUFDLENBQUEsT0FBMUMsRUFBbUQsQ0FBQyxDQUFELEVBQUcsS0FBSCxFQUFTLEdBQVQsQ0FBQSxHQUFBLEVBQUE7QUFDOUQsVUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBO01BQUcsSUFBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLENBQUEsR0FBSSxLQUFMLENBQUEsR0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFIO01BQzlCLFNBQUEsQ0FBVSxJQUFWO01BQ0EsSUFBQSxDQUFLLE9BQUw7TUFDQSxDQUFBLEdBQUk7TUFDSixDQUFBLElBQVcsQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUEsR0FBRSxHQUFILENBQU8sQ0FBQyxRQUFSLENBQUEsQ0FBUCxFQUErQixDQUEvQixFQUFtQyxLQUFuQztNQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUEsR0FBRSxDQUFDLENBQUMsRUFBTCxDQUFRLENBQUMsUUFBVCxDQUFBLENBQVAsRUFBK0IsQ0FBL0IsRUFBbUMsS0FBbkM7TUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFOLENBQUEsQ0FBUCxFQUErQixDQUEvQixFQUFtQyxLQUFuQztNQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUMsSUFBVCxFQUE4QixFQUE5QixFQUFtQyxJQUFuQztNQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxFQUFQLEVBQWdCLENBQUEsR0FBSSxDQUFDLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQVYsQ0FBcEIsRUFBbUMsTUFBbkM7TUFDWCxJQUFHLENBQUMsQ0FBQyxNQUFGLEtBQVksQ0FBZjtRQUFzQixDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFDLENBQUEsQ0FBQyxDQUFDLEtBQVosQ0FBa0IsQ0FBQyxPQUFuQixDQUEyQixDQUEzQixDQUFQLEVBQXNDLENBQXRDLEVBQXlDLEtBQXpDLEVBQWpDOztNQUNBLElBQUcsQ0FBQyxDQUFDLE1BQUYsS0FBWSxDQUFmO1FBQXNCLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBWixDQUFrQixDQUFDLE9BQW5CLENBQTJCLENBQTNCLENBQVAsRUFBc0MsQ0FBdEMsRUFBeUMsS0FBekMsRUFBakM7O01BQ0EsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxLQUFGLENBQUEsQ0FBUyxDQUFDLFFBQVYsQ0FBQSxDQUFQLEVBQStCLENBQS9CLEVBQW1DLEtBQW5DO0FBRVg7O01BQUEsS0FBQSxxQ0FBQTs7UUFDQyxDQUFBLEdBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSCxDQUFOLEdBQWtCLENBQUMsSUFBQSxHQUFPLEdBQUEsR0FBSSxDQUFaO1FBQ3RCLElBQUMsQ0FBQSxTQUFELENBQVcsQ0FBQyxDQUFDLEVBQWIsRUFBaUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQXRCLEVBQTJCLENBQTNCLEVBQThCLElBQUMsQ0FBQSxNQUEvQixFQUF1QyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQU4sQ0FBWSxDQUFaLEVBQWMsQ0FBQSxHQUFFLENBQWhCLENBQXZDLEVBQTJELENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFoRTtNQUZEO2FBR0E7SUFqQjJELENBQW5EO0lBa0JULElBQUMsQ0FBQSxLQUFLLENBQUMsY0FBUCxHQUF3QjtXQUN4QixNQUFBLENBQU8sSUFBQyxDQUFBLE9BQVIsRUFBaUIsRUFBakIsRUFBcUIsSUFBQyxDQUFBLENBQXRCLEVBQXlCLElBQUMsQ0FBQSxDQUExQjtFQW5DVTs7RUFxQ1gsVUFBYSxDQUFBLENBQUE7QUFDZCxRQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQTsyQkEvQ2E7SUErQ1gsQ0FBQSxHQUFJLEtBQUEsQ0FBTyxDQUFDLE1BQUEsR0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFILENBQWYsR0FBMkIsSUFBNUIsQ0FBQSxHQUFvQyxHQUEzQztJQUNKLEVBQUEsR0FBSyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0IsS0FBQSxDQUFNLE1BQUEsR0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFILENBQWYsR0FBMkIsQ0FBakM7SUFDckIsSUFBRyxDQUFBLENBQUEsSUFBSyxFQUFMLElBQUssRUFBTCxHQUFVLElBQUMsQ0FBQSxvQkFBb0IsQ0FBQyxNQUFoQyxDQUFBLElBQTJDLENBQUEsQ0FBQSxJQUFLLENBQUwsSUFBSyxDQUFMLEdBQVMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFiLEdBQXFCLENBQTlCLENBQTlDOztNQUVDLEVBQUEsR0FBSyxJQUFDLENBQUEsb0JBQW9CLENBQUMsRUFBRDtNQUMxQixDQUFBLEdBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFEO01BQ1YsSUFBRyxDQUFBLEtBQUssQ0FBQyxDQUFDLEdBQVY7UUFBcUIsQ0FBQyxDQUFDLElBQUYsR0FBUyxDQUFBLENBQUEsQ0FBRyxFQUFFLENBQUMsR0FBTixFQUFBLENBQUEsQ0FBYSxFQUFFLENBQUMsSUFBaEIsQ0FBQSxvQkFBQSxDQUFBLENBQTJDLENBQUMsQ0FBQyxDQUFGLEdBQUksQ0FBL0MsQ0FBQSxFQUE5Qjs7TUFDQSxJQUFHLENBQUEsS0FBSyxDQUFDLENBQUMsS0FBVjtRQUFxQixDQUFDLENBQUMsSUFBRixHQUFTLENBQUEsQ0FBQSxDQUFHLEVBQUUsQ0FBQyxHQUFOLEVBQUEsQ0FBQSxDQUFhLEVBQUUsQ0FBQyxJQUFoQixDQUFBLHVCQUFBLEVBQTlCOztNQUNBLElBQUcsQ0FBQSxJQUFLLENBQVI7UUFDQyxFQUFBLEdBQUssSUFBQyxDQUFBLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBRDtRQUNuQixHQUFBLEdBQU0sRUFBRSxDQUFDLFNBQUgsQ0FBYSxDQUFiO1FBRU4sQ0FBQSxHQUFJO1FBQ0osQ0FBQSxJQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBUCxFQUFnQyxDQUFoQyxFQUFvQyxLQUFwQztRQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxDQUFDLENBQUEsR0FBRSxFQUFFLENBQUMsRUFBTixDQUFTLENBQUMsUUFBVixDQUFBLENBQVAsRUFBZ0MsQ0FBaEMsRUFBb0MsS0FBcEM7UUFDWCxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFQLENBQUEsQ0FBUCxFQUFnQyxDQUFoQyxFQUFvQyxLQUFwQztRQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxFQUFFLENBQUMsSUFBVixFQUErQixFQUEvQixFQUFvQyxJQUFwQztRQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxFQUFQLEVBQWlCLENBQUEsR0FBSSxDQUFDLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQVYsQ0FBckIsRUFBb0MsSUFBcEM7UUFDWCxJQUFHLENBQUMsQ0FBQyxNQUFGLEtBQVksQ0FBZjtVQUNDLElBQUEsR0FBTyxFQUFFLENBQUMsR0FBSCxHQUFTLEVBQUUsQ0FBQztVQUNuQixDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFaLENBQVAsRUFBdUIsQ0FBdkIsRUFBMkIsS0FBM0I7VUFDWCxDQUFBLElBQUssQ0FBQSxHQUFBLENBQUEsQ0FBTSxDQUFDLENBQUMsQ0FBUixDQUFBLEVBQUEsQ0FBQSxDQUFjLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFOLEdBQVUsQ0FBeEIsQ0FBQSxHQUFBLENBQUEsQ0FBK0IsSUFBL0IsQ0FBQSxLQUFBLENBQUEsQ0FBMkMsSUFBM0MsQ0FBQSxFQUFBLENBQUEsQ0FBb0QsQ0FBQyxDQUFDLENBQUYsQ0FBSSxJQUFKLENBQVMsQ0FBQyxPQUFWLENBQWtCLENBQWxCLENBQXBELENBQUEsRUFITjtTQUFBLE1BQUE7VUFLQyxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sR0FBRyxDQUFDLE9BQUosQ0FBWSxDQUFaLENBQVAsRUFBdUIsQ0FBdkIsRUFBMkIsS0FBM0IsRUFBaEI7OztVQUdLLElBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQU4sS0FBYSxHQUFoQjtZQUF5QixDQUFBLElBQUssQ0FBQSxTQUFBLENBQUEsQ0FBWSxDQUFDLENBQUMsSUFBRixDQUFPLEVBQUUsQ0FBQyxHQUFWLEVBQWUsQ0FBZixFQUFrQixLQUFsQixDQUFaLENBQUEsRUFBOUI7O1VBQ0EsSUFBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUQsQ0FBTixLQUFhLEdBQWhCO1lBQXlCLENBQUEsSUFBSyxDQUFBLEdBQUEsQ0FBQSxDQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBRSxDQUFDLEdBQVYsRUFBZSxDQUFmLEVBQWtCLEtBQWxCLENBQU4sQ0FBQSxFQUE5QjtXQVREOztlQVdBLENBQUMsQ0FBQyxJQUFGLEdBQVMsRUFyQlY7T0FORDtLQUFBLE1BQUE7YUE2QkMsQ0FBQyxDQUFDLElBQUYsR0FBUyxHQTdCVjs7RUFIWTs7RUFrQ2IsVUFBZSxDQUFDLEtBQUQsQ0FBQTtXQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxDQUFrQixLQUFsQjtFQUFYOztFQUNmLFlBQWUsQ0FBQyxLQUFELENBQUE7V0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLFlBQVAsQ0FBb0IsS0FBcEI7RUFBWDs7RUFDZixVQUFlLENBQUMsS0FBRCxDQUFBO1dBQVcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQUFELENBQUssQ0FBQyxLQUFkLENBQUE7RUFBWDs7RUFFZixJQUFPLENBQUEsQ0FBQTtBQUNSLFFBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQTtJQUFFLElBQUEsQ0FBSyxPQUFMO0lBQ0EsSUFBQyxDQUFBLFVBQUQsQ0FBWSxJQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUgsR0FBUyxDQUFyQjtJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBUCxDQUFBO0FBQ0E7SUFBQSxLQUFBLFVBQUE7O01BQ0MsTUFBTSxDQUFDLElBQVAsQ0FBQTtJQUREO0lBRUEsU0FBQSxDQUFVLElBQVY7V0FDQSxJQUFBLENBQUssQ0FBQyxDQUFDLElBQVAsRUFBYSxFQUFiLEVBQWlCLENBQUEsR0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFILENBQXpCO0VBUE07O0VBU1AsSUFBTyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLEVBQVAsRUFBVSxFQUFWLENBQUE7SUFDTixJQUFBLENBQUssRUFBTDtJQUNBLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFILENBQXZCLEVBQWtDLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFILENBQTlDO0lBQ0EsSUFBQSxDQUFLLEVBQUw7V0FDQSxJQUFDLENBQUEsR0FBRCxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBQSxHQUFFLENBQWIsRUFBaUIsTUFBakI7RUFKTTs7RUFNUCxTQUFZLENBQUMsRUFBRCxFQUFLLEtBQUwsRUFBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixNQUFsQixFQUEwQixRQUExQixDQUFBO0FBQ2IsUUFBQTtJQUFFLElBQUEsQ0FBQTtJQUNBLFFBQUEsQ0FBVSxNQUFWO0lBQ0EsQ0FBQSxHQUFJLENBQUEsR0FBSTtJQUNSLElBQUcsUUFBQSxLQUFZLENBQUMsQ0FBQyxLQUFqQjtNQUE0QixJQUFDLENBQUEsSUFBRCxDQUFNLEtBQU4sRUFBWSxDQUFaLEVBQWMsQ0FBZCxFQUFnQixNQUFoQixFQUF1QixRQUF2QixFQUE1Qjs7SUFDQSxJQUFHLFFBQUEsS0FBWSxDQUFDLENBQUMsR0FBakI7TUFBNEIsSUFBQyxDQUFBLElBQUQsQ0FBTSxLQUFOLEVBQVksQ0FBWixFQUFjLENBQWQsRUFBZ0IsT0FBaEIsRUFBd0IsUUFBeEIsRUFBNUI7O0lBQ0EsSUFBRyxRQUFBLElBQVksQ0FBZjtNQUNDLE1BQUEsR0FBUyxLQUFLLENBQUMsT0FBTixDQUFjLE1BQWQ7TUFDVCxJQUFDLENBQUEsSUFBRCxDQUFNLENBQUEsR0FBRSxRQUFSLEVBQWtCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLGdCQUFnQixDQUFDLEtBQWpCLENBQXVCLEdBQXZCLENBQTJCLENBQUMsTUFBRCxDQUFuRCxFQUE2RDtRQUFDLENBQUEsRUFBRSxPQUFIO1FBQVksR0FBQSxFQUFJLFFBQWhCO1FBQTBCLENBQUEsRUFBRTtNQUE1QixDQUFvQyxDQUFDLEtBQUQsQ0FBakcsRUFGRDs7V0FHQSxHQUFBLENBQUE7RUFUVzs7RUFXWixJQUFPLENBQUMsR0FBRCxFQUFLLE1BQUwsQ0FBQTtBQUNSLFFBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUE7SUFBRSxJQUFHLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQVQsS0FBbUIsQ0FBdEI7TUFBNkIsR0FBRyxDQUFDLElBQUosQ0FBUywrQ0FBVCxFQUE3Qjs7SUFFQSxHQUFHLENBQUMsSUFBSixDQUFTLFdBQUEsR0FBYyxNQUF2QjtJQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsRUFBVDtJQUVBLE1BQUEsR0FBUztJQUNULE1BQUEsSUFBZ0IsQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFQLEVBQWdCLENBQWhCLEVBQW9CLEtBQXBCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxJQUFQLEVBQWdCLENBQWhCLEVBQW9CLEtBQXBCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQLEVBQWdCLENBQWhCLEVBQW9CLEtBQXBCO0lBQ2hCLE1BQUEsSUFBVSxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQLEVBQWUsRUFBZixFQUFvQixJQUFwQjtBQUNoQjtJQUFBLEtBQUEscUNBQUE7O01BQ0MsTUFBQSxJQUFVLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQSxDQUFBLENBQUcsQ0FBQSxHQUFFLENBQUwsQ0FBQSxDQUFQLEVBQWtCLENBQWxCLEVBQXFCLEtBQXJCO0lBRFg7SUFFQSxNQUFBLElBQVUsR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sU0FBUCxFQUFrQixFQUFsQixFQUFzQixLQUF0QjtBQUVoQjtJQUFBLEtBQUEsZ0RBQUE7O01BQ0MsSUFBRyxDQUFBLEdBQUksSUFBQyxDQUFBLENBQUMsQ0FBQyxHQUFQLEtBQWMsQ0FBakI7UUFBd0IsR0FBRyxDQUFDLElBQUosQ0FBUyxNQUFULEVBQXhCOztNQUNBLENBQUEsR0FBSTtNQUNKLENBQUEsSUFBVyxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQSxHQUFFLENBQUgsQ0FBSyxDQUFDLFFBQU4sQ0FBQSxDQUFQLEVBQWtDLENBQWxDLEVBQXNDLEtBQXRDO01BQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQSxHQUFFLE1BQU0sQ0FBQyxFQUFWLENBQWEsQ0FBQyxRQUFkLENBQUEsQ0FBUCxFQUFrQyxDQUFsQyxFQUFzQyxLQUF0QztNQUNYLENBQUEsSUFBSyxHQUFBLEdBQU0sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVgsQ0FBQSxDQUFQLEVBQWlDLENBQWpDLEVBQXFDLEtBQXJDO01BQ1gsQ0FBQSxJQUFLLEdBQUEsR0FBTSxDQUFDLENBQUMsSUFBRixDQUFPLE1BQU0sQ0FBQyxJQUFkLEVBQWlDLEVBQWpDLEVBQXNDLElBQXRDO01BQ1gsQ0FBQSxJQUFLO0FBQ0w7TUFBQSxLQUFBLHdDQUFBOztRQUNDLElBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQVYsS0FBaUIsQ0FBQyxDQUFyQjtVQUE0QixDQUFBLElBQUssU0FBakM7O1FBQ0EsSUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUQsQ0FBVixLQUFpQixDQUFDLENBQXJCO1VBQTRCLENBQUEsSUFBSyxTQUFqQzs7UUFDQSxJQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFWLElBQWlCLENBQXBCO1VBQ0MsQ0FBQSxJQUFLLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQSxDQUFBLENBQUcsQ0FBQSxHQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFmLENBQUEsQ0FBQSxDQUFxQixDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBRCxDQUFHLENBQUMsQ0FBRCxDQUFkLENBQTVCLENBQUEsQ0FBQSxDQUFpRCxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFELENBQVgsQ0FBdEQsQ0FBQSxDQUFQLEVBQWdGLENBQWhGLEVBQW9GLEtBQXBGLEVBRE47O01BSEQ7TUFNQSxDQUFBLElBQUssR0FBQSxHQUFNLENBQUMsQ0FBQyxJQUFGLENBQU8sQ0FBQyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQUMsQ0FBQSxDQUFDLENBQUMsS0FBSCxHQUFTLENBQXZCLENBQUQsQ0FBMkIsQ0FBQyxPQUE1QixDQUFvQyxDQUFwQyxDQUFQLEVBQWdELEVBQWhELEVBQXFELEtBQXJEO01BQ1gsR0FBRyxDQUFDLElBQUosQ0FBUyxDQUFUO01BQ0EsSUFBRyxDQUFBLEdBQUksSUFBQyxDQUFBLENBQUMsQ0FBQyxHQUFQLEtBQWMsSUFBQyxDQUFBLENBQUMsQ0FBQyxHQUFILEdBQU8sQ0FBeEI7UUFBK0IsR0FBRyxDQUFDLElBQUosQ0FBUyxJQUFULEVBQS9COztJQWhCRDtXQWlCQSxHQUFHLENBQUMsSUFBSixDQUFTLElBQVQ7RUFoQ007O0FBOUdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZyxwcmludCxyYW5nZSxzY2FsZXgsc2NhbGV5IH0gZnJvbSAnLi9nbG9iYWxzLmpzJyBcclxuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vcGFnZS5qcycgXHJcbmltcG9ydCB7IEJ1dHRvbixzcHJlYWQgfSBmcm9tICcuL2J1dHRvbi5qcycgIFxyXG5pbXBvcnQgeyBMaXN0YSB9IGZyb20gJy4vbGlzdGEuanMnIFxyXG5cclxuZXhwb3J0IGNsYXNzIFN0YW5kaW5ncyBleHRlbmRzIFBhZ2VcclxuXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdFx0c3VwZXIoKVxyXG5cdFx0QHQgPSBnLnRvdXJuYW1lbnRcclxuXHRcdEBidXR0b25zLkFycm93TGVmdCAgPSBuZXcgQnV0dG9uICcnLCAnJywgKCkgPT4gZy5zZXRTdGF0ZSBnLkFDVElWRVxyXG5cdFx0QGJ1dHRvbnMuQXJyb3dSaWdodCA9IG5ldyBCdXR0b24gJycsICcnLCAoKSA9PiBnLnNldFN0YXRlIGcuVEFCTEVTXHJcblx0XHRAYnV0dG9ucy5zLmFjdGl2ZSA9IGZhbHNlXHJcblxyXG5cdHNldExpc3RhIDogLT5cclxuXHJcblx0XHRyaGVhZGVyID0gXy5tYXAgcmFuZ2UoMSxAdC5yb3VuZCsxKSwgKGkpIC0+IFwiICN7aSUxMH0gXCJcclxuXHRcdHJoZWFkZXIgPSByaGVhZGVyLmpvaW4gJydcclxuXHRcdGhlYWRlciA9IFwiXCJcclxuXHRcdGhlYWRlciArPSAgICAgICBnLnR4dFQgXCJQb3NcIiwgICAgICAgICAgMywgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJJZFwiLCAgICAgICAgICAgMywgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJFbG9cIiwgICAgICAgICAgNCwgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJOYW1lXCIsICAgICAgICAyNSwgTEVGVFxyXG5cdFx0aGVhZGVyICs9ICcnICArIGcudHh0VCByaGVhZGVyLCAzKkByb3VuZCwgTEVGVCBcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJRdWFsaXR5XCIsICAgICAgOCwgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJTY29yZVwiLCAgICAgICAgNSwgUklHSFRcclxuXHJcblx0XHRAcGxheWVyc0J5UGVyZm9ybWFuY2UgPSBfLmNsb25lIEB0LnBsYXllcnNCeUlELnNsaWNlIDAsZy5OXHJcblx0XHRAcGxheWVyc0J5UGVyZm9ybWFuY2UgPSBfLnNvcnRCeSBAcGxheWVyc0J5UGVyZm9ybWFuY2UsIChwKSA9PiAtKHAuY2hhbmdlKEB0LnJvdW5kKzEpKVxyXG5cclxuXHRcdEBsaXN0YSA9IG5ldyBMaXN0YSBAcGxheWVyc0J5UGVyZm9ybWFuY2UsIGhlYWRlciwgQGJ1dHRvbnMsIChwLGluZGV4LHBvcykgPT4gIyByZXR1cm5lcmEgc3Ryw6RuZ2VuIHNvbSBza2Egc2tyaXZhcyB1dC4gRGVzc3V0b20gcml0YXMgbGlnaHRidWxicyBow6RyLlxyXG5cdFx0XHRAeV9idWxiID0gKDUgKyBpbmRleCkgKiBnLlpPT01bZy5zdGF0ZV0gXHJcblx0XHRcdHRleHRBbGlnbiBMRUZUXHJcblx0XHRcdGZpbGwgJ2JsYWNrJyBcclxuXHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0cyArPSAgICAgICBnLnR4dFQgKDErcG9zKS50b1N0cmluZygpLCAgICAgMywgIFJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUICgxK3AuaWQpLnRvU3RyaW5nKCksICAgIDMsICBSSUdIVFxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCBwLmVsby50b1N0cmluZygpLCAgICAgICA0LCAgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcC5uYW1lLCAgICAgICAgICAgICAgICAyNSwgIExFRlRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgJycsICAgICAgMyAqIChAdC5yb3VuZC0xKSwgIENFTlRFUlxyXG5cdFx0XHRpZiBnLkZBQ1RPUiA9PSAwIHRoZW4gcyArPSAnICcgKyBnLnR4dFQgcC5jaGFuZ2UoQHQucm91bmQpLnRvRml4ZWQoMyksIDcsIFJJR0hUXHJcblx0XHRcdGlmIGcuRkFDVE9SICE9IDAgdGhlbiBzICs9ICcgJyArIGcudHh0VCBwLmNoYW5nZShAdC5yb3VuZCkudG9GaXhlZCgxKSwgNywgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgcC5zY29yZSgpLnRvU3RyaW5nKCksICAgNSwgIFJJR0hUXHJcblxyXG5cdFx0XHRmb3IgciBpbiByYW5nZSBnLnRvdXJuYW1lbnQucm91bmQgLSAxICMtIDFcclxuXHRcdFx0XHR4ID0gZy5aT09NW2cuc3RhdGVdICogKDI0LjIgKyAxLjgqcilcclxuXHRcdFx0XHRAbGlnaHRidWxiIHAuaWQsIHAuY29sW3JdLCB4LCBAeV9idWxiLCBwLnJlcy5zbGljZShyLHIrMSksIHAub3BwW3JdXHJcblx0XHRcdHNcclxuXHRcdEBsaXN0YS5wYWludFllbGxvd1JvdyA9IGZhbHNlXHJcblx0XHRzcHJlYWQgQGJ1dHRvbnMsIDEwLCBAeSwgQGhcclxuXHJcblx0bW91c2VNb3ZlZCA6ID0+XHJcblx0XHRyID0gcm91bmQgKChtb3VzZVggLyBnLlpPT01bZy5zdGF0ZV0gLSAyNC4yKSAvIDEuOClcclxuXHRcdGl5ID0gQGxpc3RhLm9mZnNldCArIHJvdW5kIG1vdXNlWSAvIGcuWk9PTVtnLnN0YXRlXSAtIDVcclxuXHRcdGlmIDAgPD0gaXkgPCBAcGxheWVyc0J5UGVyZm9ybWFuY2UubGVuZ3RoIGFuZCAwIDw9IHIgPCBnLnRvdXJuYW1lbnQucm91bmQgLSAxXHJcblx0XHRcdCMgYSA9IGl5XHJcblx0XHRcdHBhID0gQHBsYXllcnNCeVBlcmZvcm1hbmNlW2l5XVxyXG5cdFx0XHRiID0gcGEub3BwW3JdXHJcblx0XHRcdGlmIGIgPT0gZy5CWUUgICB0aGVuIGcuaGVscCA9IFwiI3twYS5lbG99ICN7cGEubmFtZX0gaGFzIGEgYnllID0+IGNoZyA9ICN7Zy5LLzJ9XCJcclxuXHRcdFx0aWYgYiA9PSBnLlBBVVNFIHRoZW4gZy5oZWxwID0gXCIje3BhLmVsb30gI3twYS5uYW1lfSBoYXMgYSBwYXVzZSA9PiBjaGcgPSAwXCJcclxuXHRcdFx0aWYgYiA+PSAwXHRcdFx0XHRcclxuXHRcdFx0XHRwYiA9IEB0LnBsYXllcnNCeUlEW2JdXHJcblx0XHRcdFx0Y2hnID0gcGEuY2FsY1JvdW5kIHJcclxuXHJcblx0XHRcdFx0cyA9IFwiXCJcclxuXHRcdFx0XHRzICs9ICAgICAgIGcudHh0VCAnJywgICAgICAgICAgICAgICAgICAgICAgMywgIFJJR0hUXHJcblx0XHRcdFx0cyArPSAnICcgKyBnLnR4dFQgKDErcGIuaWQpLnRvU3RyaW5nKCksICAgIDMsICBSSUdIVFxyXG5cdFx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBiLmVsby50b1N0cmluZygpLCAgICAgICA0LCAgUklHSFRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBwYi5uYW1lLCAgICAgICAgICAgICAgICAyNSwgIExFRlRcclxuXHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCAnJywgICAgICAgMyAqIChAdC5yb3VuZC0xKSwgIExFRlRcclxuXHRcdFx0XHRpZiBnLkZBQ1RPUiA9PSAwXHJcblx0XHRcdFx0XHRkaWZmID0gcGEuZWxvIC0gcGIuZWxvXHJcblx0XHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBjaGcudG9GaXhlZCgzKSwgNywgIFJJR0hUXHJcblx0XHRcdFx0XHRzICs9IFwiID0gI3tnLkt9Kigje3BhLnJlc1tyXS8yfS1wKCN7ZGlmZn0pKSBwKCN7ZGlmZn0pPSN7Zy5GKGRpZmYpLnRvRml4ZWQoMyl9XCJcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRzICs9ICcgJyArIGcudHh0VCBjaGcudG9GaXhlZCgxKSwgNywgIFJJR0hUXHJcblx0XHRcdFx0XHQjIGlmIHBhLnJlc1tyXSA9PSAnMScgdGhlbiBzICs9IFwiID0gMC41ICogKCN7Zy5PRkZTRVR9ICsgI3tnLnR4dFQgcGIuZWxvLCA3LCBSSUdIVH0pXCJcclxuXHRcdFx0XHRcdCMgaWYgcGEucmVzW3JdID09ICcyJyB0aGVuIHMgKz0gXCIgPSAje2cuT0ZGU0VUfSArICN7Zy50eHRUIHBiLmVsbywgNywgUklHSFR9XCJcclxuXHRcdFx0XHRcdGlmIHBhLnJlc1tyXSA9PSAnMScgdGhlbiBzICs9IFwiID0gMC41ICogI3tnLnR4dFQgcGIuZWxvLCA3LCBSSUdIVH1cIlxyXG5cdFx0XHRcdFx0aWYgcGEucmVzW3JdID09ICcyJyB0aGVuIHMgKz0gXCIgPSAje2cudHh0VCBwYi5lbG8sIDcsIFJJR0hUfVwiXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRnLmhlbHAgPSBzXHJcblx0XHRlbHNlXHJcblx0XHRcdGcuaGVscCA9IFwiXCJcclxuXHJcblx0bW91c2VXaGVlbCAgIDogKGV2ZW50ICktPiBAbGlzdGEubW91c2VXaGVlbCBldmVudFxyXG5cdG1vdXNlUHJlc3NlZCA6IChldmVudCkgLT4gQGxpc3RhLm1vdXNlUHJlc3NlZCBldmVudFxyXG5cdGtleVByZXNzZWQgICA6IChldmVudCkgLT4gQGJ1dHRvbnNba2V5XS5jbGljaygpXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0ZmlsbCAnd2hpdGUnXHJcblx0XHRAc2hvd0hlYWRlciBAdC5yb3VuZC0xXHJcblx0XHRAbGlzdGEuZHJhdygpXHJcblx0XHRmb3Iga2V5LGJ1dHRvbiBvZiBAYnV0dG9uc1xyXG5cdFx0XHRidXR0b24uZHJhdygpXHJcblx0XHR0ZXh0QWxpZ24gTEVGVFxyXG5cdFx0dGV4dCBnLmhlbHAsIDEwLCAzKmcuWk9PTVtnLnN0YXRlXVxyXG5cclxuXHRzaG93IDogKHMseCx5LGJnLGZnKSAtPlxyXG5cdFx0ZmlsbCBiZ1xyXG5cdFx0cmVjdCB4LCB5LCAxLjYgKiBnLlpPT01bZy5zdGF0ZV0sIDAuOSAqIGcuWk9PTVtnLnN0YXRlXVxyXG5cdFx0ZmlsbCBmZ1xyXG5cdFx0QHR4dCBzLCB4LCB5KzEsICBDRU5URVJcclxuXHJcblx0bGlnaHRidWxiIDogKGlkLCBjb2xvciwgeCwgeSwgcmVzdWx0LCBvcHBvbmVudCkgLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0cmVjdE1vZGUgIENFTlRFUlxyXG5cdFx0cyA9IDEgKyBvcHBvbmVudFxyXG5cdFx0aWYgb3Bwb25lbnQgPT0gZy5QQVVTRSB0aGVuIEBzaG93IFwiIFAgXCIseCx5LFwiZ3JheVwiLCd5ZWxsb3cnXHJcblx0XHRpZiBvcHBvbmVudCA9PSBnLkJZRSAgIHRoZW4gQHNob3cgXCJCWUVcIix4LHksXCJncmVlblwiLCd5ZWxsb3cnXHJcblx0XHRpZiBvcHBvbmVudCA+PSAwXHJcblx0XHRcdHJlc3VsdCA9ICcwMTInLmluZGV4T2YgcmVzdWx0XHJcblx0XHRcdEBzaG93IDErb3Bwb25lbnQsIHgsIHksICdyZWQgZ3JheSBncmVlbicuc3BsaXQoJyAnKVtyZXN1bHRdLCB7YjonYmxhY2snLCAnICc6J3llbGxvdycsIHc6J3doaXRlJ31bY29sb3JdXHJcblx0XHRwb3AoKVxyXG5cclxuXHRtYWtlIDogKHJlcyxoZWFkZXIpIC0+XHJcblx0XHRpZiBAdC5wYWlycy5sZW5ndGggPT0gMCB0aGVuIHJlcy5wdXNoIFwiVGhpcyBST1VORCBjYW4ndCBiZSBwYWlyZWQhIChUb28gbWFueSByb3VuZHMpXCJcclxuXHJcblx0XHRyZXMucHVzaCBcIlNUQU5ESU5HU1wiICsgaGVhZGVyXHJcblx0XHRyZXMucHVzaCBcIlwiXHJcblxyXG5cdFx0aGVhZGVyID0gXCJcIlxyXG5cdFx0aGVhZGVyICs9ICAgICAgIGcudHh0VCBcIlBvc1wiLCAgIDMsICBSSUdIVFxyXG5cdFx0aGVhZGVyICs9ICcgJyArIGcudHh0VCAnSWQnLCAgICAzLCAgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJFbG8wXCIsICA0LCAgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJOYW1lXCIsIDI1LCAgTEVGVFxyXG5cdFx0Zm9yIHIgaW4gcmFuZ2UgQHQucm91bmRcclxuXHRcdFx0aGVhZGVyICs9IGcudHh0VCBcIiN7cisxfVwiLCAgNiwgUklHSFRcclxuXHRcdGhlYWRlciArPSAnICcgKyBnLnR4dFQgXCJRdWFsaXR5XCIsIDExLCBSSUdIVFxyXG5cdFx0XHJcblx0XHRmb3IgcGxheWVyLGkgaW4gQHBsYXllcnNCeVBlcmZvcm1hbmNlXHJcblx0XHRcdGlmIGkgJSBAdC5wcHAgPT0gMCB0aGVuIHJlcy5wdXNoIGhlYWRlclxyXG5cdFx0XHRzID0gXCJcIlxyXG5cdFx0XHRzICs9ICAgICAgIGcudHh0VCAoMStpKS50b1N0cmluZygpLCAgICAgICAgICAzLCAgUklHSFRcclxuXHRcdFx0cyArPSAnICcgKyBnLnR4dFQgKDErcGxheWVyLmlkKS50b1N0cmluZygpLCAgMywgIFJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBsYXllci5lbG8udG9TdHJpbmcoKSwgICAgNCwgIFJJR0hUXHJcblx0XHRcdHMgKz0gJyAnICsgZy50eHRUIHBsYXllci5uYW1lLCAgICAgICAgICAgICAgMjUsICBMRUZUXHJcblx0XHRcdHMgKz0gJyAnXHJcblx0XHRcdGZvciByIGluIHJhbmdlIEB0LnJvdW5kXHJcblx0XHRcdFx0aWYgcGxheWVyLm9wcFtyXSA9PSAtMiB0aGVuIHMgKz0gJyAgICBQICdcclxuXHRcdFx0XHRpZiBwbGF5ZXIub3BwW3JdID09IC0xIHRoZW4gcyArPSAnICAgQllFJ1xyXG5cdFx0XHRcdGlmIHBsYXllci5vcHBbcl0gPj0gMFxyXG5cdFx0XHRcdFx0cyArPSBnLnR4dFQgXCIjezErcGxheWVyLm9wcFtyXX0je2cuUklOR1NbcGxheWVyLmNvbFtyXVswXV19I3tcIjDCvTFcIltwbGF5ZXIucmVzW3JdXX1cIiwgNiwgIFJJR0hUXHRcdFx0XHJcblxyXG5cdFx0XHRzICs9ICcgJyArIGcudHh0VCAocGxheWVyLmNoYW5nZShAdC5yb3VuZCsxKSkudG9GaXhlZCg2KSwgIDEwLCAgUklHSFRcclxuXHRcdFx0cmVzLnB1c2ggcyBcclxuXHRcdFx0aWYgaSAlIEB0LnBwcCA9PSBAdC5wcHAtMSB0aGVuIHJlcy5wdXNoIFwiXFxmXCJcclxuXHRcdHJlcy5wdXNoIFwiXFxmXCIiXX0=
//# sourceURL=c:\github\ELO-Pairings\coffee\page_standings.coffee