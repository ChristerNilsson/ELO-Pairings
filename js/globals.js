// Generated by CoffeeScript 2.7.0
  // import { Tournament } from './tournament.js' 
var rd, xxx,
  indexOf = [].indexOf;

import {
  Tables
} from './page_tables.js';

import {
  Names
} from './page_names.js';

import {
  Standings
} from './page_standings.js';

import {
  Active
} from './page_active.js';

export var g = {};

//##########################################
g.K = 20; // 2

// g.K0 = 40 # 40=juniors 20=normal 10=masters
// g.k = 1.0 # 0.7

// parameters that affects matching
g.EXPONENT = 1.01; // 1 or 1.01 (or 2)

g.DIFF = 'ELO'; // ELO använder senaste elo i Standings

//g.DIFF = 'POS' # POS använder senaste position i Standings
g.COLORS = 1; // www not ok

//g.COLORS = 2 # www ok

//##########################################
export var print = console.log;

export var range = _.range;

export var scalex = function(x) {
  return x * g.ZOOM[g.state] / 20;
};

export var scaley = function(y) {
  return y * g.ZOOM[g.state];
};

g.seed = 0;

export var random = function() {
  return (((Math.sin(g.seed++) / 2 + 0.5) * 10000) % 100) / 100;
};

g.BYE = -1;

g.PAUSE = -2;

g.TABLES = 0;

g.NAMES = 1;

g.STANDINGS = 2;

g.ACTIVE = 3;

g.pages = [];

g.message = "";

g.scoringProbability = function(diff) {
  return 1 / (1 + pow(10, diff / 400));
};

g.showType = function(a) {
  if (typeof a === 'string') {
    return `'${a}'`;
  } else {
    return a;
  }
};

export var assert = function(a, b) {
  if (!_.isEqual(a, b)) {
    return print(`Assert failure: ${JSON.stringify(a)} != ${JSON.stringify(b)}`);
  }
};

g.ok = function(a, b) {
  var ref;
  return a.id !== b.id && (ref = a.id, indexOf.call(b.opp, ref) < 0) && abs(a.balans() + b.balans()) <= g.COLORS;
};

g.other = function(col) {
  if (col === 'b') {
    return 'w';
  } else {
    return 'b';
  }
};

g.myRound = function(x, decs) {
  return x.toFixed(decs);
};

assert("2.0", g.myRound(1.99, 1));

assert("0.6", g.myRound(0.61, 1));

g.ints2strings = function(ints) {
  return `${ints}`;
};

assert("1,2,3", g.ints2strings([1, 2, 3]));

assert("1", g.ints2strings([1]));

assert("", g.ints2strings([]));

g.res2string = function(ints) {
  var i;
  return ((function() {
    var j, len, results;
    results = [];
    for (j = 0, len = ints.length; j < len; j++) {
      i = ints[j];
      results.push(i.toString());
    }
    return results;
  })()).join('');
};

assert("123", g.res2string([1, 2, 3]));

assert("1", g.res2string([1]));

assert("", g.res2string([]));

g.zoomIn = function(n) {
  return g.ZOOM[g.state]++;
};

g.zoomOut = function(n) {
  return g.ZOOM[g.state]--;
};

g.setState = function(newState) {
  if (g.tournament.round > 0) {
    return g.state = newState;
  }
};

g.invert = function(arr) {
  var i, j, len, ref, res;
  res = [];
  ref = range(arr.length);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    res[arr[i]] = i;
  }
  return res;
};

assert([0, 1, 2, 3], g.invert([0, 1, 2, 3]));

assert([3, 2, 0, 1], g.invert([2, 3, 1, 0]));

assert([2, 3, 1, 0], g.invert(g.invert([2, 3, 1, 0])));

xxx = [[2, 1], [12, 2], [12, 1], [3, 4]];

xxx.sort(function(a, b) {
  var diff;
  diff = a[0] - b[0];
  if (diff === 0) {
    return a[1] - b[1];
  } else {
    return diff;
  }
});

assert([[2, 1], [3, 4], [12, 1], [12, 2]], xxx);

assert(true, [2] > [12]);

assert(true, "2" > "12");

assert(false, 2 > 12);

// xxx = [[2,1],[12,2],[12,1],[3,4]]
// assert [[2,1],[12,1],[12,2],[3,4]], _.sortBy(xxx, (x) -> [x[0],x[1]])
// assert [[3,4],[2,1],[12,1],[12,2]], _.sortBy(xxx, (x) -> -x[0])
// assert [[2,1],[12,1],[3,4],[12,2]], _.sortBy(xxx, (x) -> x[1])
// assert [[3,4],[12,1],[2,1],[12,2]], _.sortBy(xxx, (x) -> -x[1])
g.calcMissing = function() {
  var j, len, missing, p, ref;
  missing = 0;
  ref = g.tournament.persons;
  for (j = 0, len = ref.length; j < len; j++) {
    p = ref[j];
    if (!p.active) {
      continue;
    }
    if (g.BYE === _.last(p.opp)) {
      continue;
    }
    if (p.res.length < p.col.length) {
      missing++;
    }
  }
  g.message = `${Math.floor(missing / 2)} results missing`;
  return missing;
};

g.sum = function(s) {
  var item, j, len, res;
  res = 0;
  for (j = 0, len = s.length; j < len; j++) {
    item = s[j];
    res += parseFloat(item);
  }
  return res;
};

assert(6, g.sum('012012'));

g.sumNumbers = function(arr) {
  var item, j, len, res;
  // print 'sumNumbers',arr
  res = 0;
  for (j = 0, len = arr.length; j < len; j++) {
    item = arr[j];
    res += item;
  }
  return res;
};

assert(15, g.sumNumbers([1, 2, 3, 4, 5]));

g.txtT = function(value, w, align = window.CENTER) {
  var diff, lt, res, rt;
  if (value.length > w) {
    value = value.substring(0, w);
  }
  if (value.length < w && align === window.RIGHT) {
    value = value.padStart(w);
  }
  if (align === window.LEFT) {
    res = value + _.repeat(' ', w - value.length);
  }
  if (align === window.RIGHT) {
    res = _.repeat(' ', w - value.length) + value;
  }
  if (align === window.CENTER) {
    diff = w - value.length;
    lt = _.repeat(' ', Math.floor((1 + diff) / 2));
    rt = _.repeat(' ', Math.floor(diff / 2));
    res = lt + value + rt;
  }
  return res;
};

g.prBth = function(score) {
  return `${'0½1'[score]}-${'1½0'[score]}`;
};

g.prBoth = function(score) {
  return ` ${'0½1'[score]} - ${'1½0'[score]} `;
};

//##########################
export var DecimalRemover = class DecimalRemover {
  constructor(numbers) {
    var decimals, j, k, l, len, len1, len2, nr, number, ref, ref1, temp;
    temp = {}; // används för att bli av med dubletter
    for (j = 0, len = numbers.length; j < len; j++) {
      number = numbers[j];
      temp[number] = number;
    }
    numbers = _.values(temp);
    numbers = (function() {
      var k, len1, results;
      results = [];
      for (k = 0, len1 = numbers.length; k < len1; k++) {
        nr = numbers[k];
        results.push([nr, 0]);
      }
      return results;
    })();
    // anropa en extra gång för att förbättra resultatet. (decimaler läggs till vid behov)
    this.data = this.update(this.update(numbers));
    // Sök upp största antal decimaler
    this.n = _.maxBy(this.data, function(item) {
      return item[1];
    });
    print(this.n);
    this.n = this.n[1];
    this.hash = {};
    ref = this.data;
    for (k = 0, len1 = ref.length; k < len1; k++) {
      [nr, decimals] = ref[k];
      this.hash[nr] = decimals;
    }
    print('hash', this.hash);
    print('DecimalRemover', this.data);
    ref1 = this.data;
    for (l = 0, len2 = ref1.length; l < len2; l++) {
      [nr, decimals] = ref1[l];
      print(nr, this.format(nr));
    }
  }

  update(pairs, levels = 0) {
    var decimals, hash, j, key, len, nr, result;
    result = [];
    if (pairs.length === 1) {
      pairs[0][1] -= 1;
      return pairs;
    }
    hash = {};
    for (j = 0, len = pairs.length; j < len; j++) {
      [nr, decimals] = pairs[j];
      key = nr.toFixed(decimals);
      if (!(key in hash)) {
        hash[key] = [];
      }
      hash[key].push([nr, decimals + 1]);
    }
    for (key in hash) {
      result = result.concat(this.update(hash[key], levels + 1));
    }
    return result;
  }

  // uppdatera antalet decimaler så att varje tal blir unikt.
  // Börja med noll decimaler och lägg till fler vid behov.
  format(number) { // lista med flyttal
    var decimals, p, s;
    if (!(number in this.hash)) {
      return 'saknas';
    }
    decimals = Math.abs(this.hash[number]);
    // print 'format',number,decimals
    s = number.toFixed(decimals);
    // strings = (nr.toFixed decs for [nr,decs] in data)
    // Se till att decimalpunkterna kommer ovanför varandra
    // Lägg till blanktecken på höger sida.
    p = _.lastIndexOf(s, '.');
    if (p >= 0) {
      p = s.length - 1 - p;
    }
    return s + _.repeat(' ', this.n - p);
  }

};

rd = new DecimalRemover([1.23001, -1.19, 1.23578, 1.2397, 0, -10.3]);

assert("1.240", rd.format(1.2397));

assert("1.236", rd.format(1.23578));

assert("1.23 ", rd.format(1.23001));

assert("0    ", rd.format(0));

assert("-1    ", rd.format(-1.19));

assert("-10    ", rd.format(-10.3));

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ELO-Pairings\coffee\globals.coffee